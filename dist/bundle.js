!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=12)}([function(e,t,r){"use strict";function n(e){return e}function o(e){return Object.keys(e)}var u;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.create=function(e){var t=new i;return e.forEach(function(e){return t.add(e)}),t}}(u||(u={}));var i=function(){function e(){this.items=[],this.index={}}return e.create=function(t){var r=new e;return t.forEach(function(e){return r.add(e)}),r},e.prototype.size=function(){return this.items.length},e.prototype.toArray=function(){return this.items.concat([])},e.prototype.copy=function(){return u.create(this.items)},e.prototype.forEach=function(e){for(var t=0;t<this.items.length;t++){if(!e(this.items[t]))return}},e.prototype.equals=function(e){return e.size()==this.size()&&this.items.every(function(t){return e.contains(t)})},e.prototype.all=function(e){for(var t=this.items,r=t.length,n=0;n<r;n++){if(!e(t[n]))return!1}return!0},e.prototype.map=function(t){var r=new e;return this.items.forEach(function(e){return r.add(t(e))}),r},e.prototype.contains=function(e){var t=e.toString();return this.containsHash(t)},e.prototype.add=function(e){var t=e.toString();return!this.containsHash(t)&&(this.index[t]={index:this.items.length,value:e},this.items.push(e),!0)},e.prototype.remove=function(e){var t=e.toString(),r=this.index[t];if(null==r)return!1;delete this.index[t];for(var n=r.index+1;n<this.items.length;n++)this.index[this.items[n].toString()].index--;return this.items.splice(r.index,1),!0},e.prototype.union=function(t){var r=new e;return this.forEach(function(e){return r.add(e)}),t.forEach(function(e){return r.add(e)}),r},e.prototype.intersection=function(t){var r=new e;return this.forEach(function(e){return t.contains(e)&&r.add(e),!0}),r},e.prototype.subtract=function(t){var r=new e;return this.forEach(function(e){return t.contains(e)||r.add(e),!0}),r},e.prototype.isSubsetOf=function(e){for(var t=0;t<this.items.length;t++){var r=this.items[t];if(!e.contains(r))return!1}return!0},e.prototype.isDisjoint=function(e){for(var t=0;t<this.items.length;t++){var r=this.items[t];if(e.contains(r))return!1}return!0},e.prototype.containsHash=function(e){return Object.hasOwnProperty.call(this.index,e)},e}();function a(e){return e.indexOf("'")<0?"'"+e+"'":'"'+e.replace('"','\\"')+'"'}!function(e){function t(e){return"null"===e.type}function r(e){return"string"===e.type}function i(e){return"number"===e.type}function c(e){return"boolean"===e.type}function s(e){return"array"===e.type}function p(e){return"object"===e.type}function f(e){return"union"===e.type}function l(e){return"nullable"===e.type}function y(e){return function e(u,y,d){for(var h=0;h<y.length;h++)if(y[h]===u){var b=d.map[h];return null==b&&(b=d.map[h]=d.current,d.current++),"{$"+b+"}"}if(t(u))return"Null";if(r(u))return null==u.value?"String":"String<"+a(u.value)+">";if(i(u))return"Number";if(c(u))return"Boolean";if(l(u))return"Nullable<"+e(u.subtype,y.concat([u]),d)+">";if(s(u))return"Array<"+e(u.contained,y.concat([u]),d)+">";if(p(u)){if(null==u.spec)return"Object";var _=y.concat([u]),m=o(u.spec);m.sort();for(var T=[],g=0,x=m;g<x.length;g++){var O=x[g];if(v.hasOwnProperty.call(u.spec,O)){var w=e(u.spec[O],_,d);T.push(a(O)+": "+w)}}return"{"+T.join(", ")+"}"}if(f(u)){_=y.concat([u]);for(var R=[],S=0,j=u.types;S<j.length;S++){var E=e(j[S],_,d);R.push(E)}return R.join("|")}return n(u)}(e,[],{current:0,map:{}})}function d(r){for(;"nullable"===r.type;)r=r.subtype;return t(r)?e.Null:{type:"nullable",subtype:r}}function h(e){return{type:"array",contained:e}}function v(e){return{type:"object",spec:e||null}}function b(e){var t=[];return e.forEach(function(e){f(e)?e.types.forEach(function(e){return t.push(e)}):t.push(e)}),function(e){return e.every(function(e){return l(e)})}(t)?d(b(t.map(function(e){return e.subtype}))):{type:"union",types:t}}function _(e,n){return function e(n,a,d){for(var h=0;h<d.length;h++){var v=d[h];if(n===v.a&&a===v.b)return!0}if(t(n)&&t(a))return!0;if(r(n)&&r(a))return n.value===a.value;if(i(n)&&i(a))return!0;if(c(n)&&c(a))return!0;if(l(n)&&l(a))return e(n.subtype,a.subtype,d.concat([{a:n,b:a}]));if(s(n)&&s(a))return e(n.contained,a.contained,d.concat([{a:n,b:a}]));if(p(n)&&p(a)){var b=n.spec,_=a.spec;if(null==b&&null==_)return!0;if(null!=b&&null!=_){var m=u.create(o(b)),T=u.create(o(_)),g=m.intersection(T);if(g.size()!==m.size())return!1;var x=d.concat([{a:n,b:a}]);return g.all(function(t){return e(b[t],_[t],x)})}}else if(f(n)&&f(a)){var O=n.types,w=a.types;if(O.sort(function(e,t){return y(e).localeCompare(y(t))}),w.sort(function(e,t){return y(e).localeCompare(y(t))}),O.length!==w.length)return!1;var R=d.concat([{a:n,b:a}]);for(h=0;h<O.length;h++)if(!e(O[h],w[h],R))return!1;return!0}return!1}(e,n,[])}e.isNull=t,e.isString=r,e.isNumber=i,e.isBoolean=c,e.isArray=s,e.isObject=p,e.isUnion=f,e.isNullable=l,e.toString=y,e.Null={type:"null"},e.Number={type:"number"},e.String={type:"string",value:null},e.StringValue=function(e){return{type:"string",value:e}},e.Boolean={type:"boolean"},e.Nullable=d,e.Array=h,e.Object=v,e.Union=b,e.equals=_,e.combine=function n(a,y){if(l(a)){if(l(y)){var h=n(a.subtype,y.subtype);if(null!=h)return d(h)}}else if(t(a)){if(t(y))return e.Null}else if(i(a)){if(i(y))return e.Number}else if(r(a)){if(r(y))return e.String}else if(c(a)){if(c(y))return e.Boolean}else if(f(a)){if(_(a,y))return a}else if(s(a)){if(s(y))return a}else if(p(a)&&p(y)){var b=a.spec,m=y.spec;if(null==b&&null==m)return a;if(null==b||null==m)return null;var T=u.create(o(b)),g=u.create(o(m)),x={};return T.union(g).all(function(e){var t=b[e],r=m[e];if(null!=t&&null!=r){var o=n(t,r);if(null==o)return!1;x[e]=o}else x[e]=null!=t?t:r;return!0})?v(x):null}return null},e.unify=function e(r,o){return(t(r)||l(r))&&(t(o)||l(o))?l(r)&&l(o)?d(e(r.subtype,o.subtype)):l(r)?r:l(o)?o:t(r)?o:t(o)?r:(n(r),n(o)):t(r)||l(r)?t(r)?d(o):l(r)?d(e(r.subtype,o)):n(r):t(o)||l(o)?t(o)?d(r):l(o)?d(e(r,o.subtype)):n(o):b([r,o])},e.infer=function t(r){if("number"==typeof r)return e.Number;if("string"==typeof r)return e.String;if("boolean"==typeof r)return e.Boolean;if(null==r)return e.Null;if(r&&"number"==typeof r.length){for(var n=[],o=0;o<r.length;o++){var u=t(r[o]);if(null==u)return null;for(var i=!1,a=0;a<n.length;a++)if(_(n[a],u)){i=!0;break}i||n.push(u)}return 1===n.length?h(n[0]):h(b(n))}return"object"==typeof r?v():null}}(t.Types||(t.Types={}))},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var u=r(3),i=r(0),a=function(){function e(){}return e.prototype.withDefault=function(e){return new c(this,e)},e.prototype.asOptional=function(){return new s(this)},e}();t.AbstractReader=a;var c=function(e){function t(t,r){var n=e.call(this)||this;return n.reader=t,n.default=r,n.expectedType=t.expectedType,n}return o(t,e),t.prototype.read=function(e){var t=this;return u.Result.success(this.reader.read(e).map(function(e){return e},function(){return t.default}))},t}(a);t.DefaultReader=c;var s=function(e){function t(t){var r=e.call(this,t,null)||this;return r.expectedType=i.Types.Nullable(t.expectedType),r}return o(t,e),t}(c);t.OptionalReader=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.create=function(e,t){return{type:"array-error",index:e,error:t}}}(t.ArrayChildError||(t.ArrayChildError={})),function(e){e.create=function(e,t){return{type:"error-group",value:e,errors:t}}}(t.ErrorGroup||(t.ErrorGroup={})),function(e){e.create=function(e,t){return{type:"inconsistent-types",value:e,found:t}}}(t.InconsistentTypesError||(t.InconsistentTypesError={})),function(e){e.create=function(e,t,r,n){return{type:"invalid-type",expected:t,actual:r,value:e,error:n||null}}}(t.InvalidTypeError||(t.InvalidTypeError={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(11),o=r(10),u=r(9);!function(e){e.success=function(e){return new n.ResultSuccessImpl(e)},e.failure=function(e){return new o.ResultFailureImpl(e)},e.all=function(t){for(var r=[],n=[],o=0;o<t.length;o++){var i=t[o];if(i.isSuccess())r.push(i);else{if(!i.isFailure())return u.unreachable("A result must either be a success or a failure.");n.push(i)}}return n.length>0?e.failure(n.map(function(e){return e.error})):e.success(r.map(function(e){return e.value}))}}(t.Result||(t.Result={}))},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=u(r(2)),a=r(1),c=r(0),s=function(e){function t(t,r){var n=e.call(this)||this;n.property=t,n.reader=r;var o={};return o[t]=r.expectedType,console.log("Extract",t,"of type",r.expectedType),n.expectedType=c.Types.Object(o),console.log("Computed expected type is",n.expectedType),n}return o(t,e),t.prototype.read=function(e){var t=this;return e&&Object.hasOwnProperty.call(e,this.property)?this.reader.read(e[this.property]):this.reader.read(null).mapFailure(function(){var r=c.Types.infer(e),n=r&&c.Types.toString(r)||"Unknown";return i.InvalidTypeError.create(e,c.Types.toString(t.expectedType),n)})},t}(a.AbstractReader);t.ExtractReader=s},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=u(r(2)),a=r(3),c=r(1),s=r(4),p=r(0),f=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=p.Types.Object({}),t}return o(t,e),t.prototype.isEmpty=function(){return!0},t.prototype.put=function(e,t){return new l(e,t,this)},t.prototype.prop=function(e,t){return new l(e,new s.ExtractReader(e,t),this)},t.prototype.read=function(){return a.Result.success({})},t}(c.AbstractReader);t.EmptyObjectConstructor=f;var l=function(){function e(e,t,r){console.log("Combining",t.expectedType,"and",r.expectedType);var n=p.Types.combine(r.expectedType,t.expectedType);if(console.log("Combined:",n),null==n)throw Error("Unable to combine types: "+r.expectedType.toString()+" and "+t.expectedType.toString());this.expectedType=n,this.property=e,this.reader=t,this.base=r}return e.prototype.isEmpty=function(){return!1},e.prototype.put=function(t,r){return new e(t,r,this)},e.prototype.prop=function(t,r){return new e(t,new s.ExtractReader(t,r),this)},e.prototype.read=function(e){var t=this;return this.base.read(e).flatMap(function(r){return t.reader.read(e).mapSuccess(function(e){var n=r;return n[t.property]=e,n})},function(r){if("invalid-type"==r.type){var n=p.Types.infer(e),o=n&&p.Types.toString(n)||"Unknown";return a.Result.failure(i.InvalidTypeError.create(e,p.Types.toString(t.expectedType),o,r))}return a.Result.failure(r)})},e}();t.ObjectConstructor=l},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i,a=u(r(2)),c=r(3),s=r(1),p=r(0);!function(e){e.create=function(e){return{type:"enum-no-match",validValues:e}}}(i||(i={}));var f=function(){function e(){this.expectedType=p.Types.Union([]),this.expectedValues=[]}return e.prototype.isEmpty=function(){return!0},e.prototype.case=function(e){return new l(e,this)},e.prototype.read=function(e){if("string"!=typeof e){var t=p.Types.infer(e),r=t&&p.Types.toString(t)||"Unknown";return c.Result.failure(a.InvalidTypeError.create(e,p.Types.toString(p.Types.String),r))}return c.Result.failure(i.create([]))},e}(),l=function(){function e(e,t){this.value=e,this.baseReader=t,this.expectedValues=t.expectedValues.concat([e])}return e.prototype.isEmpty=function(){return!1},e.prototype.case=function(t){return new e(t,this)},e.prototype.read=function(e){var t=this;if("string"!=typeof e){var r=p.Types.infer(e),n=r&&p.Types.toString(r)||"Unknown";return c.Result.failure(a.InvalidTypeError.create(e,p.Types.toString(p.Types.String),n))}return e===this.value?c.Result.success(this.value):this.baseReader.read(e).mapFailure(function(e){return"enum-no-match"===e.type?i.create(e.validValues.concat([t.value])):e})},e}(),y=function(e){function t(t){var r=e.call(this)||this;return r.base=t,r.expectedType=p.Types.Union(t.expectedValues.map(function(e){return p.Types.StringValue(e)})),r}return o(t,e),t.create=function(){return new t(new f)},t.prototype.case=function(e){return new t(this.base.case(e))},t.prototype.read=function(e){var t=this;return this.base.read(e).mapFailure(function(r){if("enum-no-match"===r.type){var n=p.Types.infer(e),o=n&&p.Types.toString(n)||"Unknown";return a.InvalidTypeError.create(e,p.Types.toString(t.expectedType),o)}return r})},t}(s.AbstractReader);t.EnumReader=y},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var u=r(2),i=r(3),a=r(1),c=r(0),s=function(e){function t(t){var r=e.call(this)||this;return r.reader=t,r.expectedType=c.Types.Array(t.expectedType),r}return o(t,e),t.prototype.read=function(e){var t=this;if(e&&"number"==typeof e.length){var r=e.map(function(e,r){return t.reader.read(e).mapFailure(function(e){return{index:r,error:e}})});return i.Result.all(r),i.Result.all(r).mapFailure(function(t){return u.ErrorGroup.create(e,t.map(function(e){return u.ArrayChildError.create(e.index,e.error)}))})}var n=c.Types.infer(e),o=n&&c.Types.toString(n)||"Unknown";return i.Result.failure(u.InvalidTypeError.create(e,this.expectedType.toString(),o))},t}(a.AbstractReader);t.ArrayReader=s},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var u=r(2),i=r(3),a=r(1),c=r(0);!function(e){var t=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=c.Types.Boolean,t}return o(t,e),t.prototype.read=function(e){if("boolean"==typeof e)return i.Result.success(e);var t=c.Types.infer(e),r=t&&c.Types.toString(t)||"Unknown";return i.Result.failure(u.InvalidTypeError.create(e,c.Types.toString(this.expectedType),r))},t}(a.AbstractReader);e.BooleanReader=t;var r=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=c.Types.String,t}return o(t,e),t.prototype.read=function(e){if("string"==typeof e)return i.Result.success(e);var t=c.Types.infer(e),r=t&&c.Types.toString(t)||"Unknown";return i.Result.failure(u.InvalidTypeError.create(e,c.Types.toString(this.expectedType),r))},t}(a.AbstractReader);e.StringReader=r;var n=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=c.Types.Number,t}return o(t,e),t.prototype.read=function(e){if("number"==typeof e)return i.Result.success(e);var t=c.Types.infer(e),r=t&&c.Types.toString(t)||"Unknown";return i.Result.failure(u.InvalidTypeError.create(e,c.Types.toString(this.expectedType),r))},t}(a.AbstractReader);e.NumberReader=n}(t.PrimitiveReaders||(t.PrimitiveReaders={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unreachable=function(e){throw Error("FATAL ERROR (UNREACHABLE)"+(e&&": "+e||""))}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.type="failure",this.error=e}return e.prototype.isSuccess=function(){return!1},e.prototype.isFailure=function(){return!0},e.prototype.map=function(e,t){return t(this.error)},e.prototype.flatMap=function(e,t){return t(this.error)},e.prototype.mapSuccess=function(t){return new e(this.error)},e.prototype.mapFailure=function(t){return new e(t(this.error))},e}();t.ResultFailureImpl=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.type="success",this.value=e}return e.prototype.isSuccess=function(){return!0},e.prototype.isFailure=function(){return!1},e.prototype.map=function(e,t){return e(this.value)},e.prototype.flatMap=function(e,t){return e(this.value)},e.prototype.mapSuccess=function(t){return new e(t(this.value))},e.prototype.mapFailure=function(t){return new e(this.value)},e}();t.ResultSuccessImpl=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),o=r(8),u=r(7),i=r(4),a=r(6),c=r(5);!function(e){e.number=new o.PrimitiveReaders.NumberReader,e.string=new o.PrimitiveReaders.StringReader,e.boolean=new o.PrimitiveReaders.BooleanReader,e.optional=function(e){return new n.OptionalReader(e)},e.array=function(e){return new u.ArrayReader(e)},e.extract=function(e,t){return new i.ExtractReader(e,t)},e.enumeration=function(){return a.EnumReader.create()},e.obj=function(){return new c.EmptyObjectConstructor}}(t.TsJson||(t.TsJson={}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,