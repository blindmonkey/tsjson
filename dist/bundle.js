!function(e){var t={};function r(n){if(t[n])return t[n].exports;var u=t[n]={i:n,l:!1,exports:{}};return e[n].call(u.exports,u,u.exports,r),u.l=!0,u.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=14)}([function(e,t,r){"use strict";function n(e){return e}function u(e){return Object.keys(e)}var o;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.create=function(e){var t=new i;return e.forEach(function(e){return t.add(e)}),t}}(o||(o={}));var i=function(){function e(){this.items=[],this.index={}}return e.create=function(t){var r=new e;return t.forEach(function(e){return r.add(e)}),r},e.prototype.size=function(){return this.items.length},e.prototype.toArray=function(){return this.items.concat([])},e.prototype.copy=function(){return o.create(this.items)},e.prototype.forEach=function(e){for(var t=0;t<this.items.length;t++){if(!e(this.items[t]))return}},e.prototype.equals=function(e){return e.size()==this.size()&&this.items.every(function(t){return e.contains(t)})},e.prototype.all=function(e){for(var t=this.items,r=t.length,n=0;n<r;n++){if(!e(t[n]))return!1}return!0},e.prototype.map=function(t){var r=new e;return this.items.forEach(function(e){return r.add(t(e))}),r},e.prototype.contains=function(e){var t=e.toString();return this.containsHash(t)},e.prototype.add=function(e){var t=e.toString();return!this.containsHash(t)&&(this.index[t]={index:this.items.length,value:e},this.items.push(e),!0)},e.prototype.remove=function(e){var t=e.toString(),r=this.index[t];if(null==r)return!1;delete this.index[t];for(var n=r.index+1;n<this.items.length;n++)this.index[this.items[n].toString()].index--;return this.items.splice(r.index,1),!0},e.prototype.union=function(t){var r=new e;return this.forEach(function(e){return r.add(e)}),t.forEach(function(e){return r.add(e)}),r},e.prototype.intersection=function(t){var r=new e;return this.forEach(function(e){return t.contains(e)&&r.add(e),!0}),r},e.prototype.subtract=function(t){var r=new e;return this.forEach(function(e){return t.contains(e)||r.add(e),!0}),r},e.prototype.isSubsetOf=function(e){for(var t=0;t<this.items.length;t++){var r=this.items[t];if(!e.contains(r))return!1}return!0},e.prototype.isDisjoint=function(e){for(var t=0;t<this.items.length;t++){var r=this.items[t];if(e.contains(r))return!1}return!0},e.prototype.containsHash=function(e){return Object.hasOwnProperty.call(this.index,e)},e}();function a(e){return e.indexOf("'")<0?"'"+e+"'":'"'+e.replace('"','\\"')+'"'}t.quote=a,function(e){function t(e){return"null"===e.type}function r(e){return"string"===e.type}function i(e){return"number"===e.type}function c(e){return"boolean"===e.type}function s(e){return"array"===e.type}function p(e){return"object"===e.type}function f(e){return"union"===e.type}function l(e){return"nullable"===e.type}function y(e){return"map"===e.type}function d(e){return"named"===e.type}function h(e){return"any"===e.type}function v(e){return function e(o,v,b){for(var _=0;_<v.length;_++)if(v[_]===o){var T=b.map[_];return null==T&&(T=b.map[_]=b.current,b.current++),"{$"+T+"}"}if(t(o))return"Null";if(r(o))return null==o.value?"String":"String<"+a(o.value)+">";if(i(o))return"Number";if(h(o))return"Any";if(c(o))return"Boolean";if(d(o))return"Named<"+o.name+">";if(y(o))return"Map<"+e(o.value,v.concat([o]),b)+">";if(l(o))return"Nullable<"+e(o.subtype,v.concat([o]),b)+">";if(s(o))return"Array<"+e(o.contained,v.concat([o]),b)+">";if(p(o)){if(null==o.spec)return"Object";var g=v.concat([o]),x=u(o.spec);x.sort();for(var O=[],R=0,w=x;R<w.length;R++){var S=w[R];if(m.hasOwnProperty.call(o.spec,S)){var j=e(o.spec[S],g,b);O.push(a(S)+": "+j)}}return"{"+O.join(", ")+"}"}if(f(o)){g=v.concat([o]);for(var E=[],A=0,P=o.types;A<P.length;A++){var M=e(P[A],g,b);E.push(M)}return E.join("|")}return n(o)}(e,[],{current:0,map:{}})}function b(e){return{type:"map",value:e}}function _(r){for(;"nullable"===r.type;)r=r.subtype;return t(r)?e.Null:h(r)?e.Any:{type:"nullable",subtype:r}}function T(e){return{type:"array",contained:e}}function m(e){return{type:"object",spec:e||null}}function g(t){for(var r=[],n=0,u=t;n<u.length;n++){var o=u[n];if(h(o))return e.Any;f(o)?o.types.forEach(function(e){return r.push(e)}):r.push(o)}return r.length>0&&function(e){return e.every(function(e){return l(e)})}(r)?_(g(r.map(function(e){return e.subtype}))):{type:"union",types:r}}function x(e,n){return function e(n,a,b){for(var _=0;_<b.length;_++){var T=b[_];if(n===T.a&&a===T.b)return!0}if(t(n)&&t(a))return!0;if(r(n)&&r(a))return n.value===a.value;if(h(n)&&h(a))return!0;if(i(n)&&i(a))return!0;if(c(n)&&c(a))return!0;if(d(n)&&d(a))return n.name===a.name;if(l(n)&&l(a))return e(n.subtype,a.subtype,b.concat([{a:n,b:a}]));if(y(n)&&y(a))return e(n.value,a.value,b.concat([{a:n,b:a}]));if(s(n)&&s(a))return e(n.contained,a.contained,b.concat([{a:n,b:a}]));if(p(n)&&p(a)){var m=n.spec,g=a.spec;if(null==m&&null==g)return!0;if(null!=m&&null!=g){var x=o.create(u(m)),O=o.create(u(g)),R=x.intersection(O);if(R.size()!==x.size())return!1;var w=b.concat([{a:n,b:a}]);return R.all(function(t){return e(m[t],g[t],w)})}}else if(f(n)&&f(a)){var S=n.types,j=a.types;if(S.sort(function(e,t){return v(e).localeCompare(v(t))}),j.sort(function(e,t){return v(e).localeCompare(v(t))}),S.length!==j.length)return!1;var E=b.concat([{a:n,b:a}]);for(_=0;_<S.length;_++)if(!e(S[_],j[_],E))return!1;return!0}return!1}(e,n,[])}e.isNull=t,e.isString=r,e.isNumber=i,e.isBoolean=c,e.isArray=s,e.isObject=p,e.isUnion=f,e.isNullable=l,e.isMap=y,e.isNamed=d,e.isAny=h,e.toString=v,e.Any={type:"any"},e.Null={type:"null"},e.Number={type:"number"},e.String={type:"string",value:null},e.StringValue=function(e){return{type:"string",value:e}},e.Boolean={type:"boolean"},e.Map=b,e.Nullable=_,e.Array=T,e.Object=m,e.Named=function(e){return{type:"named",name:e}},e.Union=g,e.equals=x,e.combine=function n(a,v){if(l(a)){if(l(v)){var T=n(a.subtype,v.subtype);if(null!=T)return _(T)}}else if(t(a)){if(t(v))return e.Null}else if(i(a)){if(i(v))return e.Number}else if(r(a)){if(r(v))return e.String}else if(c(a)){if(c(v))return e.Boolean}else if(f(a)){if(x(a,v))return a}else if(s(a)){if(s(v))return a}else{if(h(a)&&h(v))return a;if(d(a)&&d(v))return a.name===v.name?a:null;if(y(a)&&y(v)){var g=n(a.value,v.value);if(null!=g)return b(g)}else if(p(a)&&p(v)){var O=a.spec,R=v.spec;if(null==O&&null==R)return a;if(null==O||null==R)return null;var w=o.create(u(O)),S=o.create(u(R)),j={};return w.union(S).all(function(e){var t=O[e],r=R[e];if(null!=t&&null!=r){var u=n(t,r);if(null==u)return!1;j[e]=u}else j[e]=null!=t?t:r;return!0})?m(j):null}}return null},e.unify=function e(r,u){return(t(r)||l(r))&&(t(u)||l(u))?l(r)&&l(u)?_(e(r.subtype,u.subtype)):l(r)?r:l(u)?u:t(r)?u:t(u)?r:(n(r),n(u)):t(r)||l(r)?t(r)?_(u):l(r)?_(e(r.subtype,u)):n(r):t(u)||l(u)?t(u)?_(r):l(u)?_(e(r,u.subtype)):n(u):g([r,u])},e.infer=function t(r){if("number"==typeof r)return e.Number;if("string"==typeof r)return e.String;if("boolean"==typeof r)return e.Boolean;if(null==r)return e.Null;if(r&&"number"==typeof r.length){for(var n=[],u=0;u<r.length;u++){for(var o=t(r[u]),i=!1,a=0;a<n.length;a++)if(x(n[a],o)){i=!0;break}i||n.push(o)}return 1===n.length?T(n[0]):T(g(n))}return"object"==typeof r?m():e.Any}}(t.Types||(t.Types={}))},function(e,t,r){"use strict";var n,u=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var o=r(3),i=r(2),a=r(0),c=function(){function e(){}return e.prototype.withDefault=function(e){return new s(this,e)},e.prototype.asOptional=function(){return new f(this)},e.prototype.or=function(e){return new p(this,e)},e}();t.AbstractReader=c;var s=function(e){function t(t,r){var n=e.call(this)||this;return n.reader=t,n.default=r,n.expectedType=t.expectedType,n}return u(t,e),t.prototype.read=function(e){var t=this;return i.Result.success(this.reader.read(e).map(function(e){return e},function(){return t.default}))},t}(c);t.DefaultReader=s;var p=function(e){function t(t,r){var n=e.call(this)||this;return n.readerA=t,n.readerB=r,n.expectedType=a.Types.Union([t.expectedType,r.expectedType]),n}return u(t,e),t.prototype.read=function(e){var t=this;return this.readerA.read(e).map(function(e){return i.Result.success(e)},function(r){return t.readerB.read(e).mapFailure(function(n){return o.InvalidTypeError.create(e,a.Types.toString(t.expectedType),function(e){var t=a.Types.infer(e);return null!=t?a.Types.toString(t):"Unknown"}(e),o.ErrorGroup.create(e,[r,n]))})})},t}(c);t.OrReader=p;var f=function(e){function t(t){var r=e.call(this,t,null)||this;return r.expectedType=a.Types.Nullable(t.expectedType),r}return u(t,e),t}(s);t.OptionalReader=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(13),u=r(12),o=r(11);!function(e){e.success=function(e){return new n.ResultSuccessImpl(e)},e.failure=function(e){return new u.ResultFailureImpl(e)},e.all=function(t){for(var r=[],n=[],u=0;u<t.length;u++){var i=t[u];if(i.isSuccess())r.push(i);else{if(!i.isFailure())return o.unreachable("A result must either be a success or a failure.");n.push(i)}}return n.length>0?e.failure(n.map(function(e){return e.error})):e.success(r.map(function(e){return e.value}))}}(t.Result||(t.Result={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.create=function(e,t){return{type:"array-error",index:e,error:t}}}(t.ArrayChildError||(t.ArrayChildError={})),function(e){e.create=function(e,t){return{type:"error-group",value:e,errors:t}}}(t.ErrorGroup||(t.ErrorGroup={})),function(e){e.create=function(e,t){return{type:"inconsistent-types",value:e,found:t}}}(t.InconsistentTypesError||(t.InconsistentTypesError={})),function(e){e.create=function(e,t,r,n){return{type:"invalid-type",expected:t,actual:r,value:e,error:n||null}}}(t.InvalidTypeError||(t.InvalidTypeError={}))},function(e,t,r){"use strict";var n,u=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=o(r(3)),a=r(1),c=r(0),s=function(e){function t(t,r){var n=e.call(this)||this;n.property=t,n.reader=r;var u={};return u[t]=r.expectedType,console.log("Extract",t,"of type",r.expectedType),n.expectedType=c.Types.Object(u),console.log("Computed expected type is",n.expectedType),n}return u(t,e),t.prototype.read=function(e){var t=this;return e&&Object.hasOwnProperty.call(e,this.property)?this.reader.read(e[this.property]):this.reader.read(null).mapFailure(function(){var r=c.Types.infer(e),n=r&&c.Types.toString(r)||"Unknown";return i.InvalidTypeError.create(e,c.Types.toString(t.expectedType),n)})},t}(a.AbstractReader);t.ExtractReader=s},function(e,t,r){"use strict";var n,u=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var o=r(1),i=r(0),a=r(2),c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=i.Types.Any,t}return u(t,e),t.prototype.read=function(e){return a.Result.success(e)},t}(o.AbstractReader);t.AnyReader=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(3),u=r(2),o=r(0),i=function(){function e(e){this.valueReader=e,this.expectedType=o.Types.Map(e.expectedType)}return e.prototype.read=function(e){if("object"==typeof e){var t={};for(var r in e)if(Object.hasOwnProperty.call(e,r)){var i=e[r],a=this.valueReader.read(i);if(!a.isSuccess()){var c="{"+o.quote(r)+": Unknown}",s={},p=o.Types.infer(i);return null!=p&&(s[r]=p,c=o.Types.toString(o.Types.Object(s))),u.Result.failure(n.InvalidTypeError.create(e,o.Types.toString(this.expectedType),c,a.isFailure()?a.error:void 0))}t[r]=a.value}return u.Result.success(t)}var f=o.Types.infer(e);return u.Result.failure(n.InvalidTypeError.create(e,o.Types.toString(this.expectedType),f&&o.Types.toString(f)||"Unknown"))},e}();t.MapReader=i},function(e,t,r){"use strict";var n,u=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=o(r(3)),a=r(2),c=r(1),s=r(4),p=r(0),f=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=p.Types.Object({}),t}return u(t,e),t.prototype.isEmpty=function(){return!0},t.prototype.put=function(e,t){return new l(e,t,this)},t.prototype.prop=function(e,t){return new l(e,new s.ExtractReader(e,t),this)},t.prototype.read=function(){return a.Result.success({})},t}(c.AbstractReader);t.EmptyObjectConstructor=f;var l=function(){function e(e,t,r){console.log("Combining",t.expectedType,"and",r.expectedType);var n=p.Types.combine(r.expectedType,t.expectedType);if(console.log("Combined:",n),null==n)throw Error("Unable to combine types: "+r.expectedType.toString()+" and "+t.expectedType.toString());this.expectedType=n,this.property=e,this.reader=t,this.base=r}return e.prototype.isEmpty=function(){return!1},e.prototype.put=function(t,r){return new e(t,r,this)},e.prototype.prop=function(t,r){return new e(t,new s.ExtractReader(t,r),this)},e.prototype.read=function(e){var t=this;return this.base.read(e).flatMap(function(r){return t.reader.read(e).mapSuccess(function(e){var n=r;return n[t.property]=e,n})},function(r){if("invalid-type"==r.type){var n=p.Types.infer(e),u=n&&p.Types.toString(n)||"Unknown";return a.Result.failure(i.InvalidTypeError.create(e,p.Types.toString(t.expectedType),u,r))}return a.Result.failure(r)})},e}();t.ObjectConstructor=l},function(e,t,r){"use strict";var n,u=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i,a=o(r(3)),c=r(2),s=r(1),p=r(0);!function(e){e.create=function(e){return{type:"enum-no-match",validValues:e}}}(i||(i={}));var f=function(){function e(){this.expectedType=p.Types.Union([]),this.expectedValues=[]}return e.prototype.isEmpty=function(){return!0},e.prototype.case=function(e){return new l(e,this)},e.prototype.read=function(e){if("string"!=typeof e){var t=p.Types.infer(e),r=t&&p.Types.toString(t)||"Unknown";return c.Result.failure(a.InvalidTypeError.create(e,p.Types.toString(p.Types.String),r))}return c.Result.failure(i.create([]))},e}(),l=function(){function e(e,t){this.value=e,this.baseReader=t,this.expectedValues=t.expectedValues.concat([e])}return e.prototype.isEmpty=function(){return!1},e.prototype.case=function(t){return new e(t,this)},e.prototype.read=function(e){var t=this;if("string"!=typeof e){var r=p.Types.infer(e),n=r&&p.Types.toString(r)||"Unknown";return c.Result.failure(a.InvalidTypeError.create(e,p.Types.toString(p.Types.String),n))}return e===this.value?c.Result.success(this.value):this.baseReader.read(e).mapFailure(function(e){return"enum-no-match"===e.type?i.create(e.validValues.concat([t.value])):e})},e}(),y=function(e){function t(t){var r=e.call(this)||this;return r.base=t,r.expectedType=p.Types.Union(t.expectedValues.map(function(e){return p.Types.StringValue(e)})),r}return u(t,e),t.create=function(){return new t(new f)},t.prototype.case=function(e){return new t(this.base.case(e))},t.prototype.read=function(e){var t=this;return this.base.read(e).mapFailure(function(r){if("enum-no-match"===r.type){var n=p.Types.infer(e),u=n&&p.Types.toString(n)||"Unknown";return a.InvalidTypeError.create(e,p.Types.toString(t.expectedType),u)}return r})},t}(s.AbstractReader);t.EnumReader=y},function(e,t,r){"use strict";var n,u=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var o=r(3),i=r(2),a=r(1),c=r(0),s=function(e){function t(t){var r=e.call(this)||this;return r.reader=t,r.expectedType=c.Types.Array(t.expectedType),r}return u(t,e),t.prototype.read=function(e){var t=this;if(e&&"number"==typeof e.length){var r=e.map(function(e,r){return t.reader.read(e).mapFailure(function(e){return{index:r,error:e}})});return i.Result.all(r),i.Result.all(r).mapFailure(function(t){return o.ErrorGroup.create(e,t.map(function(e){return o.ArrayChildError.create(e.index,e.error)}))})}var n=c.Types.infer(e),u=n&&c.Types.toString(n)||"Unknown";return i.Result.failure(o.InvalidTypeError.create(e,this.expectedType.toString(),u))},t}(a.AbstractReader);t.ArrayReader=s},function(e,t,r){"use strict";var n,u=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var o=r(3),i=r(2),a=r(1),c=r(0);!function(e){var t=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=c.Types.Boolean,t}return u(t,e),t.prototype.read=function(e){if("boolean"==typeof e)return i.Result.success(e);var t=c.Types.infer(e),r=t&&c.Types.toString(t)||"Unknown";return i.Result.failure(o.InvalidTypeError.create(e,c.Types.toString(this.expectedType),r))},t}(a.AbstractReader);e.BooleanReader=t;var r=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=c.Types.String,t}return u(t,e),t.prototype.read=function(e){if("string"==typeof e)return i.Result.success(e);var t=c.Types.infer(e),r=t&&c.Types.toString(t)||"Unknown";return i.Result.failure(o.InvalidTypeError.create(e,c.Types.toString(this.expectedType),r))},t}(a.AbstractReader);e.StringReader=r;var n=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=c.Types.Number,t}return u(t,e),t.prototype.read=function(e){if("number"==typeof e)return i.Result.success(e);var t=c.Types.infer(e),r=t&&c.Types.toString(t)||"Unknown";return i.Result.failure(o.InvalidTypeError.create(e,c.Types.toString(this.expectedType),r))},t}(a.AbstractReader);e.NumberReader=n}(t.PrimitiveReaders||(t.PrimitiveReaders={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unreachable=function(e){throw Error("FATAL ERROR (UNREACHABLE)"+(e&&": "+e||""))}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.type="failure",this.error=e}return e.prototype.isSuccess=function(){return!1},e.prototype.isFailure=function(){return!0},e.prototype.assertSuccess=function(){throw Error("Result is not a Success result.")},e.prototype.assertFailure=function(){return this.error},e.prototype.map=function(e,t){return t(this.error)},e.prototype.flatMap=function(e,t){return t(this.error)},e.prototype.mapSuccess=function(t){return new e(this.error)},e.prototype.mapFailure=function(t){return new e(t(this.error))},e}();t.ResultFailureImpl=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.type="success",this.value=e}return e.prototype.isSuccess=function(){return!0},e.prototype.isFailure=function(){return!1},e.prototype.assertSuccess=function(){return this.value},e.prototype.assertFailure=function(){throw Error("Result is not a Failure result.")},e.prototype.map=function(e,t){return e(this.value)},e.prototype.flatMap=function(e,t){return e(this.value)},e.prototype.mapSuccess=function(t){return new e(t(this.value))},e.prototype.mapFailure=function(t){return new e(this.value)},e}();t.ResultSuccessImpl=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),u=r(10),o=r(9),i=r(4),a=r(8),c=r(7),s=r(6),p=r(5),f=r(1);t.AbstractReader=f.AbstractReader;var l=r(0);t.Types=l.Types,function(e){e.number=new u.PrimitiveReaders.NumberReader,e.string=new u.PrimitiveReaders.StringReader,e.boolean=new u.PrimitiveReaders.BooleanReader,e.anything=new p.AnyReader,e.optional=function(e){return new n.OptionalReader(e)},e.array=function(e){return new o.ArrayReader(e)},e.extract=function(e,t){return new i.ExtractReader(e,t)},e.enumeration=function(){return a.EnumReader.create()},e.map=function(e){return new s.MapReader(e)},e.obj=function(){return new c.EmptyObjectConstructor}}(t.TsJson||(t.TsJson={}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,