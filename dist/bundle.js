!function(e){var t={};function r(n){if(t[n])return t[n].exports;var u=t[n]={i:n,l:!1,exports:{}};return e[n].call(u.exports,u,u.exports,r),u.l=!0,u.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=13)}([function(e,t,r){"use strict";function n(e){return e}function u(e){return Object.keys(e)}var o;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.create=function(e){var t=new i;return e.forEach(function(e){return t.add(e)}),t}}(o||(o={}));var i=function(){function e(){this.items=[],this.index={}}return e.create=function(t){var r=new e;return t.forEach(function(e){return r.add(e)}),r},e.prototype.size=function(){return this.items.length},e.prototype.toArray=function(){return this.items.concat([])},e.prototype.copy=function(){return o.create(this.items)},e.prototype.forEach=function(e){for(var t=0;t<this.items.length;t++){if(!e(this.items[t]))return}},e.prototype.equals=function(e){return e.size()==this.size()&&this.items.every(function(t){return e.contains(t)})},e.prototype.all=function(e){for(var t=this.items,r=t.length,n=0;n<r;n++){if(!e(t[n]))return!1}return!0},e.prototype.map=function(t){var r=new e;return this.items.forEach(function(e){return r.add(t(e))}),r},e.prototype.contains=function(e){var t=e.toString();return this.containsHash(t)},e.prototype.add=function(e){var t=e.toString();return!this.containsHash(t)&&(this.index[t]={index:this.items.length,value:e},this.items.push(e),!0)},e.prototype.remove=function(e){var t=e.toString(),r=this.index[t];if(null==r)return!1;delete this.index[t];for(var n=r.index+1;n<this.items.length;n++)this.index[this.items[n].toString()].index--;return this.items.splice(r.index,1),!0},e.prototype.union=function(t){var r=new e;return this.forEach(function(e){return r.add(e)}),t.forEach(function(e){return r.add(e)}),r},e.prototype.intersection=function(t){var r=new e;return this.forEach(function(e){return t.contains(e)&&r.add(e),!0}),r},e.prototype.subtract=function(t){var r=new e;return this.forEach(function(e){return t.contains(e)||r.add(e),!0}),r},e.prototype.isSubsetOf=function(e){for(var t=0;t<this.items.length;t++){var r=this.items[t];if(!e.contains(r))return!1}return!0},e.prototype.isDisjoint=function(e){for(var t=0;t<this.items.length;t++){var r=this.items[t];if(e.contains(r))return!1}return!0},e.prototype.containsHash=function(e){return Object.hasOwnProperty.call(this.index,e)},e}();function a(e){return e.indexOf("'")<0?"'"+e+"'":'"'+e.replace('"','\\"')+'"'}t.quote=a,function(e){function t(e){return"null"===e.type}function r(e){return"string"===e.type}function i(e){return"number"===e.type}function c(e){return"boolean"===e.type}function s(e){return"array"===e.type}function p(e){return"object"===e.type}function f(e){return"union"===e.type}function l(e){return"nullable"===e.type}function y(e){return"map"===e.type}function d(e){return function e(o,d,h){for(var v=0;v<d.length;v++)if(d[v]===o){var b=h.map[v];return null==b&&(b=h.map[v]=h.current,h.current++),"{$"+b+"}"}if(t(o))return"Null";if(r(o))return null==o.value?"String":"String<"+a(o.value)+">";if(i(o))return"Number";if(c(o))return"Boolean";if(y(o))return"Map<"+e(o.value,d.concat([o]),h)+">";if(l(o))return"Nullable<"+e(o.subtype,d.concat([o]),h)+">";if(s(o))return"Array<"+e(o.contained,d.concat([o]),h)+">";if(p(o)){if(null==o.spec)return"Object";var _=d.concat([o]),m=u(o.spec);m.sort();for(var g=[],x=0,O=m;x<O.length;x++){var w=O[x];if(T.hasOwnProperty.call(o.spec,w)){var R=e(o.spec[w],_,h);g.push(a(w)+": "+R)}}return"{"+g.join(", ")+"}"}if(f(o)){_=d.concat([o]);for(var S=[],j=0,E=o.types;j<E.length;j++){var P=e(E[j],_,h);S.push(P)}return S.join("|")}return n(o)}(e,[],{current:0,map:{}})}function h(e){return{type:"map",value:e}}function v(r){for(;"nullable"===r.type;)r=r.subtype;return t(r)?e.Null:{type:"nullable",subtype:r}}function b(e){return{type:"array",contained:e}}function T(e){return{type:"object",spec:e||null}}function _(e){var t=[];return e.forEach(function(e){f(e)?e.types.forEach(function(e){return t.push(e)}):t.push(e)}),function(e){return e.every(function(e){return l(e)})}(t)?v(_(t.map(function(e){return e.subtype}))):{type:"union",types:t}}function m(e,n){return function e(n,a,h){for(var v=0;v<h.length;v++){var b=h[v];if(n===b.a&&a===b.b)return!0}if(t(n)&&t(a))return!0;if(r(n)&&r(a))return n.value===a.value;if(i(n)&&i(a))return!0;if(c(n)&&c(a))return!0;if(l(n)&&l(a))return e(n.subtype,a.subtype,h.concat([{a:n,b:a}]));if(y(n)&&y(a))return e(n.value,a.value,h.concat([{a:n,b:a}]));if(s(n)&&s(a))return e(n.contained,a.contained,h.concat([{a:n,b:a}]));if(p(n)&&p(a)){var T=n.spec,_=a.spec;if(null==T&&null==_)return!0;if(null!=T&&null!=_){var m=o.create(u(T)),g=o.create(u(_)),x=m.intersection(g);if(x.size()!==m.size())return!1;var O=h.concat([{a:n,b:a}]);return x.all(function(t){return e(T[t],_[t],O)})}}else if(f(n)&&f(a)){var w=n.types,R=a.types;if(w.sort(function(e,t){return d(e).localeCompare(d(t))}),R.sort(function(e,t){return d(e).localeCompare(d(t))}),w.length!==R.length)return!1;var S=h.concat([{a:n,b:a}]);for(v=0;v<w.length;v++)if(!e(w[v],R[v],S))return!1;return!0}return!1}(e,n,[])}e.isNull=t,e.isString=r,e.isNumber=i,e.isBoolean=c,e.isArray=s,e.isObject=p,e.isUnion=f,e.isNullable=l,e.isMap=y,e.toString=d,e.Null={type:"null"},e.Number={type:"number"},e.String={type:"string",value:null},e.StringValue=function(e){return{type:"string",value:e}},e.Boolean={type:"boolean"},e.Map=h,e.Nullable=v,e.Array=b,e.Object=T,e.Union=_,e.equals=m,e.combine=function n(a,d){if(l(a)){if(l(d)){var b=n(a.subtype,d.subtype);if(null!=b)return v(b)}}else if(t(a)){if(t(d))return e.Null}else if(i(a)){if(i(d))return e.Number}else if(r(a)){if(r(d))return e.String}else if(c(a)){if(c(d))return e.Boolean}else if(f(a)){if(m(a,d))return a}else if(s(a)){if(s(d))return a}else if(y(a)&&y(d)){var _=n(a.value,d.value);if(null!=_)return h(_)}else if(p(a)&&p(d)){var g=a.spec,x=d.spec;if(null==g&&null==x)return a;if(null==g||null==x)return null;var O=o.create(u(g)),w=o.create(u(x)),R={};return O.union(w).all(function(e){var t=g[e],r=x[e];if(null!=t&&null!=r){var u=n(t,r);if(null==u)return!1;R[e]=u}else R[e]=null!=t?t:r;return!0})?T(R):null}return null},e.unify=function e(r,u){return(t(r)||l(r))&&(t(u)||l(u))?l(r)&&l(u)?v(e(r.subtype,u.subtype)):l(r)?r:l(u)?u:t(r)?u:t(u)?r:(n(r),n(u)):t(r)||l(r)?t(r)?v(u):l(r)?v(e(r.subtype,u)):n(r):t(u)||l(u)?t(u)?v(r):l(u)?v(e(r,u.subtype)):n(u):_([r,u])},e.infer=function t(r){if("number"==typeof r)return e.Number;if("string"==typeof r)return e.String;if("boolean"==typeof r)return e.Boolean;if(null==r)return e.Null;if(r&&"number"==typeof r.length){for(var n=[],u=0;u<r.length;u++){var o=t(r[u]);if(null==o)return null;for(var i=!1,a=0;a<n.length;a++)if(m(n[a],o)){i=!0;break}i||n.push(o)}return 1===n.length?b(n[0]):b(_(n))}return"object"==typeof r?T():null}}(t.Types||(t.Types={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.create=function(e,t){return{type:"array-error",index:e,error:t}}}(t.ArrayChildError||(t.ArrayChildError={})),function(e){e.create=function(e,t){return{type:"error-group",value:e,errors:t}}}(t.ErrorGroup||(t.ErrorGroup={})),function(e){e.create=function(e,t){return{type:"inconsistent-types",value:e,found:t}}}(t.InconsistentTypesError||(t.InconsistentTypesError={})),function(e){e.create=function(e,t,r,n){return{type:"invalid-type",expected:t,actual:r,value:e,error:n||null}}}(t.InvalidTypeError||(t.InvalidTypeError={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(12),u=r(11),o=r(10);!function(e){e.success=function(e){return new n.ResultSuccessImpl(e)},e.failure=function(e){return new u.ResultFailureImpl(e)},e.all=function(t){for(var r=[],n=[],u=0;u<t.length;u++){var i=t[u];if(i.isSuccess())r.push(i);else{if(!i.isFailure())return o.unreachable("A result must either be a success or a failure.");n.push(i)}}return n.length>0?e.failure(n.map(function(e){return e.error})):e.success(r.map(function(e){return e.value}))}}(t.Result||(t.Result={}))},function(e,t,r){"use strict";var n,u=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var o=r(1),i=r(2),a=r(0),c=function(){function e(){}return e.prototype.withDefault=function(e){return new s(this,e)},e.prototype.asOptional=function(){return new f(this)},e.prototype.or=function(e){return new p(this,e)},e}();t.AbstractReader=c;var s=function(e){function t(t,r){var n=e.call(this)||this;return n.reader=t,n.default=r,n.expectedType=t.expectedType,n}return u(t,e),t.prototype.read=function(e){var t=this;return i.Result.success(this.reader.read(e).map(function(e){return e},function(){return t.default}))},t}(c);t.DefaultReader=s;var p=function(e){function t(t,r){var n=e.call(this)||this;return n.readerA=t,n.readerB=r,n.expectedType=a.Types.Union([t.expectedType,r.expectedType]),n}return u(t,e),t.prototype.read=function(e){var t=this;return this.readerA.read(e).map(function(e){return i.Result.success(e)},function(r){return t.readerB.read(e).mapFailure(function(n){return o.InvalidTypeError.create(e,a.Types.toString(t.expectedType),function(e){var t=a.Types.infer(e);return null!=t?a.Types.toString(t):"Unknown"}(e),o.ErrorGroup.create(e,[r,n]))})})},t}(c);t.OrReader=p;var f=function(e){function t(t){var r=e.call(this,t,null)||this;return r.expectedType=a.Types.Nullable(t.expectedType),r}return u(t,e),t}(s);t.OptionalReader=f},function(e,t,r){"use strict";var n,u=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=o(r(1)),a=r(3),c=r(0),s=function(e){function t(t,r){var n=e.call(this)||this;n.property=t,n.reader=r;var u={};return u[t]=r.expectedType,console.log("Extract",t,"of type",r.expectedType),n.expectedType=c.Types.Object(u),console.log("Computed expected type is",n.expectedType),n}return u(t,e),t.prototype.read=function(e){var t=this;return e&&Object.hasOwnProperty.call(e,this.property)?this.reader.read(e[this.property]):this.reader.read(null).mapFailure(function(){var r=c.Types.infer(e),n=r&&c.Types.toString(r)||"Unknown";return i.InvalidTypeError.create(e,c.Types.toString(t.expectedType),n)})},t}(a.AbstractReader);t.ExtractReader=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),u=r(2),o=r(0),i=function(){function e(e){this.valueReader=e,this.expectedType=o.Types.Map(e.expectedType)}return e.prototype.read=function(e){if("object"==typeof e){var t={};for(var r in e)if(Object.hasOwnProperty.call(e,r)){var i=e[r],a=this.valueReader.read(i);if(!a.isSuccess()){var c="{"+o.quote(r)+": Unknown}",s={},p=o.Types.infer(i);return null!=p&&(s[r]=p,c=o.Types.toString(o.Types.Object(s))),u.Result.failure(n.InvalidTypeError.create(e,o.Types.toString(this.expectedType),c,a.isFailure()?a.error:void 0))}t[r]=a.value}return u.Result.success(t)}var f=o.Types.infer(e);return u.Result.failure(n.InvalidTypeError.create(e,o.Types.toString(this.expectedType),f&&o.Types.toString(f)||"Unknown"))},e}();t.MapReader=i},function(e,t,r){"use strict";var n,u=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=o(r(1)),a=r(2),c=r(3),s=r(4),p=r(0),f=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=p.Types.Object({}),t}return u(t,e),t.prototype.isEmpty=function(){return!0},t.prototype.put=function(e,t){return new l(e,t,this)},t.prototype.prop=function(e,t){return new l(e,new s.ExtractReader(e,t),this)},t.prototype.read=function(){return a.Result.success({})},t}(c.AbstractReader);t.EmptyObjectConstructor=f;var l=function(){function e(e,t,r){console.log("Combining",t.expectedType,"and",r.expectedType);var n=p.Types.combine(r.expectedType,t.expectedType);if(console.log("Combined:",n),null==n)throw Error("Unable to combine types: "+r.expectedType.toString()+" and "+t.expectedType.toString());this.expectedType=n,this.property=e,this.reader=t,this.base=r}return e.prototype.isEmpty=function(){return!1},e.prototype.put=function(t,r){return new e(t,r,this)},e.prototype.prop=function(t,r){return new e(t,new s.ExtractReader(t,r),this)},e.prototype.read=function(e){var t=this;return this.base.read(e).flatMap(function(r){return t.reader.read(e).mapSuccess(function(e){var n=r;return n[t.property]=e,n})},function(r){if("invalid-type"==r.type){var n=p.Types.infer(e),u=n&&p.Types.toString(n)||"Unknown";return a.Result.failure(i.InvalidTypeError.create(e,p.Types.toString(t.expectedType),u,r))}return a.Result.failure(r)})},e}();t.ObjectConstructor=l},function(e,t,r){"use strict";var n,u=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i,a=o(r(1)),c=r(2),s=r(3),p=r(0);!function(e){e.create=function(e){return{type:"enum-no-match",validValues:e}}}(i||(i={}));var f=function(){function e(){this.expectedType=p.Types.Union([]),this.expectedValues=[]}return e.prototype.isEmpty=function(){return!0},e.prototype.case=function(e){return new l(e,this)},e.prototype.read=function(e){if("string"!=typeof e){var t=p.Types.infer(e),r=t&&p.Types.toString(t)||"Unknown";return c.Result.failure(a.InvalidTypeError.create(e,p.Types.toString(p.Types.String),r))}return c.Result.failure(i.create([]))},e}(),l=function(){function e(e,t){this.value=e,this.baseReader=t,this.expectedValues=t.expectedValues.concat([e])}return e.prototype.isEmpty=function(){return!1},e.prototype.case=function(t){return new e(t,this)},e.prototype.read=function(e){var t=this;if("string"!=typeof e){var r=p.Types.infer(e),n=r&&p.Types.toString(r)||"Unknown";return c.Result.failure(a.InvalidTypeError.create(e,p.Types.toString(p.Types.String),n))}return e===this.value?c.Result.success(this.value):this.baseReader.read(e).mapFailure(function(e){return"enum-no-match"===e.type?i.create(e.validValues.concat([t.value])):e})},e}(),y=function(e){function t(t){var r=e.call(this)||this;return r.base=t,r.expectedType=p.Types.Union(t.expectedValues.map(function(e){return p.Types.StringValue(e)})),r}return u(t,e),t.create=function(){return new t(new f)},t.prototype.case=function(e){return new t(this.base.case(e))},t.prototype.read=function(e){var t=this;return this.base.read(e).mapFailure(function(r){if("enum-no-match"===r.type){var n=p.Types.infer(e),u=n&&p.Types.toString(n)||"Unknown";return a.InvalidTypeError.create(e,p.Types.toString(t.expectedType),u)}return r})},t}(s.AbstractReader);t.EnumReader=y},function(e,t,r){"use strict";var n,u=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var o=r(1),i=r(2),a=r(3),c=r(0),s=function(e){function t(t){var r=e.call(this)||this;return r.reader=t,r.expectedType=c.Types.Array(t.expectedType),r}return u(t,e),t.prototype.read=function(e){var t=this;if(e&&"number"==typeof e.length){var r=e.map(function(e,r){return t.reader.read(e).mapFailure(function(e){return{index:r,error:e}})});return i.Result.all(r),i.Result.all(r).mapFailure(function(t){return o.ErrorGroup.create(e,t.map(function(e){return o.ArrayChildError.create(e.index,e.error)}))})}var n=c.Types.infer(e),u=n&&c.Types.toString(n)||"Unknown";return i.Result.failure(o.InvalidTypeError.create(e,this.expectedType.toString(),u))},t}(a.AbstractReader);t.ArrayReader=s},function(e,t,r){"use strict";var n,u=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var o=r(1),i=r(2),a=r(3),c=r(0);!function(e){var t=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=c.Types.Boolean,t}return u(t,e),t.prototype.read=function(e){if("boolean"==typeof e)return i.Result.success(e);var t=c.Types.infer(e),r=t&&c.Types.toString(t)||"Unknown";return i.Result.failure(o.InvalidTypeError.create(e,c.Types.toString(this.expectedType),r))},t}(a.AbstractReader);e.BooleanReader=t;var r=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=c.Types.String,t}return u(t,e),t.prototype.read=function(e){if("string"==typeof e)return i.Result.success(e);var t=c.Types.infer(e),r=t&&c.Types.toString(t)||"Unknown";return i.Result.failure(o.InvalidTypeError.create(e,c.Types.toString(this.expectedType),r))},t}(a.AbstractReader);e.StringReader=r;var n=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=c.Types.Number,t}return u(t,e),t.prototype.read=function(e){if("number"==typeof e)return i.Result.success(e);var t=c.Types.infer(e),r=t&&c.Types.toString(t)||"Unknown";return i.Result.failure(o.InvalidTypeError.create(e,c.Types.toString(this.expectedType),r))},t}(a.AbstractReader);e.NumberReader=n}(t.PrimitiveReaders||(t.PrimitiveReaders={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unreachable=function(e){throw Error("FATAL ERROR (UNREACHABLE)"+(e&&": "+e||""))}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.type="failure",this.error=e}return e.prototype.isSuccess=function(){return!1},e.prototype.isFailure=function(){return!0},e.prototype.map=function(e,t){return t(this.error)},e.prototype.flatMap=function(e,t){return t(this.error)},e.prototype.mapSuccess=function(t){return new e(this.error)},e.prototype.mapFailure=function(t){return new e(t(this.error))},e}();t.ResultFailureImpl=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.type="success",this.value=e}return e.prototype.isSuccess=function(){return!0},e.prototype.isFailure=function(){return!1},e.prototype.map=function(e,t){return e(this.value)},e.prototype.flatMap=function(e,t){return e(this.value)},e.prototype.mapSuccess=function(t){return new e(t(this.value))},e.prototype.mapFailure=function(t){return new e(this.value)},e}();t.ResultSuccessImpl=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(3),u=r(9),o=r(8),i=r(4),a=r(7),c=r(6),s=r(5);!function(e){e.number=new u.PrimitiveReaders.NumberReader,e.string=new u.PrimitiveReaders.StringReader,e.boolean=new u.PrimitiveReaders.BooleanReader,e.optional=function(e){return new n.OptionalReader(e)},e.array=function(e){return new o.ArrayReader(e)},e.extract=function(e,t){return new i.ExtractReader(e,t)},e.enumeration=function(){return a.EnumReader.create()},e.map=function(e){return new s.MapReader(e)},e.obj=function(){return new c.EmptyObjectConstructor}}(t.TsJson||(t.TsJson={}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vZGlzdC9zcmMvanN0eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L3NyYy9lcnJvcnMvZGVjb2RpbmcvZGVjb2RpbmctZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vZGlzdC9zcmMvcmVzdWx0L3Jlc3VsdC5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L3NyYy9yZWFkZXJzL2Fic3RyYWN0LXJlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L3NyYy9yZWFkZXJzL2V4dHJhY3QtcmVhZGVyLmpzIiwid2VicGFjazovLy8uL2Rpc3Qvc3JjL3JlYWRlcnMvbWFwLXJlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L3NyYy9yZWFkZXJzL29iamVjdC1yZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vZGlzdC9zcmMvcmVhZGVycy9lbnVtLXJlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L3NyYy9yZWFkZXJzL2FycmF5LXJlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L3NyYy9yZWFkZXJzL3ByaW1pdGl2ZS1yZWFkZXJzLmpzIiwid2VicGFjazovLy8uL2Rpc3Qvc3JjL3VucmVhY2hhYmxlLmpzIiwid2VicGFjazovLy8uL2Rpc3Qvc3JjL3Jlc3VsdC9mYWlsdXJlLmpzIiwid2VicGFjazovLy8uL2Rpc3Qvc3JjL3Jlc3VsdC9zdWNjZXNzLmpzIiwid2VicGFjazovLy8uL2Rpc3Qvc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJ1bnJlYWNoYWJsZSIsImEiLCJPYmplY3RLZXlzIiwib2JqIiwia2V5cyIsIlNldHMiLCJjcmVhdGUiLCJhcnJheSIsInNldCIsIlNldEltcGwiLCJmb3JFYWNoIiwidiIsImFkZCIsInRoaXMiLCJpdGVtcyIsImluZGV4Iiwic2l6ZSIsImxlbmd0aCIsInRvQXJyYXkiLCJjb25jYXQiLCJjb3B5IiwiZiIsImVxdWFscyIsIm90aGVyIiwiZXZlcnkiLCJpdGVtIiwiY29udGFpbnMiLCJhbGwiLCJtYXAiLCJvdXRwdXQiLCJoYXNoIiwidG9TdHJpbmciLCJjb250YWluc0hhc2giLCJwdXNoIiwicmVtb3ZlIiwidmFsdWVIYXNoIiwiZXhpc3RpbmdJdGVtIiwic3BsaWNlIiwidW5pb24iLCJpbnRlcnNlY3Rpb24iLCJzdWJ0cmFjdCIsImlzU3Vic2V0T2YiLCJpc0Rpc2pvaW50IiwicXVvdGUiLCJpbmRleE9mIiwicmVwbGFjZSIsIlR5cGVzIiwiaXNOdWxsIiwidHlwZSIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc0Jvb2xlYW4iLCJpc0FycmF5IiwiaXNPYmplY3QiLCJpc1VuaW9uIiwiaXNOdWxsYWJsZSIsImlzTWFwIiwidG9TdHJpbmdJbnRlcm5hbCIsInZpc2l0ZWQiLCJpbmRpY2VzIiwicmVzb2x2ZWRSZWN1cnNpb25JbmRleCIsImN1cnJlbnQiLCJzdWJ0eXBlIiwiY29udGFpbmVkIiwic3BlYyIsIm5ld1Zpc2l0ZWQiLCJzb3J0Iiwia2V5UGFpcnMiLCJfaSIsImtleXNfMSIsImtleSIsInZhbHVlU3RyIiwiam9pbiIsInR5cGVTdHJpbmdzIiwiX2EiLCJfYiIsInR5cGVzIiwidHlwZVN0ciIsIk1hcCIsIk51bGxhYmxlIiwiTnVsbCIsIkFycmF5IiwiVW5pb24iLCJ1bnBhY2tlZFR5cGVzIiwidCIsImFsbE51bGxhYmxlIiwiYiIsImVxdWFsc0ludGVybmFsIiwidmVyaWZpZWQiLCJ2ZXJpZmllZFR5cGUiLCJhU3BlY18xIiwiYlNwZWNfMSIsImFLZXlzIiwiYktleXMiLCJuZXdWZXJpZmllZF8xIiwic29ydGVkQVR5cGVzIiwic29ydGVkQlR5cGVzIiwibG9jYWxlQ29tcGFyZSIsIm5ld1ZlcmlmaWVkIiwiTnVtYmVyIiwiU3RyaW5nIiwiU3RyaW5nVmFsdWUiLCJCb29sZWFuIiwiY29tYmluZSIsImNvbWJpbmVkU3VidHlwZSIsImNvbWJpbmVkVmFsdWUiLCJhU3BlY18yIiwiYlNwZWNfMiIsImFQcm9wZXJ0eUlTZXQiLCJiUHJvcGVydHlJU2V0IiwiY29tYmluZWRTcGVjXzEiLCJwcm9wIiwiYVByb3AiLCJiUHJvcCIsImNvbWJpbmVkIiwidW5pZnkiLCJpbmZlciIsImtub3duVHlwZXMiLCJpbmZlcnJlZCIsImZvdW5kIiwiaiIsIkFycmF5Q2hpbGRFcnJvciIsImVycm9yIiwiRXJyb3JHcm91cCIsImVycm9ycyIsIkluY29uc2lzdGVudFR5cGVzRXJyb3IiLCJJbnZhbGlkVHlwZUVycm9yIiwiZXhwZWN0ZWQiLCJhY3R1YWwiLCJmb3J3YXJkZWQiLCJzdWNjZXNzXzEiLCJmYWlsdXJlXzEiLCJ1bnJlYWNoYWJsZV8xIiwiUmVzdWx0Iiwic3VjY2VzcyIsIlJlc3VsdFN1Y2Nlc3NJbXBsIiwiZmFpbHVyZSIsIlJlc3VsdEZhaWx1cmVJbXBsIiwicmVzdWx0cyIsInN1Y2Nlc3NlcyIsImZhaWx1cmVzIiwicmVzdWx0IiwiaXNTdWNjZXNzIiwiaXNGYWlsdXJlIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX18iLCJjb25zdHJ1Y3RvciIsImRlY29kaW5nX2Vycm9yXzEiLCJyZXN1bHRfMSIsImpzdHlwZXNfMSIsIkFic3RyYWN0UmVhZGVyIiwid2l0aERlZmF1bHQiLCJEZWZhdWx0UmVhZGVyIiwiYXNPcHRpb25hbCIsIk9wdGlvbmFsUmVhZGVyIiwib3IiLCJPclJlYWRlciIsIl9zdXBlciIsInJlYWRlciIsImRlZmF1bHRWYWx1ZSIsIl90aGlzIiwiZGVmYXVsdCIsImV4cGVjdGVkVHlwZSIsInJlYWQiLCJyZWFkZXJBIiwicmVhZGVyQiIsIm1hcEZhaWx1cmUiLCJpbmZlck9yVW5rbm93biIsIl9faW1wb3J0U3RhciIsIm1vZCIsImsiLCJhYnN0cmFjdF9yZWFkZXJfMSIsIkV4dHJhY3RSZWFkZXIiLCJjb25zb2xlIiwibG9nIiwidHlwZVN0cmluZyIsIk1hcFJlYWRlciIsInZhbHVlUmVhZGVyIiwiZGVjb2RlZCIsImRlY29kZWRWYWx1ZSIsIm9ialNwZWMiLCJpbmZlcnJlZFR5cGVfMSIsInVuZGVmaW5lZCIsImluZmVycmVkVHlwZSIsImV4dHJhY3RfcmVhZGVyXzEiLCJFbXB0eU9iamVjdENvbnN0cnVjdG9yIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJpc0VtcHR5IiwicHV0IiwiT2JqZWN0Q29uc3RydWN0b3IiLCJiYXNlIiwiY29tYmluZWRUeXBlIiwiRXJyb3IiLCJmbGF0TWFwIiwiYmFzZVN1Y2Nlc3MiLCJtYXBTdWNjZXNzIiwic3VjY2Vzc09iaiIsIkVudW1Ob01hdGNoRXJyb3IiLCJ2YWx1ZXMiLCJ2YWxpZFZhbHVlcyIsIkVtcHR5RW51bVJlYWRlciIsImV4cGVjdGVkVmFsdWVzIiwiY2FzZSIsIkVudW1WYWx1ZVJlYWRlciIsImJhc2VSZWFkZXIiLCJFbnVtUmVhZGVyIiwiQXJyYXlSZWFkZXIiLCJlIiwiUHJpbWl0aXZlUmVhZGVycyIsIkJvb2xlYW5SZWFkZXIiLCJTdHJpbmdSZWFkZXIiLCJOdW1iZXJSZWFkZXIiLCJtZXNzYWdlIiwicHJpbWl0aXZlX3JlYWRlcnNfMSIsImFycmF5X3JlYWRlcl8xIiwiZW51bV9yZWFkZXJfMSIsIm9iamVjdF9yZWFkZXJfMSIsIm1hcF9yZWFkZXJfMSIsIlRzSnNvbiIsIm51bWJlciIsInN0cmluZyIsImJvb2xlYW4iLCJvcHRpb25hbCIsImV4dHJhY3QiLCJlbnVtZXJhdGlvbiJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQ0FLLGNBQUEsRUFDQUMsWUFBQSxFQUNBQyxJQUFBTixLQU1BWixFQUFBbUIsRUFBQSxTQUFBakIsR0FDQVksT0FBQUMsZUFBQWIsRUFBQSxjQUFpRGtCLE9BQUEsS0FJakRwQixFQUFBcUIsRUFBQSxTQUFBbEIsR0FDQSxJQUFBUyxFQUFBVCxLQUFBbUIsV0FDQSxXQUEyQixPQUFBbkIsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBSCxFQUFBVSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFaLEVBQUFhLEVBQUEsU0FBQVUsRUFBQUMsR0FBc0QsT0FBQVYsT0FBQVcsVUFBQUMsZUFBQW5CLEtBQUFnQixFQUFBQyxJQUd0RHhCLEVBQUEyQixFQUFBLEdBSUEzQixJQUFBNEIsRUFBQSxtQ0NqRUEsU0FBQUMsRUFBQUMsR0FDQSxPQUFBQSxFQUVBLFNBQUFDLEVBQUFDLEdBQ0EsT0FBQWxCLE9BQUFtQixLQUFBRCxHQUVBLElBQUFFLEVBUEFwQixPQUFBQyxlQUFBYixFQUFBLGNBQThDa0IsT0FBQSxJQVE5QyxTQUFBYyxHQU1BQSxFQUFBQyxPQUxBLFNBQUFDLEdBQ0EsSUFBQUMsRUFBQSxJQUFBQyxFQUVBLE9BREFGLEVBQUFHLFFBQUEsU0FBQUMsR0FBb0MsT0FBQUgsRUFBQUksSUFBQUQsS0FDcENILEdBSkEsQ0FPQ0gsV0FDRCxJQUFBSSxFQUFBLFdBQ0EsU0FBQUEsSUFDQUksS0FBQUMsU0FDQUQsS0FBQUUsU0FvSEEsT0FsSEFOLEVBQUFILE9BQUEsU0FBQUMsR0FDQSxJQUFBQyxFQUFBLElBQUFDLEVBRUEsT0FEQUYsRUFBQUcsUUFBQSxTQUFBQyxHQUFvQyxPQUFBSCxFQUFBSSxJQUFBRCxLQUNwQ0gsR0FFQUMsRUFBQWIsVUFBQW9CLEtBQUEsV0FDQSxPQUFBSCxLQUFBQyxNQUFBRyxRQUVBUixFQUFBYixVQUFBc0IsUUFBQSxXQUNBLE9BQUFMLEtBQUFDLE1BQUFLLFlBRUFWLEVBQUFiLFVBQUF3QixLQUFBLFdBQ0EsT0FBQWYsRUFBQUMsT0FBQU8sS0FBQUMsUUFFQUwsRUFBQWIsVUFBQWMsUUFBQSxTQUFBVyxHQUNBLFFBQUE5QyxFQUFBLEVBQXVCQSxFQUFBc0MsS0FBQUMsTUFBQUcsT0FBdUIxQyxJQUFBLENBRTlDLElBQUE4QyxFQURBUixLQUFBQyxNQUFBdkMsSUFFQSxTQUlBa0MsRUFBQWIsVUFBQTBCLE9BQUEsU0FBQUMsR0FDQSxPQUFBQSxFQUFBUCxRQUFBSCxLQUFBRyxRQUFBSCxLQUFBQyxNQUFBVSxNQUFBLFNBQUFDLEdBQWdGLE9BQUFGLEVBQUFHLFNBQUFELE1BRWhGaEIsRUFBQWIsVUFBQStCLElBQUEsU0FBQU4sR0FHQSxJQUZBLElBQUFQLEVBQUFELEtBQUFDLE1BQ0FHLEVBQUFILEVBQUFHLE9BQ0ExQyxFQUFBLEVBQXVCQSxFQUFBMEMsRUFBWTFDLElBQUEsQ0FFbkMsSUFBQThDLEVBREFQLEVBQUF2QyxJQUVBLFNBR0EsVUFFQWtDLEVBQUFiLFVBQUFnQyxJQUFBLFNBQUFQLEdBQ0EsSUFBQVEsRUFBQSxJQUFBcEIsRUFFQSxPQURBSSxLQUFBQyxNQUFBSixRQUFBLFNBQUFlLEdBQTRDLE9BQUFJLEVBQUFqQixJQUFBUyxFQUFBSSxNQUM1Q0ksR0FFQXBCLEVBQUFiLFVBQUE4QixTQUFBLFNBQUFuQyxHQUNBLElBQUF1QyxFQUFBdkMsRUFBQXdDLFdBQ0EsT0FBQWxCLEtBQUFtQixhQUFBRixJQUVBckIsRUFBQWIsVUFBQWdCLElBQUEsU0FBQXJCLEdBQ0EsSUFBQXVDLEVBQUF2QyxFQUFBd0MsV0FDQSxPQUFBbEIsS0FBQW1CLGFBQUFGLEtBQ0FqQixLQUFBRSxNQUFBZSxJQUFnQ2YsTUFBQUYsS0FBQUMsTUFBQUcsT0FBQTFCLFNBQ2hDc0IsS0FBQUMsTUFBQW1CLEtBQUExQyxJQUNBLElBSUFrQixFQUFBYixVQUFBc0MsT0FBQSxTQUFBM0MsR0FDQSxJQUFBNEMsRUFBQTVDLEVBQUF3QyxXQUNBSyxFQUFBdkIsS0FBQUUsTUFBQW9CLEdBQ0EsU0FBQUMsRUFDQSxnQkFFQXZCLEtBQUFFLE1BQUFvQixHQUNBLFFBQUE1RCxFQUFBNkQsRUFBQXJCLE1BQUEsRUFBNEN4QyxFQUFBc0MsS0FBQUMsTUFBQUcsT0FBdUIxQyxJQUNuRXNDLEtBQUFFLE1BQUFGLEtBQUFDLE1BQUF2QyxHQUFBd0QsWUFBQWhCLFFBR0EsT0FEQUYsS0FBQUMsTUFBQXVCLE9BQUFELEVBQUFyQixNQUFBLElBQ0EsR0FFQU4sRUFBQWIsVUFBQTBDLE1BQUEsU0FBQWYsR0FDQSxJQUFBTSxFQUFBLElBQUFwQixFQUdBLE9BRkFJLEtBQUFILFFBQUEsU0FBQWUsR0FBc0MsT0FBQUksRUFBQWpCLElBQUFhLEtBQ3RDRixFQUFBYixRQUFBLFNBQUFlLEdBQXVDLE9BQUFJLEVBQUFqQixJQUFBYSxLQUN2Q0ksR0FFQXBCLEVBQUFiLFVBQUEyQyxhQUFBLFNBQUFoQixHQUNBLElBQUFNLEVBQUEsSUFBQXBCLEVBT0EsT0FOQUksS0FBQUgsUUFBQSxTQUFBZSxHQUlBLE9BSEFGLEVBQUFHLFNBQUFELElBQ0FJLEVBQUFqQixJQUFBYSxJQUVBLElBRUFJLEdBRUFwQixFQUFBYixVQUFBNEMsU0FBQSxTQUFBakIsR0FDQSxJQUFBTSxFQUFBLElBQUFwQixFQU9BLE9BTkFJLEtBQUFILFFBQUEsU0FBQWUsR0FJQSxPQUhBRixFQUFBRyxTQUFBRCxJQUNBSSxFQUFBakIsSUFBQWEsSUFFQSxJQUVBSSxHQUVBcEIsRUFBQWIsVUFBQTZDLFdBQUEsU0FBQWxCLEdBQ0EsUUFBQWhELEVBQUEsRUFBdUJBLEVBQUFzQyxLQUFBQyxNQUFBRyxPQUF1QjFDLElBQUEsQ0FDOUMsSUFBQWtELEVBQUFaLEtBQUFDLE1BQUF2QyxHQUNBLElBQUFnRCxFQUFBRyxTQUFBRCxHQUNBLFNBR0EsVUFFQWhCLEVBQUFiLFVBQUE4QyxXQUFBLFNBQUFuQixHQUNBLFFBQUFoRCxFQUFBLEVBQXVCQSxFQUFBc0MsS0FBQUMsTUFBQUcsT0FBdUIxQyxJQUFBLENBQzlDLElBQUFrRCxFQUFBWixLQUFBQyxNQUFBdkMsR0FDQSxHQUFBZ0QsRUFBQUcsU0FBQUQsR0FDQSxTQUdBLFVBRUFoQixFQUFBYixVQUFBb0MsYUFBQSxTQUFBRixHQUNBLE9BQUE3QyxPQUFBWSxlQUFBbkIsS0FBQW1DLEtBQUFFLE1BQUFlLElBRUFyQixFQXZIQSxHQXlIQSxTQUFBa0MsRUFBQTVDLEdBQ0EsT0FBQUEsRUFBQTZDLFFBQUEsT0FDQSxJQUFBN0MsRUFBQSxJQUVBLElBQUFBLEVBQUE4QyxRQUFBLGVBRUF4RSxFQUFBc0UsUUFFQSxTQUFBRyxHQUNBLFNBQUFDLEVBQUE5QyxHQUNBLGVBQUFBLEVBQUErQyxLQUdBLFNBQUFDLEVBQUFoRCxHQUNBLGlCQUFBQSxFQUFBK0MsS0FHQSxTQUFBRSxFQUFBakQsR0FDQSxpQkFBQUEsRUFBQStDLEtBR0EsU0FBQUcsRUFBQWxELEdBQ0Esa0JBQUFBLEVBQUErQyxLQUdBLFNBQUFJLEVBQUFuRCxHQUNBLGdCQUFBQSxFQUFBK0MsS0FHQSxTQUFBSyxFQUFBcEQsR0FDQSxpQkFBQUEsRUFBQStDLEtBR0EsU0FBQU0sRUFBQXJELEdBQ0EsZ0JBQUFBLEVBQUErQyxLQUdBLFNBQUFPLEVBQUF0RCxHQUNBLG1CQUFBQSxFQUFBK0MsS0FHQSxTQUFBUSxFQUFBdkQsR0FDQSxjQUFBQSxFQUFBK0MsS0FxRUEsU0FBQWpCLEVBQUE5QixHQUNBLE9BbkVBLFNBQUF3RCxFQUFBeEQsRUFBQXlELEVBQUFDLEdBQ0EsUUFBQXBGLEVBQUEsRUFBdUJBLEVBQUFtRixFQUFBekMsT0FBb0IxQyxJQUMzQyxHQUFBbUYsRUFBQW5GLEtBQUEwQixFQUFBLENBQ0EsSUFBQTJELEVBQUFELEVBQUEvQixJQUFBckQsR0FLQSxPQUpBLE1BQUFxRixJQUNBQSxFQUFBRCxFQUFBL0IsSUFBQXJELEdBQUFvRixFQUFBRSxRQUNBRixFQUFBRSxXQUVBLEtBQXlCRCxFQUFBLElBR3pCLEdBQUFiLEVBQUE5QyxHQUNBLGFBRUEsR0FBQWdELEVBQUFoRCxHQUNBLGFBQUFBLEVBQUFWLE1BQ0EsU0FFQSxVQUFBb0QsRUFBQTFDLEVBQUFWLE9BQUEsSUFFQSxHQUFBMkQsRUFBQWpELEdBQ0EsZUFFQSxHQUFBa0QsRUFBQWxELEdBQ0EsZ0JBRUEsR0FBQXVELEVBQUF2RCxHQUNBLGFBQUF3RCxFQUFBeEQsRUFBQVYsTUFBQW1FLEVBQUF2QyxRQUFBbEIsSUFBQTBELEdBQUEsSUFFQSxHQUFBSixFQUFBdEQsR0FFQSxrQkFEQXdELEVBQUF4RCxFQUFBNkQsUUFBQUosRUFBQXZDLFFBQUFsQixJQUFBMEQsR0FDQSxJQUVBLEdBQUFQLEVBQUFuRCxHQUVBLGVBREF3RCxFQUFBeEQsRUFBQThELFVBQUFMLEVBQUF2QyxRQUFBbEIsSUFBQTBELEdBQ0EsSUFFQSxHQUFBTixFQUFBcEQsR0FBQSxDQUNBLFNBQUFBLEVBQUErRCxLQUNBLGVBRUEsSUFBQUMsRUFBQVAsRUFBQXZDLFFBQUFsQixJQUNBRyxFQUFBRixFQUFBRCxFQUFBK0QsTUFDQTVELEVBQUE4RCxPQUVBLElBREEsSUFBQUMsS0FDQUMsRUFBQSxFQUFBQyxFQUFBakUsRUFBMkNnRSxFQUFBQyxFQUFBcEQsT0FBb0JtRCxJQUFBLENBQy9ELElBQUFFLEVBQUFELEVBQUFELEdBQ0EsR0FBQW5GLEVBQUFZLGVBQUFuQixLQUFBdUIsRUFBQStELEtBQUFNLEdBQUEsQ0FDQSxJQUFBQyxFQUFBZCxFQUFBeEQsRUFBQStELEtBQUFNLEdBQUFMLEVBQUFOLEdBQ0FRLEVBQUFsQyxLQUFBVSxFQUFBMkIsR0FBQSxLQUFBQyxJQUdBLFVBQXFCSixFQUFBSyxLQUFBLFVBRXJCLEdBQUFsQixFQUFBckQsR0FBQSxDQUNBZ0UsRUFBQVAsRUFBQXZDLFFBQUFsQixJQUVBLElBRkEsSUFDQXdFLEtBQ0FDLEVBQUEsRUFBQUMsRUFBQTFFLEVBQUEyRSxNQUEwQ0YsRUFBQUMsRUFBQTFELE9BQWdCeUQsSUFBQSxDQUMxRCxJQUNBRyxFQUFBcEIsRUFEQWtCLEVBQUFELEdBQ0FULEVBQUFOLEdBQ0FjLEVBQUF4QyxLQUFBNEMsR0FFQSxPQUFBSixFQUFBRCxLQUFBLEtBRUEsT0FBQXhFLEVBQUFDLEdBR0F3RCxDQUFBeEQsTUFBd0M0RCxRQUFBLEVBQUFqQyxTQVd4QyxTQUFBa0QsRUFBQWYsR0FDQSxPQUFnQmYsS0FBQSxNQUFBekQsTUFBQXdFLEdBR2hCLFNBQUFnQixFQUFBakIsR0FDQSxrQkFBQUEsRUFBQWQsTUFDQWMsWUFFQSxPQUFBZixFQUFBZSxHQUNBaEIsRUFBQWtDLE1BRWdCaEMsS0FBQSxXQUFBYyxXQUdoQixTQUFBbUIsRUFBQWxCLEdBQ0EsT0FBZ0JmLEtBQUEsUUFBQWUsYUFHaEIsU0FBQTlFLEVBQUErRSxHQUNBLE9BQWdCaEIsS0FBQSxTQUFBZ0IsUUFBQSxNQU1oQixTQUFBa0IsRUFBQU4sR0FDQSxJQUFBTyxLQVNBLE9BUkFQLEVBQUFsRSxRQUFBLFNBQUFuQixHQUNBK0QsRUFBQS9ELEdBQ0FBLEVBQUFxRixNQUFBbEUsUUFBQSxTQUFBb0QsR0FBd0QsT0FBQXFCLEVBQUFsRCxLQUFBNkIsS0FHeERxQixFQUFBbEQsS0FBQTFDLEtBVkEsU0FBQXFGLEdBQ0EsT0FBQUEsRUFBQXBELE1BQUEsU0FBQTRELEdBQXlDLE9BQUE3QixFQUFBNkIsS0FZekNDLENBQUFGLEdBRUFKLEVBQUFHLEVBREFDLEVBQUF2RCxJQUFBLFNBQUF3RCxHQUE4RCxPQUFBQSxFQUFBdEIsYUFHOUNkLEtBQUEsUUFBQTRCLE1BQUFPLEdBZ0VoQixTQUFBN0QsRUFBQXJCLEVBQUFxRixHQUNBLE9BOURBLFNBQUFDLEVBQUF0RixFQUFBcUYsRUFBQUUsR0FDQSxRQUFBakgsRUFBQSxFQUF1QkEsRUFBQWlILEVBQUF2RSxPQUFxQjFDLElBQUEsQ0FDNUMsSUFBQWtILEVBQUFELEVBQUFqSCxHQUNBLEdBQUEwQixJQUFBd0YsRUFBQXhGLEdBQUFxRixJQUFBRyxFQUFBSCxFQUNBLFNBR0EsR0FBQXZDLEVBQUE5QyxJQUFBOEMsRUFBQXVDLEdBQ0EsU0FFQSxHQUFBckMsRUFBQWhELElBQUFnRCxFQUFBcUMsR0FDQSxPQUFBckYsRUFBQVYsUUFBQStGLEVBQUEvRixNQUVBLEdBQUEyRCxFQUFBakQsSUFBQWlELEVBQUFvQyxHQUNBLFNBRUEsR0FBQW5DLEVBQUFsRCxJQUFBa0QsRUFBQW1DLEdBQ0EsU0FFQSxHQUFBL0IsRUFBQXRELElBQUFzRCxFQUFBK0IsR0FDQSxPQUFBQyxFQUFBdEYsRUFBQTZELFFBQUF3QixFQUFBeEIsUUFBQTBCLEVBQUFyRSxTQUEwRWxCLElBQUFxRixRQUUxRSxHQUFBOUIsRUFBQXZELElBQUF1RCxFQUFBOEIsR0FDQSxPQUFBQyxFQUFBdEYsRUFBQVYsTUFBQStGLEVBQUEvRixNQUFBaUcsRUFBQXJFLFNBQXNFbEIsSUFBQXFGLFFBRXRFLEdBQUFsQyxFQUFBbkQsSUFBQW1ELEVBQUFrQyxHQUNBLE9BQUFDLEVBQUF0RixFQUFBOEQsVUFBQXVCLEVBQUF2QixVQUFBeUIsRUFBQXJFLFNBQThFbEIsSUFBQXFGLFFBRTlFLEdBQUFqQyxFQUFBcEQsSUFBQW9ELEVBQUFpQyxHQUFBLENBQ0EsSUFBQUksRUFBQXpGLEVBQUErRCxLQUNBMkIsRUFBQUwsRUFBQXRCLEtBQ0EsU0FBQTBCLEdBQUEsTUFBQUMsRUFDQSxTQUVBLFNBQUFELEdBQUEsTUFBQUMsRUFBQSxDQUNBLElBQUFDLEVBQUF2RixFQUFBQyxPQUFBSixFQUFBd0YsSUFDQUcsRUFBQXhGLEVBQUFDLE9BQUFKLEVBQUF5RixJQUNBcEQsRUFBQXFELEVBQUFyRCxhQUFBc0QsR0FDQSxHQUFBdEQsRUFBQXZCLFNBQUE0RSxFQUFBNUUsT0FDQSxTQUVBLElBQUE4RSxFQUFBTixFQUFBckUsU0FBc0RsQixJQUFBcUYsT0FDdEQsT0FBQS9DLEVBQUFaLElBQUEsU0FBQTJDLEdBQXdELE9BQUFpQixFQUFBRyxFQUFBcEIsR0FBQXFCLEVBQUFyQixHQUFBd0IsV0FHeEQsR0FBQXhDLEVBQUFyRCxJQUFBcUQsRUFBQWdDLEdBQUEsQ0FDQSxJQUFBUyxFQUFBOUYsRUFBQTJFLE1BQ0FvQixFQUFBVixFQUFBVixNQUdBLEdBRkFtQixFQUFBN0IsS0FBQSxTQUFBakUsRUFBQXFGLEdBQStDLE9BQUF2RCxFQUFBOUIsR0FBQWdHLGNBQUFsRSxFQUFBdUQsTUFDL0NVLEVBQUE5QixLQUFBLFNBQUFqRSxFQUFBcUYsR0FBK0MsT0FBQXZELEVBQUE5QixHQUFBZ0csY0FBQWxFLEVBQUF1RCxNQUMvQ1MsRUFBQTlFLFNBQUErRSxFQUFBL0UsT0FDQSxTQUNBLElBQUFpRixFQUFBVixFQUFBckUsU0FBZ0RsQixJQUFBcUYsT0FDaEQsSUFBQS9HLEVBQUEsRUFBMkJBLEVBQUF3SCxFQUFBOUUsT0FBeUIxQyxJQUNwRCxJQUFBZ0gsRUFBQVEsRUFBQXhILEdBQUF5SCxFQUFBekgsR0FBQTJILEdBQ0EsU0FFQSxTQUVBLFNBR0FYLENBQUF0RixFQUFBcUYsTUF2TkF4QyxFQUFBQyxTQUlBRCxFQUFBRyxXQUlBSCxFQUFBSSxXQUlBSixFQUFBSyxZQUlBTCxFQUFBTSxVQUlBTixFQUFBTyxXQUlBUCxFQUFBUSxVQUlBUixFQUFBUyxhQUlBVCxFQUFBVSxRQXNFQVYsRUFBQWYsV0FDQWUsRUFBQWtDLE1BQWtCaEMsS0FBQSxRQUNsQkYsRUFBQXFELFFBQW9CbkQsS0FBQSxVQUNwQkYsRUFBQXNELFFBQW9CcEQsS0FBQSxTQUFBekQsTUFBQSxNQUlwQnVELEVBQUF1RCxZQUhBLFNBQUE5RyxHQUNBLE9BQWdCeUQsS0FBQSxTQUFBekQsVUFHaEJ1RCxFQUFBd0QsU0FBcUJ0RCxLQUFBLFdBSXJCRixFQUFBZ0MsTUFVQWhDLEVBQUFpQyxXQUlBakMsRUFBQW1DLFFBSUFuQyxFQUFBN0QsU0FvQkE2RCxFQUFBb0MsUUFpRUFwQyxFQUFBeEIsU0F3RkF3QixFQUFBeUQsUUFsRkEsU0FBQUEsRUFBQXRHLEVBQUFxRixHQUNBLEdBQUEvQixFQUFBdEQsSUFDQSxHQUFBc0QsRUFBQStCLEdBQUEsQ0FDQSxJQUFBa0IsRUFBQUQsRUFBQXRHLEVBQUE2RCxRQUFBd0IsRUFBQXhCLFNBQ0EsU0FBQTBDLEVBQ0EsT0FBQXpCLEVBQUF5QixTQUlBLEdBQUF6RCxFQUFBOUMsSUFDQSxHQUFBOEMsRUFBQXVDLEdBQ0EsT0FBQXhDLEVBQUFrQyxVQUdBLEdBQUE5QixFQUFBakQsSUFDQSxHQUFBaUQsRUFBQW9DLEdBQ0EsT0FBQXhDLEVBQUFxRCxZQUdBLEdBQUFsRCxFQUFBaEQsSUFDQSxHQUFBZ0QsRUFBQXFDLEdBQ0EsT0FBQXhDLEVBQUFzRCxZQUdBLEdBQUFqRCxFQUFBbEQsSUFDQSxHQUFBa0QsRUFBQW1DLEdBQ0EsT0FBQXhDLEVBQUF3RCxhQUdBLEdBQUFoRCxFQUFBckQsSUFDQSxHQUFBcUIsRUFBQXJCLEVBQUFxRixHQUNBLE9BQUFyRixPQUdBLEdBQUFtRCxFQUFBbkQsSUFDQSxHQUFBbUQsRUFBQWtDLEdBQ0EsT0FBQXJGLE9BR0EsR0FBQXVELEVBQUF2RCxJQUFBdUQsRUFBQThCLEdBQUEsQ0FDQSxJQUFBbUIsRUFBQUYsRUFBQXRHLEVBQUFWLE1BQUErRixFQUFBL0YsT0FDQSxTQUFBa0gsRUFDQSxPQUFBM0IsRUFBQTJCLFFBR0EsR0FBQXBELEVBQUFwRCxJQUFBb0QsRUFBQWlDLEdBQUEsQ0FDQSxJQUFBb0IsRUFBQXpHLEVBQUErRCxLQUNBMkMsRUFBQXJCLEVBQUF0QixLQUNBLFNBQUEwQyxHQUFBLE1BQUFDLEVBQ0EsT0FBQTFHLEVBRUEsU0FBQXlHLEdBQUEsTUFBQUMsRUFDQSxZQUVBLElBQUFDLEVBQUF2RyxFQUFBQyxPQUFBSixFQUFBd0csSUFDQUcsRUFBQXhHLEVBQUFDLE9BQUFKLEVBQUF5RyxJQUVBRyxLQUNBLE9BRkFGLEVBQUF0RSxNQUFBdUUsR0FFQWxGLElBQUEsU0FBQW9GLEdBQ0EsSUFBQUMsRUFBQU4sRUFBQUssR0FDQUUsRUFBQU4sRUFBQUksR0FDQSxTQUFBQyxHQUFBLE1BQUFDLEVBQUEsQ0FDQSxJQUFBQyxFQUFBWCxFQUFBUyxFQUFBQyxHQUNBLFNBQUFDLEVBQ0EsU0FFQUosRUFBQUMsR0FBQUcsT0FHQUosRUFBQUMsR0FEQSxNQUFBQyxFQUNBQSxFQUdBQyxFQUVBLFdBSUFoSSxFQUFBNkgsR0FGQSxLQUlBLGFBbURBaEUsRUFBQXFFLE1BM0NBLFNBQUFBLEVBQUFsSCxFQUFBcUYsR0FDQSxPQUFBdkMsRUFBQTlDLElBQUFzRCxFQUFBdEQsTUFBQThDLEVBQUF1QyxJQUFBL0IsRUFBQStCLElBRUEvQixFQUFBdEQsSUFBQXNELEVBQUErQixHQUNBUCxFQUFBb0MsRUFBQWxILEVBQUE2RCxRQUFBd0IsRUFBQXhCLFVBRUFQLEVBQUF0RCxHQUVBQSxFQUVBc0QsRUFBQStCLEdBRUFBLEVBRUF2QyxFQUFBOUMsR0FDQXFGLEVBRUF2QyxFQUFBdUMsR0FDQXJGLEdBRUFELEVBQUFDLEdBQUFELEVBQUFzRixJQUVBdkMsRUFBQTlDLElBQUFzRCxFQUFBdEQsR0FFQThDLEVBQUE5QyxHQUNBOEUsRUFBQU8sR0FFQS9CLEVBQUF0RCxHQUNBOEUsRUFBQW9DLEVBQUFsSCxFQUFBNkQsUUFBQXdCLElBRUF0RixFQUFBQyxHQUVBOEMsRUFBQXVDLElBQUEvQixFQUFBK0IsR0FDQXZDLEVBQUF1QyxHQUNBUCxFQUFBOUUsR0FFQXNELEVBQUErQixHQUNBUCxFQUFBb0MsRUFBQWxILEVBQUFxRixFQUFBeEIsVUFFQTlELEVBQUFzRixHQUVBSixHQUFBakYsRUFBQXFGLEtBMkNBeEMsRUFBQXNFLE1BeENBLFNBQUFBLEVBQUFqSCxHQUNBLG9CQUFBQSxFQUNBLE9BQUEyQyxFQUFBcUQsT0FFQSxvQkFBQWhHLEVBQ0EsT0FBQTJDLEVBQUFzRCxPQUVBLHFCQUFBakcsRUFDQSxPQUFBMkMsRUFBQXdELFFBRUEsU0FBQW5HLEVBQ0EsT0FBQTJDLEVBQUFrQyxLQUVBLEdBQUE3RSxHQUFBLGlCQUFBQSxFQUFBYyxPQUFBLENBRUEsSUFEQSxJQUFBb0csS0FDQTlJLEVBQUEsRUFBMkJBLEVBQUE0QixFQUFBYyxPQUFnQjFDLElBQUEsQ0FDM0MsSUFBQStJLEVBQUFGLEVBQUFqSCxFQUFBNUIsSUFDQSxTQUFBK0ksRUFDQSxZQUVBLElBREEsSUFBQUMsR0FBQSxFQUNBQyxFQUFBLEVBQStCQSxFQUFBSCxFQUFBcEcsT0FBdUJ1RyxJQUN0RCxHQUFBbEcsRUFBQStGLEVBQUFHLEdBQUFGLEdBQUEsQ0FDQUMsR0FBQSxFQUNBLE1BR0FBLEdBQ0FGLEVBQUFwRixLQUFBcUYsR0FHQSxXQUFBRCxFQUFBcEcsT0FDQWdFLEVBQUFvQyxFQUFBLElBRUFwQyxFQUFBQyxFQUFBbUMsSUFFQSx1QkFBQWxILEVBQ0FsQixJQUVBLE1BN1lBLENBZ1pDWixFQUFBeUUsUUFBQXpFLEVBQUF5RSx5Q0NqaUJEN0QsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q2tCLE9BQUEsSUFFOUMsU0FBQWtJLEdBUUFBLEVBQUFuSCxPQVBBLFNBQUFTLEVBQUEyRyxHQUNBLE9BQ0ExRSxLQUFBLGNBQ0FqQyxRQUNBMkcsVUFMQSxDQVNDckosRUFBQW9KLGtCQUFBcEosRUFBQW9KLHFCQUVELFNBQUFFLEdBUUFBLEVBQUFySCxPQVBBLFNBQUFmLEVBQUFxSSxHQUNBLE9BQ0E1RSxLQUFBLGNBQ0F6RCxRQUNBcUksV0FMQSxDQVNDdkosRUFBQXNKLGFBQUF0SixFQUFBc0osZ0JBRUQsU0FBQUUsR0FRQUEsRUFBQXZILE9BUEEsU0FBQWYsRUFBQWdJLEdBQ0EsT0FDQXZFLEtBQUEscUJBQ0F6RCxRQUNBZ0ksVUFMQSxDQVNDbEosRUFBQXdKLHlCQUFBeEosRUFBQXdKLDRCQUVELFNBQUFDLEdBVUFBLEVBQUF4SCxPQVRBLFNBQUFmLEVBQUF3SSxFQUFBQyxFQUFBQyxHQUNBLE9BQ0FqRixLQUFBLGVBQ0ErRSxXQUNBQyxTQUNBekksUUFDQW1JLE1BQUFPLEdBQUEsT0FQQSxDQVdDNUosRUFBQXlKLG1CQUFBekosRUFBQXlKLG9EQzlDRDdJLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENrQixPQUFBLElBQzlDLElBQUEySSxFQUFBL0osRUFBQSxJQUNBZ0ssRUFBQWhLLEVBQUEsSUFDQWlLLEVBQUFqSyxFQUFBLEtBRUEsU0FBQWtLLEdBSUFBLEVBQUFDLFFBSEEsU0FBQS9JLEdBQ0EsV0FBQTJJLEVBQUFLLGtCQUFBaEosSUFNQThJLEVBQUFHLFFBSEEsU0FBQWpKLEdBQ0EsV0FBQTRJLEVBQUFNLGtCQUFBbEosSUF3QkE4SSxFQUFBMUcsSUFyQkEsU0FBQStHLEdBR0EsSUFGQSxJQUFBQyxLQUNBQyxLQUNBckssRUFBQSxFQUF1QkEsRUFBQW1LLEVBQUF6SCxPQUFvQjFDLElBQUEsQ0FDM0MsSUFBQXNLLEVBQUFILEVBQUFuSyxHQUNBLEdBQUFzSyxFQUFBQyxZQUNBSCxFQUFBMUcsS0FBQTRHLE9BRUEsS0FBQUEsRUFBQUUsWUFLQSxPQUFBWCxFQUFBcEksWUFBQSxtREFKQTRJLEVBQUEzRyxLQUFBNEcsSUFPQSxPQUFBRCxFQUFBM0gsT0FBQSxFQUNBb0gsRUFBQUcsUUFBQUksRUFBQWhILElBQUEsU0FBQVAsR0FBNkQsT0FBQUEsRUFBQXFHLFNBRTdEVyxFQUFBQyxRQUFBSyxFQUFBL0csSUFBQSxTQUFBUCxHQUEwRCxPQUFBQSxFQUFBOUIsVUE1QjFELENBK0JDbEIsRUFBQWdLLFNBQUFoSyxFQUFBZ0ssMENDcENELElBQ0FXLEVBREFDLEVBQUFwSSxXQUFBb0ksWUFDQUQsRUFBQS9KLE9BQUFpSyxpQkFDVUMsd0JBQWdCbEUsT0FBQSxTQUFBcEcsRUFBQXlHLEdBQXNDekcsRUFBQXNLLFVBQUE3RCxJQUNoRSxTQUFBekcsRUFBQXlHLEdBQXlCLFFBQUF4RixLQUFBd0YsSUFBQXpGLGVBQUFDLEtBQUFqQixFQUFBaUIsR0FBQXdGLEVBQUF4RixLQUN6QixTQUFBakIsRUFBQXlHLEdBRUEsU0FBQThELElBQXVCdkksS0FBQXdJLFlBQUF4SyxFQUR2Qm1LLEVBQUFuSyxFQUFBeUcsR0FFQXpHLEVBQUFlLFVBQUEsT0FBQTBGLEVBQUFyRyxPQUFBcUIsT0FBQWdGLElBQUE4RCxFQUFBeEosVUFBQTBGLEVBQUExRixVQUFBLElBQUF3SixLQUdBbkssT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q2tCLE9BQUEsSUFDOUMsSUFBQStKLEVBQUFuTCxFQUFBLEdBQ0FvTCxFQUFBcEwsRUFBQSxHQUNBcUwsRUFBQXJMLEVBQUEsR0FDQXNMLEVBQUEsV0FDQSxTQUFBQSxLQVdBLE9BVEFBLEVBQUE3SixVQUFBOEosWUFBQSxTQUFBbkssR0FDQSxXQUFBb0ssRUFBQTlJLEtBQUF0QixJQUVBa0ssRUFBQTdKLFVBQUFnSyxXQUFBLFdBQ0EsV0FBQUMsRUFBQWhKLE9BRUE0SSxFQUFBN0osVUFBQWtLLEdBQUEsU0FBQXZJLEdBQ0EsV0FBQXdJLEVBQUFsSixLQUFBVSxJQUVBa0ksRUFaQSxHQWNBcEwsRUFBQW9MLGlCQUNBLElBQUFFLEVBQUEsU0FBQUssR0FFQSxTQUFBTCxFQUFBTSxFQUFBQyxHQUNBLElBQUFDLEVBQUFILEVBQUF0TCxLQUFBbUMsWUFJQSxPQUhBc0osRUFBQUYsU0FDQUUsRUFBQUMsUUFBQUYsRUFDQUMsRUFBQUUsYUFBQUosRUFBQUksYUFDQUYsRUFPQSxPQWJBbEIsRUFBQVUsRUFBQUssR0FRQUwsRUFBQS9KLFVBQUEwSyxLQUFBLFNBQUFuSyxHQUNBLElBQUFnSyxFQUFBdEosS0FDQSxPQUFBMEksRUFBQWxCLE9BQUFDLFFBQUF6SCxLQUFBb0osT0FBQUssS0FBQW5LLEdBQ0F5QixJQUFBLFNBQUEwRyxHQUFxQyxPQUFBQSxHQUFrQixXQUFlLE9BQUE2QixFQUFBQyxZQUV0RVQsRUFkQSxDQWVDRixHQUNEcEwsRUFBQXNMLGdCQVFBLElBQUFJLEVBQUEsU0FBQUMsR0FFQSxTQUFBRCxFQUFBUSxFQUFBQyxHQUNBLElBQUFMLEVBQUFILEVBQUF0TCxLQUFBbUMsWUFJQSxPQUhBc0osRUFBQUksVUFDQUosRUFBQUssVUFDQUwsRUFBQUUsYUFBQWIsRUFBQTFHLE1BQUFvQyxPQUFBcUYsRUFBQUYsYUFBQUcsRUFBQUgsZUFDQUYsRUFPQSxPQWJBbEIsRUFBQWMsRUFBQUMsR0FRQUQsRUFBQW5LLFVBQUEwSyxLQUFBLFNBQUFuSyxHQUNBLElBQUFnSyxFQUFBdEosS0FDQSxPQUFBQSxLQUFBMEosUUFBQUQsS0FBQW5LLEdBQUF5QixJQUFBLFNBQUEwRyxHQUE4RCxPQUFBaUIsRUFBQWxCLE9BQUFDLFlBQTJDLFNBQUFFLEdBQXNCLE9BQUEyQixFQUFBSyxRQUFBRixLQUFBbkssR0FDL0hzSyxXQUFBLFNBQUEvQyxHQUEwQyxPQUFBNEIsRUFBQXhCLGlCQUFBeEgsT0FBQUgsRUFBQXFKLEVBQUExRyxNQUFBZixTQUFBb0ksRUFBQUUsY0FuQjFDLFNBQUFsSyxHQUNBLElBQUFtSCxFQUFBa0MsRUFBQTFHLE1BQUFzRSxNQUFBakgsR0FDQSxhQUFBbUgsRUFDQWtDLEVBQUExRyxNQUFBZixTQUFBdUYsR0FFQSxVQWMwQ29ELENBQUF2SyxHQUFBbUosRUFBQTNCLFdBQUFySCxPQUFBSCxHQUFBcUksRUFBQWQsVUFFMUNxQyxFQWRBLENBZUNOLEdBQ0RwTCxFQUFBMEwsV0FDQSxJQUFBRixFQUFBLFNBQUFHLEdBRUEsU0FBQUgsRUFBQUksR0FDQSxJQUFBRSxFQUFBSCxFQUFBdEwsS0FBQW1DLEtBQUFvSixFQUFBLE9BQUFwSixLQUVBLE9BREFzSixFQUFBRSxhQUFBYixFQUFBMUcsTUFBQWlDLFNBQUFrRixFQUFBSSxjQUNBRixFQUVBLE9BTkFsQixFQUFBWSxFQUFBRyxHQU1BSCxFQVBBLENBUUNGLEdBQ0R0TCxFQUFBd0wsK0NDL0VBLElBQ0FiLEVBREFDLEVBQUFwSSxXQUFBb0ksWUFDQUQsRUFBQS9KLE9BQUFpSyxpQkFDVUMsd0JBQWdCbEUsT0FBQSxTQUFBcEcsRUFBQXlHLEdBQXNDekcsRUFBQXNLLFVBQUE3RCxJQUNoRSxTQUFBekcsRUFBQXlHLEdBQXlCLFFBQUF4RixLQUFBd0YsSUFBQXpGLGVBQUFDLEtBQUFqQixFQUFBaUIsR0FBQXdGLEVBQUF4RixLQUN6QixTQUFBakIsRUFBQXlHLEdBRUEsU0FBQThELElBQXVCdkksS0FBQXdJLFlBQUF4SyxFQUR2Qm1LLEVBQUFuSyxFQUFBeUcsR0FFQXpHLEVBQUFlLFVBQUEsT0FBQTBGLEVBQUFyRyxPQUFBcUIsT0FBQWdGLElBQUE4RCxFQUFBeEosVUFBQTBGLEVBQUExRixVQUFBLElBQUF3SixLQUdBdUIsRUFBQTlKLFdBQUE4SixjQUFBLFNBQUFDLEdBQ0EsR0FBQUEsS0FBQW5MLFdBQUEsT0FBQW1MLEVBQ0EsSUFBQS9CLEtBQ0EsU0FBQStCLEVBQUEsUUFBQUMsS0FBQUQsRUFBQTNMLE9BQUFZLGVBQUFuQixLQUFBa00sRUFBQUMsS0FBQWhDLEVBQUFnQyxHQUFBRCxFQUFBQyxJQUVBLE9BREFoQyxFQUFBLFFBQUErQixFQUNBL0IsR0FFQTVKLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENrQixPQUFBLElBQzlDLElBQUFxSSxFQUFBK0MsRUFBQXhNLEVBQUEsSUFDQTJNLEVBQUEzTSxFQUFBLEdBQ0FxTCxFQUFBckwsRUFBQSxHQUNBNE0sRUFBQSxTQUFBZixHQUVBLFNBQUFlLEVBQUFwTCxFQUFBc0ssR0FDQSxJQUFBRSxFQUFBSCxFQUFBdEwsS0FBQW1DLFlBQ0FzSixFQUFBeEssV0FDQXdLLEVBQUFGLFNBQ0EsSUFBQTlKLEtBS0EsT0FKQUEsRUFBQVIsR0FBQXNLLEVBQUFJLGFBQ0FXLFFBQUFDLElBQUEsVUFBQXRMLEVBQUEsVUFBQXNLLEVBQUFJLGNBQ0FGLEVBQUFFLGFBQUFiLEVBQUExRyxNQUFBN0QsT0FBQWtCLEdBQ0E2SyxRQUFBQyxJQUFBLDRCQUFBZCxFQUFBRSxjQUNBRixFQWVBLE9BekJBbEIsRUFBQThCLEVBQUFmLEdBWUFlLEVBQUFuTCxVQUFBMEssS0FBQSxTQUFBbkssR0FDQSxJQUFBZ0ssRUFBQXRKLEtBQ0EsT0FBQVYsR0FBQWxCLE9BQUFZLGVBQUFuQixLQUFBeUIsRUFBQVUsS0FBQWxCLFVBQ0FrQixLQUFBb0osT0FBQUssS0FBQW5LLEVBQUFVLEtBQUFsQixXQUdBa0IsS0FBQW9KLE9BQUFLLEtBQUEsTUFBQUcsV0FBQSxXQUNBLElBQUFuRCxFQUFBa0MsRUFBQTFHLE1BQUFzRSxNQUFBakgsR0FDQStLLEVBQUE1RCxHQUFBa0MsRUFBQTFHLE1BQUFmLFNBQUF1RixJQUFBLFVBQ0EsT0FBQU0sRUFBQUUsaUJBQUF4SCxPQUFBSCxFQUFBcUosRUFBQTFHLE1BQUFmLFNBQUFvSSxFQUFBRSxjQUFBYSxNQUlBSCxFQTFCQSxDQTJCQ0QsRUFBQXJCLGdCQUNEcEwsRUFBQTBNLDhDQ2pEQTlMLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENrQixPQUFBLElBQzlDLElBQUErSixFQUFBbkwsRUFBQSxHQUNBb0wsRUFBQXBMLEVBQUEsR0FDQXFMLEVBQUFyTCxFQUFBLEdBQ0FnTixFQUFBLFdBQ0EsU0FBQUEsRUFBQUMsR0FDQXZLLEtBQUF1SyxjQUNBdkssS0FBQXdKLGFBQUFiLEVBQUExRyxNQUFBZ0MsSUFBQXNHLEVBQUFmLGNBNkJBLE9BM0JBYyxFQUFBdkwsVUFBQTBLLEtBQUEsU0FBQW5LLEdBQ0Esb0JBQUFBLEVBQUEsQ0FDQSxJQUFBa0wsS0FDQSxRQUFBL0csS0FBQW5FLEVBQ0EsR0FBQWxCLE9BQUFZLGVBQUFuQixLQUFBeUIsRUFBQW1FLEdBQUEsQ0FDQSxJQUFBL0UsRUFBQVksRUFBQW1FLEdBQ0FnSCxFQUFBekssS0FBQXVLLFlBQUFkLEtBQUEvSyxHQUNBLElBQUErTCxFQUFBeEMsWUFHQSxDQUNBLElBQUFvQyxFQUFBLElBQTJDMUIsRUFBQTdHLE1BQUEyQixHQUFBLGFBQzNDaUgsS0FDQUMsRUFBQWhDLEVBQUExRyxNQUFBc0UsTUFBQTdILEdBS0EsT0FKQSxNQUFBaU0sSUFDQUQsRUFBQWpILEdBQUFrSCxFQUNBTixFQUFBMUIsRUFBQTFHLE1BQUFmLFNBQUF5SCxFQUFBMUcsTUFBQTdELE9BQUFzTSxLQUVBaEMsRUFBQWxCLE9BQUFHLFFBQUFjLEVBQUF4QixpQkFBQXhILE9BQUFILEVBQUFxSixFQUFBMUcsTUFBQWYsU0FBQWxCLEtBQUF3SixjQUFBYSxFQUFBSSxFQUFBdkMsWUFBQXVDLEVBQUE1RCxXQUFBK0QsSUFWQUosRUFBQS9HLEdBQUFnSCxFQUFBL0wsTUFjQSxPQUFBZ0ssRUFBQWxCLE9BQUFDLFFBQUErQyxHQUVBLElBQUFLLEVBQUFsQyxFQUFBMUcsTUFBQXNFLE1BQUFqSCxHQUNBLE9BQUFvSixFQUFBbEIsT0FBQUcsUUFBQWMsRUFBQXhCLGlCQUFBeEgsT0FBQUgsRUFBQXFKLEVBQUExRyxNQUFBZixTQUFBbEIsS0FBQXdKLGNBQUFxQixHQUFBbEMsRUFBQTFHLE1BQUFmLFNBQUEySixJQUFBLGFBRUFQLEVBaENBLEdBa0NBOU0sRUFBQThNLDBDQ3RDQSxJQUNBbkMsRUFEQUMsRUFBQXBJLFdBQUFvSSxZQUNBRCxFQUFBL0osT0FBQWlLLGlCQUNVQyx3QkFBZ0JsRSxPQUFBLFNBQUFwRyxFQUFBeUcsR0FBc0N6RyxFQUFBc0ssVUFBQTdELElBQ2hFLFNBQUF6RyxFQUFBeUcsR0FBeUIsUUFBQXhGLEtBQUF3RixJQUFBekYsZUFBQUMsS0FBQWpCLEVBQUFpQixHQUFBd0YsRUFBQXhGLEtBQ3pCLFNBQUFqQixFQUFBeUcsR0FFQSxTQUFBOEQsSUFBdUJ2SSxLQUFBd0ksWUFBQXhLLEVBRHZCbUssRUFBQW5LLEVBQUF5RyxHQUVBekcsRUFBQWUsVUFBQSxPQUFBMEYsRUFBQXJHLE9BQUFxQixPQUFBZ0YsSUFBQThELEVBQUF4SixVQUFBMEYsRUFBQTFGLFVBQUEsSUFBQXdKLEtBR0F1QixFQUFBOUosV0FBQThKLGNBQUEsU0FBQUMsR0FDQSxHQUFBQSxLQUFBbkwsV0FBQSxPQUFBbUwsRUFDQSxJQUFBL0IsS0FDQSxTQUFBK0IsRUFBQSxRQUFBQyxLQUFBRCxFQUFBM0wsT0FBQVksZUFBQW5CLEtBQUFrTSxFQUFBQyxLQUFBaEMsRUFBQWdDLEdBQUFELEVBQUFDLElBRUEsT0FEQWhDLEVBQUEsUUFBQStCLEVBQ0EvQixHQUVBNUosT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q2tCLE9BQUEsSUFDOUMsSUFBQXFJLEVBQUErQyxFQUFBeE0sRUFBQSxJQUNBb0wsRUFBQXBMLEVBQUEsR0FDQTJNLEVBQUEzTSxFQUFBLEdBQ0F3TixFQUFBeE4sRUFBQSxHQUNBcUwsRUFBQXJMLEVBQUEsR0FDQXlOLEVBQUEsU0FBQTVCLEdBRUEsU0FBQTRCLElBQ0EsSUFBQXpCLEVBQUEsT0FBQUgsS0FBQTZCLE1BQUFoTCxLQUFBaUwsWUFBQWpMLEtBRUEsT0FEQXNKLEVBQUFFLGFBQUFiLEVBQUExRyxNQUFBN0QsV0FDQWtMLEVBYUEsT0FqQkFsQixFQUFBMkMsRUFBQTVCLEdBT0E0QixFQUFBaE0sVUFBQW1NLFFBQUEsV0FBNEQsVUFDNURILEVBQUFoTSxVQUFBb00sSUFBQSxTQUFBak0sRUFBQWtLLEdBQ0EsV0FBQWdDLEVBQUFsTSxFQUFBa0ssRUFBQXBKLE9BRUErSyxFQUFBaE0sVUFBQW1ILEtBQUEsU0FBQWhILEVBQUFrSyxHQUNBLFdBQUFnQyxFQUFBbE0sRUFBQSxJQUFBNEwsRUFBQVosY0FBQWhMLEVBQUFrSyxHQUFBcEosT0FFQStLLEVBQUFoTSxVQUFBMEssS0FBQSxXQUNBLE9BQUFmLEVBQUFsQixPQUFBQyxhQUVBc0QsRUFsQkEsQ0FtQkNkLEVBQUFyQixnQkFDRHBMLEVBQUF1Tix5QkFDQSxJQUFBSyxFQUFBLFdBQ0EsU0FBQUEsRUFBQXRNLEVBQUFzSyxFQUFBaUMsR0FjQWxCLFFBQUFDLElBQUEsWUFBQWhCLEVBQUFJLGFBQUEsTUFBQTZCLEVBQUE3QixjQUNBLElBQUE4QixFQUFBM0MsRUFBQTFHLE1BQUF5RCxRQUFBMkYsRUFBQTdCLGFBQUFKLEVBQUFJLGNBRUEsR0FEQVcsUUFBQUMsSUFBQSxZQUFBa0IsR0FDQSxNQUFBQSxFQUNBLE1BQUFDLE1BQUEsNEJBQUFGLEVBQUE3QixhQUFBdEksV0FBQSxRQUFBa0ksRUFBQUksYUFBQXRJLFlBRUFsQixLQUFBd0osYUFBQThCLEVBQ0F0TCxLQUFBbEIsV0FDQWtCLEtBQUFvSixTQUNBcEosS0FBQXFMLE9BMEJBLE9BeEJBRCxFQUFBck0sVUFBQW1NLFFBQUEsV0FBdUQsVUFDdkRFLEVBQUFyTSxVQUFBb00sSUFBQSxTQUFBak0sRUFBQWtLLEdBQ0EsV0FBQWdDLEVBQUFsTSxFQUFBa0ssRUFBQXBKLE9BRUFvTCxFQUFBck0sVUFBQW1ILEtBQUEsU0FBQWhILEVBQUFrSyxHQUNBLFdBQUFnQyxFQUFBbE0sRUFBQSxJQUFBNEwsRUFBQVosY0FBQWhMLEVBQUFrSyxHQUFBcEosT0FFQW9MLEVBQUFyTSxVQUFBMEssS0FBQSxTQUFBbkssR0FDQSxJQUFBZ0ssRUFBQXRKLEtBQ0EsT0FBQUEsS0FBQXFMLEtBQUE1QixLQUFBbkssR0FBQWtNLFFBQUEsU0FBQUMsR0FDQSxPQUFBbkMsRUFBQUYsT0FBQUssS0FBQW5LLEdBQUFvTSxXQUFBLFNBQUFqRSxHQUNBLElBQUFrRSxFQUFBRixFQUVBLE9BREFFLEVBQUFyQyxFQUFBeEssVUFBQTJJLEVBQ0FrRSxLQUVTLFNBQUFoRSxHQUNULG1CQUFBQSxFQUFBeEYsS0FBQSxDQUNBLElBQUFzRSxFQUFBa0MsRUFBQTFHLE1BQUFzRSxNQUFBakgsR0FDQStLLEVBQUE1RCxHQUFBa0MsRUFBQTFHLE1BQUFmLFNBQUF1RixJQUFBLFVBQ0EsT0FBQWlDLEVBQUFsQixPQUFBRyxRQUFBWixFQUFBRSxpQkFBQXhILE9BQUFILEVBQUFxSixFQUFBMUcsTUFBQWYsU0FBQW9JLEVBQUFFLGNBQUFhLEVBQUExQyxJQUVBLE9BQUFlLEVBQUFsQixPQUFBRyxjQUdBeUQsRUFsREEsR0FvREE1TixFQUFBNE4sa0RDaEdBLElBQ0FqRCxFQURBQyxFQUFBcEksV0FBQW9JLFlBQ0FELEVBQUEvSixPQUFBaUssaUJBQ1VDLHdCQUFnQmxFLE9BQUEsU0FBQXBHLEVBQUF5RyxHQUFzQ3pHLEVBQUFzSyxVQUFBN0QsSUFDaEUsU0FBQXpHLEVBQUF5RyxHQUF5QixRQUFBeEYsS0FBQXdGLElBQUF6RixlQUFBQyxLQUFBakIsRUFBQWlCLEdBQUF3RixFQUFBeEYsS0FDekIsU0FBQWpCLEVBQUF5RyxHQUVBLFNBQUE4RCxJQUF1QnZJLEtBQUF3SSxZQUFBeEssRUFEdkJtSyxFQUFBbkssRUFBQXlHLEdBRUF6RyxFQUFBZSxVQUFBLE9BQUEwRixFQUFBckcsT0FBQXFCLE9BQUFnRixJQUFBOEQsRUFBQXhKLFVBQUEwRixFQUFBMUYsVUFBQSxJQUFBd0osS0FHQXVCLEVBQUE5SixXQUFBOEosY0FBQSxTQUFBQyxHQUNBLEdBQUFBLEtBQUFuTCxXQUFBLE9BQUFtTCxFQUNBLElBQUEvQixLQUNBLFNBQUErQixFQUFBLFFBQUFDLEtBQUFELEVBQUEzTCxPQUFBWSxlQUFBbkIsS0FBQWtNLEVBQUFDLEtBQUFoQyxFQUFBZ0MsR0FBQUQsRUFBQUMsSUFFQSxPQURBaEMsRUFBQSxRQUFBK0IsRUFDQS9CLEdBRUE1SixPQUFBQyxlQUFBYixFQUFBLGNBQThDa0IsT0FBQSxJQUM5QyxJQUlBa04sRUFKQTdFLEVBQUErQyxFQUFBeE0sRUFBQSxJQUNBb0wsRUFBQXBMLEVBQUEsR0FDQTJNLEVBQUEzTSxFQUFBLEdBQ0FxTCxFQUFBckwsRUFBQSxJQUVBLFNBQUFzTyxHQU9BQSxFQUFBbk0sT0FOQSxTQUFBb00sR0FDQSxPQUNBMUosS0FBQSxnQkFDQTJKLFlBQUFELElBSkEsQ0FRQ0QsV0FDRCxJQUFBRyxFQUFBLFdBQ0EsU0FBQUEsSUFDQS9MLEtBQUF3SixhQUFBYixFQUFBMUcsTUFBQW9DLFVBQ0FyRSxLQUFBZ00sa0JBY0EsT0FaQUQsRUFBQWhOLFVBQUFtTSxRQUFBLFdBQXFELFVBQ3JEYSxFQUFBaE4sVUFBQWtOLEtBQUEsU0FBQS9NLEdBQ0EsV0FBQWdOLEVBQUFoTixFQUFBYyxPQUVBK0wsRUFBQWhOLFVBQUEwSyxLQUFBLFNBQUFuSyxHQUNBLG9CQUFBQSxFQUFBLENBQ0EsSUFBQW1ILEVBQUFrQyxFQUFBMUcsTUFBQXNFLE1BQUFqSCxHQUNBK0ssRUFBQTVELEdBQUFrQyxFQUFBMUcsTUFBQWYsU0FBQXVGLElBQUEsVUFDQSxPQUFBaUMsRUFBQWxCLE9BQUFHLFFBQUFaLEVBQUFFLGlCQUFBeEgsT0FBQUgsRUFBQXFKLEVBQUExRyxNQUFBZixTQUFBeUgsRUFBQTFHLE1BQUFzRCxRQUFBOEUsSUFFQSxPQUFBM0IsRUFBQWxCLE9BQUFHLFFBQUFpRSxFQUFBbk0sYUFFQXNNLEVBakJBLEdBbUJBRyxFQUFBLFdBQ0EsU0FBQUEsRUFBQXhOLEVBQUF5TixHQUNBbk0sS0FBQXRCLFFBQ0FzQixLQUFBbU0sYUFDQW5NLEtBQUFnTSxlQUFBRyxFQUFBSCxlQUFBMUwsUUFBQTVCLElBdUJBLE9BckJBd04sRUFBQW5OLFVBQUFtTSxRQUFBLFdBQXFELFVBQ3JEZ0IsRUFBQW5OLFVBQUFrTixLQUFBLFNBQUEvTSxHQUNBLFdBQUFnTixFQUFBaE4sRUFBQWMsT0FFQWtNLEVBQUFuTixVQUFBMEssS0FBQSxTQUFBbkssR0FDQSxJQUFBZ0ssRUFBQXRKLEtBQ0Esb0JBQUFWLEVBQUEsQ0FDQSxJQUFBbUgsRUFBQWtDLEVBQUExRyxNQUFBc0UsTUFBQWpILEdBQ0ErSyxFQUFBNUQsR0FBQWtDLEVBQUExRyxNQUFBZixTQUFBdUYsSUFBQSxVQUNBLE9BQUFpQyxFQUFBbEIsT0FBQUcsUUFBQVosRUFBQUUsaUJBQUF4SCxPQUFBSCxFQUFBcUosRUFBQTFHLE1BQUFmLFNBQUF5SCxFQUFBMUcsTUFBQXNELFFBQUE4RSxJQUVBLE9BQUEvSyxJQUFBVSxLQUFBdEIsTUFDQWdLLEVBQUFsQixPQUFBQyxRQUFBekgsS0FBQXRCLE9BRUFzQixLQUFBbU0sV0FBQTFDLEtBQUFuSyxHQUFBc0ssV0FBQSxTQUFBakMsR0FDQSx3QkFBQUEsRUFBQXhGLEtBQ0F5SixFQUFBbk0sT0FBQWtJLEVBQUFtRSxZQUFBeEwsUUFBQWdKLEVBQUE1SyxTQUVBaUosS0FHQXVFLEVBM0JBLEdBNkJBRSxFQUFBLFNBQUFqRCxHQUVBLFNBQUFpRCxFQUFBZixHQUNBLElBQUEvQixFQUFBSCxFQUFBdEwsS0FBQW1DLFlBR0EsT0FGQXNKLEVBQUErQixPQUNBL0IsRUFBQUUsYUFBQWIsRUFBQTFHLE1BQUFvQyxNQUFBZ0gsRUFBQVcsZUFBQWpMLElBQUEsU0FBQW9CLEdBQTRGLE9BQUF3RyxFQUFBMUcsTUFBQXVELFlBQUFyRCxNQUM1Rm1ILEVBbUJBLE9BeEJBbEIsRUFBQWdFLEVBQUFqRCxHQU9BaUQsRUFBQTNNLE9BQUEsV0FDQSxXQUFBMk0sRUFBQSxJQUFBTCxJQUVBSyxFQUFBck4sVUFBQWtOLEtBQUEsU0FBQS9NLEdBQ0EsV0FBQWtOLEVBQUFwTSxLQUFBcUwsS0FBQVksS0FBQS9NLEtBRUFrTixFQUFBck4sVUFBQTBLLEtBQUEsU0FBQW5LLEdBQ0EsSUFBQWdLLEVBQUF0SixLQUNBLE9BQUFBLEtBQUFxTCxLQUFBNUIsS0FBQW5LLEdBQUFzSyxXQUFBLFNBQUFqQyxHQUNBLHFCQUFBQSxFQUFBeEYsS0FBQSxDQUNBLElBQUFzRSxFQUFBa0MsRUFBQTFHLE1BQUFzRSxNQUFBakgsR0FDQStLLEVBQUE1RCxHQUFBa0MsRUFBQTFHLE1BQUFmLFNBQUF1RixJQUFBLFVBQ0EsT0FBQU0sRUFBQUUsaUJBQUF4SCxPQUFBSCxFQUFBcUosRUFBQTFHLE1BQUFmLFNBQUFvSSxFQUFBRSxjQUFBYSxHQUVBLE9BQUExQyxLQUdBeUUsRUF6QkEsQ0EwQkNuQyxFQUFBckIsZ0JBQ0RwTCxFQUFBNE8sMkNDM0dBLElBQ0FqRSxFQURBQyxFQUFBcEksV0FBQW9JLFlBQ0FELEVBQUEvSixPQUFBaUssaUJBQ1VDLHdCQUFnQmxFLE9BQUEsU0FBQXBHLEVBQUF5RyxHQUFzQ3pHLEVBQUFzSyxVQUFBN0QsSUFDaEUsU0FBQXpHLEVBQUF5RyxHQUF5QixRQUFBeEYsS0FBQXdGLElBQUF6RixlQUFBQyxLQUFBakIsRUFBQWlCLEdBQUF3RixFQUFBeEYsS0FDekIsU0FBQWpCLEVBQUF5RyxHQUVBLFNBQUE4RCxJQUF1QnZJLEtBQUF3SSxZQUFBeEssRUFEdkJtSyxFQUFBbkssRUFBQXlHLEdBRUF6RyxFQUFBZSxVQUFBLE9BQUEwRixFQUFBckcsT0FBQXFCLE9BQUFnRixJQUFBOEQsRUFBQXhKLFVBQUEwRixFQUFBMUYsVUFBQSxJQUFBd0osS0FHQW5LLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENrQixPQUFBLElBQzlDLElBQUErSixFQUFBbkwsRUFBQSxHQUNBb0wsRUFBQXBMLEVBQUEsR0FDQTJNLEVBQUEzTSxFQUFBLEdBQ0FxTCxFQUFBckwsRUFBQSxHQUNBK08sRUFBQSxTQUFBbEQsR0FFQSxTQUFBa0QsRUFBQWpELEdBQ0EsSUFBQUUsRUFBQUgsRUFBQXRMLEtBQUFtQyxZQUdBLE9BRkFzSixFQUFBRixTQUNBRSxFQUFBRSxhQUFBYixFQUFBMUcsTUFBQW1DLE1BQUFnRixFQUFBSSxjQUNBRixFQWVBLE9BcEJBbEIsRUFBQWlFLEVBQUFsRCxHQU9Ba0QsRUFBQXROLFVBQUEwSyxLQUFBLFNBQUFuSyxHQUNBLElBQUFnSyxFQUFBdEosS0FDQSxHQUFBVixHQUFBLGlCQUFBQSxFQUFBYyxPQUFBLENBQ0EsSUFDQXlILEVBREF2SSxFQUNBeUIsSUFBQSxTQUFBakIsRUFBQUksR0FBeUQsT0FBQW9KLEVBQUFGLE9BQUFLLEtBQUEzSixHQUFBOEosV0FBQSxTQUFBMEMsR0FBc0QsT0FBVXBNLFFBQUEyRyxNQUFBeUYsT0FFekgsT0FEQTVELEVBQUFsQixPQUFBMUcsSUFBQStHLEdBQ0FhLEVBQUFsQixPQUFBMUcsSUFBQStHLEdBQ0ErQixXQUFBLFNBQUE3QyxHQUErQyxPQUFBMEIsRUFBQTNCLFdBQUFySCxPQUFBSCxFQUFBeUgsRUFBQWhHLElBQUEsU0FBQThGLEdBQTZFLE9BQUE0QixFQUFBN0IsZ0JBQUFuSCxPQUFBb0gsRUFBQTNHLE1BQUEyRyxjQUU1SCxJQUFBZ0UsRUFBQWxDLEVBQUExRyxNQUFBc0UsTUFBQWpILEdBQ0ErSyxFQUFBUSxHQUFBbEMsRUFBQTFHLE1BQUFmLFNBQUEySixJQUFBLFVBQ0EsT0FBQW5DLEVBQUFsQixPQUFBRyxRQUFBYyxFQUFBeEIsaUJBQUF4SCxPQUFBSCxFQUFBVSxLQUFBd0osYUFBQXRJLFdBQUFtSixLQUVBZ0MsRUFyQkEsQ0FzQkNwQyxFQUFBckIsZ0JBQ0RwTCxFQUFBNk8sNENDdENBLElBQ0FsRSxFQURBQyxFQUFBcEksV0FBQW9JLFlBQ0FELEVBQUEvSixPQUFBaUssaUJBQ1VDLHdCQUFnQmxFLE9BQUEsU0FBQXBHLEVBQUF5RyxHQUFzQ3pHLEVBQUFzSyxVQUFBN0QsSUFDaEUsU0FBQXpHLEVBQUF5RyxHQUF5QixRQUFBeEYsS0FBQXdGLElBQUF6RixlQUFBQyxLQUFBakIsRUFBQWlCLEdBQUF3RixFQUFBeEYsS0FDekIsU0FBQWpCLEVBQUF5RyxHQUVBLFNBQUE4RCxJQUF1QnZJLEtBQUF3SSxZQUFBeEssRUFEdkJtSyxFQUFBbkssRUFBQXlHLEdBRUF6RyxFQUFBZSxVQUFBLE9BQUEwRixFQUFBckcsT0FBQXFCLE9BQUFnRixJQUFBOEQsRUFBQXhKLFVBQUEwRixFQUFBMUYsVUFBQSxJQUFBd0osS0FHQW5LLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENrQixPQUFBLElBQzlDLElBQUErSixFQUFBbkwsRUFBQSxHQUNBb0wsRUFBQXBMLEVBQUEsR0FDQTJNLEVBQUEzTSxFQUFBLEdBQ0FxTCxFQUFBckwsRUFBQSxJQUVBLFNBQUFpUCxHQUNBLElBQUFDLEVBQUEsU0FBQXJELEdBRUEsU0FBQXFELElBQ0EsSUFBQWxELEVBQUEsT0FBQUgsS0FBQTZCLE1BQUFoTCxLQUFBaUwsWUFBQWpMLEtBRUEsT0FEQXNKLEVBQUFFLGFBQUFiLEVBQUExRyxNQUFBd0QsUUFDQTZELEVBVUEsT0FkQWxCLEVBQUFvRSxFQUFBckQsR0FNQXFELEVBQUF6TixVQUFBMEssS0FBQSxTQUFBbkssR0FDQSxxQkFBQUEsRUFDQSxPQUFBb0osRUFBQWxCLE9BQUFDLFFBQUFuSSxHQUVBLElBQUFtSCxFQUFBa0MsRUFBQTFHLE1BQUFzRSxNQUFBakgsR0FDQStLLEVBQUE1RCxHQUFBa0MsRUFBQTFHLE1BQUFmLFNBQUF1RixJQUFBLFVBQ0EsT0FBQWlDLEVBQUFsQixPQUFBRyxRQUFBYyxFQUFBeEIsaUJBQUF4SCxPQUFBSCxFQUFBcUosRUFBQTFHLE1BQUFmLFNBQUFsQixLQUFBd0osY0FBQWEsS0FFQW1DLEVBZkEsQ0FnQkt2QyxFQUFBckIsZ0JBQ0wyRCxFQUFBQyxnQkFDQSxJQUFBQyxFQUFBLFNBQUF0RCxHQUVBLFNBQUFzRCxJQUNBLElBQUFuRCxFQUFBLE9BQUFILEtBQUE2QixNQUFBaEwsS0FBQWlMLFlBQUFqTCxLQUVBLE9BREFzSixFQUFBRSxhQUFBYixFQUFBMUcsTUFBQXNELE9BQ0ErRCxFQVVBLE9BZEFsQixFQUFBcUUsRUFBQXRELEdBTUFzRCxFQUFBMU4sVUFBQTBLLEtBQUEsU0FBQW5LLEdBQ0Esb0JBQUFBLEVBQ0EsT0FBQW9KLEVBQUFsQixPQUFBQyxRQUFBbkksR0FFQSxJQUFBbUgsRUFBQWtDLEVBQUExRyxNQUFBc0UsTUFBQWpILEdBQ0ErSyxFQUFBNUQsR0FBQWtDLEVBQUExRyxNQUFBZixTQUFBdUYsSUFBQSxVQUNBLE9BQUFpQyxFQUFBbEIsT0FBQUcsUUFBQWMsRUFBQXhCLGlCQUFBeEgsT0FBQUgsRUFBQXFKLEVBQUExRyxNQUFBZixTQUFBbEIsS0FBQXdKLGNBQUFhLEtBRUFvQyxFQWZBLENBZ0JLeEMsRUFBQXJCLGdCQUNMMkQsRUFBQUUsZUFDQSxJQUFBQyxFQUFBLFNBQUF2RCxHQUVBLFNBQUF1RCxJQUNBLElBQUFwRCxFQUFBLE9BQUFILEtBQUE2QixNQUFBaEwsS0FBQWlMLFlBQUFqTCxLQUVBLE9BREFzSixFQUFBRSxhQUFBYixFQUFBMUcsTUFBQXFELE9BQ0FnRSxFQVVBLE9BZEFsQixFQUFBc0UsRUFBQXZELEdBTUF1RCxFQUFBM04sVUFBQTBLLEtBQUEsU0FBQW5LLEdBQ0Esb0JBQUFBLEVBQ0EsT0FBQW9KLEVBQUFsQixPQUFBQyxRQUFBbkksR0FFQSxJQUFBbUgsRUFBQWtDLEVBQUExRyxNQUFBc0UsTUFBQWpILEdBQ0ErSyxFQUFBNUQsR0FBQWtDLEVBQUExRyxNQUFBZixTQUFBdUYsSUFBQSxVQUNBLE9BQUFpQyxFQUFBbEIsT0FBQUcsUUFBQWMsRUFBQXhCLGlCQUFBeEgsT0FBQUgsRUFBQXFKLEVBQUExRyxNQUFBZixTQUFBbEIsS0FBQXdKLGNBQUFhLEtBRUFxQyxFQWZBLENBZ0JLekMsRUFBQXJCLGdCQUNMMkQsRUFBQUcsZUF0REEsQ0F1RENsUCxFQUFBK08sbUJBQUEvTyxFQUFBK08sb0RDdkVEbk8sT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q2tCLE9BQUEsSUFLOUNsQixFQUFBMkIsWUFKQSxTQUFBd04sR0FFQSxNQUFBcEIsTUFEQSw2QkFBQW9CLEdBQUEsS0FBQUEsR0FBQSxvQ0NGQXZPLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENrQixPQUFBLElBQzlDLElBQUFrSixFQUFBLFdBQ0EsU0FBQUEsRUFBQWYsR0FDQTdHLEtBQUFtQyxLQUFBLFVBQ0FuQyxLQUFBNkcsUUFnQkEsT0FkQWUsRUFBQTdJLFVBQUFrSixVQUFBLFdBQXlELFVBQ3pETCxFQUFBN0ksVUFBQW1KLFVBQUEsV0FBeUQsVUFDekROLEVBQUE3SSxVQUFBZ0MsSUFBQSxTQUFBMEcsRUFBQUUsR0FDQSxPQUFBQSxFQUFBM0gsS0FBQTZHLFFBRUFlLEVBQUE3SSxVQUFBeU0sUUFBQSxTQUFBL0QsRUFBQUUsR0FDQSxPQUFBQSxFQUFBM0gsS0FBQTZHLFFBRUFlLEVBQUE3SSxVQUFBMk0sV0FBQSxTQUFBbEwsR0FDQSxXQUFBb0gsRUFBQTVILEtBQUE2RyxRQUVBZSxFQUFBN0ksVUFBQTZLLFdBQUEsU0FBQXBKLEdBQ0EsV0FBQW9ILEVBQUFwSCxFQUFBUixLQUFBNkcsU0FFQWUsRUFuQkEsR0FxQkFwSyxFQUFBb0ssa0RDdEJBeEosT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q2tCLE9BQUEsSUFDOUMsSUFBQWdKLEVBQUEsV0FDQSxTQUFBQSxFQUFBaEosR0FDQXNCLEtBQUFtQyxLQUFBLFVBQ0FuQyxLQUFBdEIsUUFnQkEsT0FkQWdKLEVBQUEzSSxVQUFBa0osVUFBQSxXQUF5RCxVQUN6RFAsRUFBQTNJLFVBQUFtSixVQUFBLFdBQXlELFVBQ3pEUixFQUFBM0ksVUFBQWdDLElBQUEsU0FBQTBHLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQXpILEtBQUF0QixRQUVBZ0osRUFBQTNJLFVBQUF5TSxRQUFBLFNBQUEvRCxFQUFBRSxHQUNBLE9BQUFGLEVBQUF6SCxLQUFBdEIsUUFFQWdKLEVBQUEzSSxVQUFBMk0sV0FBQSxTQUFBbEwsR0FDQSxXQUFBa0gsRUFBQWxILEVBQUFSLEtBQUF0QixTQUVBZ0osRUFBQTNJLFVBQUE2SyxXQUFBLFNBQUFwSixHQUNBLFdBQUFrSCxFQUFBMUgsS0FBQXRCLFFBRUFnSixFQW5CQSxHQXFCQWxLLEVBQUFrSyxrREN0QkF0SixPQUFBQyxlQUFBYixFQUFBLGNBQThDa0IsT0FBQSxJQUM5QyxJQUFBdUwsRUFBQTNNLEVBQUEsR0FDQXNQLEVBQUF0UCxFQUFBLEdBQ0F1UCxFQUFBdlAsRUFBQSxHQUNBd04sRUFBQXhOLEVBQUEsR0FDQXdQLEVBQUF4UCxFQUFBLEdBQ0F5UCxFQUFBelAsRUFBQSxHQUNBMFAsRUFBQTFQLEVBQUEsSUFFQSxTQUFBMlAsR0FDQUEsRUFBQUMsT0FBQSxJQUFBTixFQUFBTCxpQkFBQUcsYUFDQU8sRUFBQUUsT0FBQSxJQUFBUCxFQUFBTCxpQkFBQUUsYUFDQVEsRUFBQUcsUUFBQSxJQUFBUixFQUFBTCxpQkFBQUMsY0FJQVMsRUFBQUksU0FIQSxTQUFBakUsR0FDQSxXQUFBYSxFQUFBakIsZUFBQUksSUFNQTZELEVBQUF2TixNQUhBLFNBQUEwSixHQUNBLFdBQUF5RCxFQUFBUixZQUFBakQsSUFNQTZELEVBQUFLLFFBSEEsU0FBQXhPLEVBQUFzSyxHQUNBLFdBQUEwQixFQUFBWixjQUFBcEwsRUFBQXNLLElBTUE2RCxFQUFBTSxZQUhBLFdBQ0EsT0FBQVQsRUFBQVYsV0FBQTNNLFVBTUF3TixFQUFBbE0sSUFIQSxTQUFBd0osR0FDQSxXQUFBeUMsRUFBQTFDLFVBQUFDLElBTUEwQyxFQUFBM04sSUFIQSxXQUNBLFdBQUF5TixFQUFBaEMsd0JBekJBLENBNEJDdk4sRUFBQXlQLFNBQUF6UCxFQUFBeVAiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIHVucmVhY2hhYmxlKGEpIHtcbiAgICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIE9iamVjdEtleXMob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaik7XG59XG52YXIgU2V0cztcbihmdW5jdGlvbiAoU2V0cykge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShhcnJheSkge1xuICAgICAgICB2YXIgc2V0ID0gbmV3IFNldEltcGwoKTtcbiAgICAgICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodikgeyByZXR1cm4gc2V0LmFkZCh2KTsgfSk7XG4gICAgICAgIHJldHVybiBzZXQ7XG4gICAgfVxuICAgIFNldHMuY3JlYXRlID0gY3JlYXRlO1xufSkoU2V0cyB8fCAoU2V0cyA9IHt9KSk7XG52YXIgU2V0SW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXRJbXBsKCkge1xuICAgICAgICB0aGlzLml0ZW1zID0gW107XG4gICAgICAgIHRoaXMuaW5kZXggPSB7fTtcbiAgICB9XG4gICAgU2V0SW1wbC5jcmVhdGUgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgdmFyIHNldCA9IG5ldyBTZXRJbXBsKCk7XG4gICAgICAgIGFycmF5LmZvckVhY2goZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHNldC5hZGQodik7IH0pO1xuICAgICAgICByZXR1cm4gc2V0O1xuICAgIH07XG4gICAgU2V0SW1wbC5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMubGVuZ3RoO1xuICAgIH07XG4gICAgU2V0SW1wbC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuY29uY2F0KFtdKTtcbiAgICB9O1xuICAgIFNldEltcGwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBTZXRzLmNyZWF0ZSh0aGlzLml0ZW1zKTtcbiAgICB9O1xuICAgIFNldEltcGwucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoZikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpXTtcbiAgICAgICAgICAgIGlmICghZihpdGVtKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2V0SW1wbC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBvdGhlci5zaXplKCkgPT0gdGhpcy5zaXplKCkgJiYgdGhpcy5pdGVtcy5ldmVyeShmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gb3RoZXIuY29udGFpbnMoaXRlbSk7IH0pO1xuICAgIH07XG4gICAgU2V0SW1wbC5wcm90b3R5cGUuYWxsID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAgICAgdmFyIGxlbmd0aCA9IGl0ZW1zLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgIGlmICghZihpdGVtKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFNldEltcGwucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSBuZXcgU2V0SW1wbCgpO1xuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIG91dHB1dC5hZGQoZihpdGVtKSk7IH0pO1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG4gICAgU2V0SW1wbC5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGhhc2ggPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gdGhpcy5jb250YWluc0hhc2goaGFzaCk7XG4gICAgfTtcbiAgICBTZXRJbXBsLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGhhc2ggPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICBpZiAoIXRoaXMuY29udGFpbnNIYXNoKGhhc2gpKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4W2hhc2hdID0geyBpbmRleDogdGhpcy5pdGVtcy5sZW5ndGgsIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIFNldEltcGwucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgdmFsdWVIYXNoID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgdmFyIGV4aXN0aW5nSXRlbSA9IHRoaXMuaW5kZXhbdmFsdWVIYXNoXTtcbiAgICAgICAgaWYgKGV4aXN0aW5nSXRlbSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMuaW5kZXhbdmFsdWVIYXNoXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IGV4aXN0aW5nSXRlbS5pbmRleCArIDE7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4W3RoaXMuaXRlbXNbaV0udG9TdHJpbmcoKV0uaW5kZXgtLTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLml0ZW1zLnNwbGljZShleGlzdGluZ0l0ZW0uaW5kZXgsIDEpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFNldEltcGwucHJvdG90eXBlLnVuaW9uID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSBuZXcgU2V0SW1wbCgpO1xuICAgICAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIG91dHB1dC5hZGQoaXRlbSk7IH0pO1xuICAgICAgICBvdGhlci5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBvdXRwdXQuYWRkKGl0ZW0pOyB9KTtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xuICAgIFNldEltcGwucHJvdG90eXBlLmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgICB2YXIgb3V0cHV0ID0gbmV3IFNldEltcGwoKTtcbiAgICAgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICBpZiAob3RoZXIuY29udGFpbnMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQuYWRkKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG4gICAgU2V0SW1wbC5wcm90b3R5cGUuc3VidHJhY3QgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IG5ldyBTZXRJbXBsKCk7XG4gICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgaWYgKCFvdGhlci5jb250YWlucyhpdGVtKSkge1xuICAgICAgICAgICAgICAgIG91dHB1dC5hZGQoaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbiAgICBTZXRJbXBsLnByb3RvdHlwZS5pc1N1YnNldE9mID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLml0ZW1zW2ldO1xuICAgICAgICAgICAgaWYgKCFvdGhlci5jb250YWlucyhpdGVtKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFNldEltcGwucHJvdG90eXBlLmlzRGlzam9pbnQgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaV07XG4gICAgICAgICAgICBpZiAob3RoZXIuY29udGFpbnMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBTZXRJbXBsLnByb3RvdHlwZS5jb250YWluc0hhc2ggPSBmdW5jdGlvbiAoaGFzaCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodGhpcy5pbmRleCwgaGFzaCk7XG4gICAgfTtcbiAgICByZXR1cm4gU2V0SW1wbDtcbn0oKSk7XG5mdW5jdGlvbiBxdW90ZShzKSB7XG4gICAgaWYgKHMuaW5kZXhPZignXFwnJykgPCAwKSB7XG4gICAgICAgIHJldHVybiBcIidcIiArIHMgKyBcIidcIjtcbiAgICB9XG4gICAgcmV0dXJuICdcIicgKyBzLnJlcGxhY2UoJ1wiJywgJ1xcXFxcIicpICsgJ1wiJztcbn1cbmV4cG9ydHMucXVvdGUgPSBxdW90ZTtcbnZhciBUeXBlcztcbihmdW5jdGlvbiAoVHlwZXMpIHtcbiAgICBmdW5jdGlvbiBpc051bGwoYSkge1xuICAgICAgICByZXR1cm4gYS50eXBlID09PSAnbnVsbCc7XG4gICAgfVxuICAgIFR5cGVzLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBmdW5jdGlvbiBpc1N0cmluZyhhKSB7XG4gICAgICAgIHJldHVybiBhLnR5cGUgPT09ICdzdHJpbmcnO1xuICAgIH1cbiAgICBUeXBlcy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKGEpIHtcbiAgICAgICAgcmV0dXJuIGEudHlwZSA9PT0gJ251bWJlcic7XG4gICAgfVxuICAgIFR5cGVzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKGEpIHtcbiAgICAgICAgcmV0dXJuIGEudHlwZSA9PT0gJ2Jvb2xlYW4nO1xuICAgIH1cbiAgICBUeXBlcy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG4gICAgZnVuY3Rpb24gaXNBcnJheShhKSB7XG4gICAgICAgIHJldHVybiBhLnR5cGUgPT09ICdhcnJheSc7XG4gICAgfVxuICAgIFR5cGVzLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KGEpIHtcbiAgICAgICAgcmV0dXJuIGEudHlwZSA9PT0gJ29iamVjdCc7XG4gICAgfVxuICAgIFR5cGVzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgZnVuY3Rpb24gaXNVbmlvbihhKSB7XG4gICAgICAgIHJldHVybiBhLnR5cGUgPT09ICd1bmlvbic7XG4gICAgfVxuICAgIFR5cGVzLmlzVW5pb24gPSBpc1VuaW9uO1xuICAgIGZ1bmN0aW9uIGlzTnVsbGFibGUoYSkge1xuICAgICAgICByZXR1cm4gYS50eXBlID09PSAnbnVsbGFibGUnO1xuICAgIH1cbiAgICBUeXBlcy5pc051bGxhYmxlID0gaXNOdWxsYWJsZTtcbiAgICBmdW5jdGlvbiBpc01hcChhKSB7XG4gICAgICAgIHJldHVybiBhLnR5cGUgPT09ICdtYXAnO1xuICAgIH1cbiAgICBUeXBlcy5pc01hcCA9IGlzTWFwO1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nSW50ZXJuYWwoYSwgdmlzaXRlZCwgaW5kaWNlcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpc2l0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh2aXNpdGVkW2ldID09PSBhKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc29sdmVkUmVjdXJzaW9uSW5kZXggPSBpbmRpY2VzLm1hcFtpXTtcbiAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZWRSZWN1cnNpb25JbmRleCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkUmVjdXJzaW9uSW5kZXggPSBpbmRpY2VzLm1hcFtpXSA9IGluZGljZXMuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNlcy5jdXJyZW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAneyQnICsgcmVzb2x2ZWRSZWN1cnNpb25JbmRleCArICd9JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOdWxsKGEpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ051bGwnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzU3RyaW5nKGEpKSB7XG4gICAgICAgICAgICBpZiAoYS52YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdTdHJpbmcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICdTdHJpbmc8JyArIHF1b3RlKGEudmFsdWUpICsgJz4nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTnVtYmVyKGEpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ051bWJlcic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNCb29sZWFuKGEpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0Jvb2xlYW4nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTWFwKGEpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ01hcDwnICsgdG9TdHJpbmdJbnRlcm5hbChhLnZhbHVlLCB2aXNpdGVkLmNvbmNhdChbYV0pLCBpbmRpY2VzKSArICc+JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc051bGxhYmxlKGEpKSB7XG4gICAgICAgICAgICB2YXIgc3VidHlwZVN0ciA9IHRvU3RyaW5nSW50ZXJuYWwoYS5zdWJ0eXBlLCB2aXNpdGVkLmNvbmNhdChbYV0pLCBpbmRpY2VzKTtcbiAgICAgICAgICAgIHJldHVybiAnTnVsbGFibGU8JyArIHN1YnR5cGVTdHIgKyAnPic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNBcnJheShhKSkge1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lZFN0ciA9IHRvU3RyaW5nSW50ZXJuYWwoYS5jb250YWluZWQsIHZpc2l0ZWQuY29uY2F0KFthXSksIGluZGljZXMpO1xuICAgICAgICAgICAgcmV0dXJuICdBcnJheTwnICsgY29udGFpbmVkU3RyICsgJz4nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KGEpKSB7XG4gICAgICAgICAgICBpZiAoYS5zcGVjID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ09iamVjdCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmV3VmlzaXRlZCA9IHZpc2l0ZWQuY29uY2F0KFthXSk7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdEtleXMoYS5zcGVjKTtcbiAgICAgICAgICAgIGtleXMuc29ydCgpO1xuICAgICAgICAgICAgdmFyIGtleVBhaXJzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGtleXNfMSA9IGtleXM7IF9pIDwga2V5c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzXzFbX2ldO1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChhLnNwZWMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlU3RyID0gdG9TdHJpbmdJbnRlcm5hbChhLnNwZWNba2V5XSwgbmV3VmlzaXRlZCwgaW5kaWNlcyk7XG4gICAgICAgICAgICAgICAgICAgIGtleVBhaXJzLnB1c2gocXVvdGUoa2V5KSArICc6ICcgKyB2YWx1ZVN0cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICd7JyArIGtleVBhaXJzLmpvaW4oJywgJykgKyAnfSc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNVbmlvbihhKSkge1xuICAgICAgICAgICAgdmFyIG5ld1Zpc2l0ZWQgPSB2aXNpdGVkLmNvbmNhdChbYV0pO1xuICAgICAgICAgICAgdmFyIHR5cGVTdHJpbmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIF9iID0gYS50eXBlczsgX2EgPCBfYi5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IF9iW19hXTtcbiAgICAgICAgICAgICAgICB2YXIgdHlwZVN0ciA9IHRvU3RyaW5nSW50ZXJuYWwodHlwZSwgbmV3VmlzaXRlZCwgaW5kaWNlcyk7XG4gICAgICAgICAgICAgICAgdHlwZVN0cmluZ3MucHVzaCh0eXBlU3RyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0eXBlU3RyaW5ncy5qb2luKCd8Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVucmVhY2hhYmxlKGEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b1N0cmluZyhhKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZ0ludGVybmFsKGEsIFtdLCB7IGN1cnJlbnQ6IDAsIG1hcDoge30gfSk7XG4gICAgfVxuICAgIFR5cGVzLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgVHlwZXMuTnVsbCA9IHsgdHlwZTogJ251bGwnIH07XG4gICAgVHlwZXMuTnVtYmVyID0geyB0eXBlOiAnbnVtYmVyJyB9O1xuICAgIFR5cGVzLlN0cmluZyA9IHsgdHlwZTogJ3N0cmluZycsIHZhbHVlOiBudWxsIH07XG4gICAgZnVuY3Rpb24gU3RyaW5nVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogJ3N0cmluZycsIHZhbHVlOiB2YWx1ZSB9O1xuICAgIH1cbiAgICBUeXBlcy5TdHJpbmdWYWx1ZSA9IFN0cmluZ1ZhbHVlO1xuICAgIFR5cGVzLkJvb2xlYW4gPSB7IHR5cGU6ICdib29sZWFuJyB9O1xuICAgIGZ1bmN0aW9uIE1hcChjb250YWluZWQpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogJ21hcCcsIHZhbHVlOiBjb250YWluZWQgfTtcbiAgICB9XG4gICAgVHlwZXMuTWFwID0gTWFwO1xuICAgIGZ1bmN0aW9uIE51bGxhYmxlKHN1YnR5cGUpIHtcbiAgICAgICAgd2hpbGUgKHN1YnR5cGUudHlwZSA9PT0gJ251bGxhYmxlJykge1xuICAgICAgICAgICAgc3VidHlwZSA9IHN1YnR5cGUuc3VidHlwZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOdWxsKHN1YnR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gVHlwZXMuTnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB0eXBlOiAnbnVsbGFibGUnLCBzdWJ0eXBlOiBzdWJ0eXBlIH07XG4gICAgfVxuICAgIFR5cGVzLk51bGxhYmxlID0gTnVsbGFibGU7XG4gICAgZnVuY3Rpb24gQXJyYXkoY29udGFpbmVkKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICdhcnJheScsIGNvbnRhaW5lZDogY29udGFpbmVkIH07XG4gICAgfVxuICAgIFR5cGVzLkFycmF5ID0gQXJyYXk7XG4gICAgZnVuY3Rpb24gT2JqZWN0KHNwZWMpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogJ29iamVjdCcsIHNwZWM6IHNwZWMgfHwgbnVsbCB9O1xuICAgIH1cbiAgICBUeXBlcy5PYmplY3QgPSBPYmplY3Q7XG4gICAgZnVuY3Rpb24gYWxsTnVsbGFibGUodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzLmV2ZXJ5KGZ1bmN0aW9uICh0KSB7IHJldHVybiBpc051bGxhYmxlKHQpOyB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gVW5pb24odHlwZXMpIHtcbiAgICAgICAgdmFyIHVucGFja2VkVHlwZXMgPSBbXTtcbiAgICAgICAgdHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChpc1VuaW9uKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlLnR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHN1YnR5cGUpIHsgcmV0dXJuIHVucGFja2VkVHlwZXMucHVzaChzdWJ0eXBlKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1bnBhY2tlZFR5cGVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFsbE51bGxhYmxlKHVucGFja2VkVHlwZXMpKSB7XG4gICAgICAgICAgICB2YXIgYWxsU3VidHlwZXMgPSB1bnBhY2tlZFR5cGVzLm1hcChmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5zdWJ0eXBlOyB9KTtcbiAgICAgICAgICAgIHJldHVybiBOdWxsYWJsZShVbmlvbihhbGxTdWJ0eXBlcykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICd1bmlvbicsIHR5cGVzOiB1bnBhY2tlZFR5cGVzIH07XG4gICAgfVxuICAgIFR5cGVzLlVuaW9uID0gVW5pb247XG4gICAgZnVuY3Rpb24gZXF1YWxzSW50ZXJuYWwoYSwgYiwgdmVyaWZpZWQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJpZmllZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHZlcmlmaWVkVHlwZSA9IHZlcmlmaWVkW2ldO1xuICAgICAgICAgICAgaWYgKGEgPT09IHZlcmlmaWVkVHlwZS5hICYmIGIgPT09IHZlcmlmaWVkVHlwZS5iKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTnVsbChhKSAmJiBpc051bGwoYikpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzU3RyaW5nKGEpICYmIGlzU3RyaW5nKGIpKSB7XG4gICAgICAgICAgICByZXR1cm4gYS52YWx1ZSA9PT0gYi52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc051bWJlcihhKSAmJiBpc051bWJlcihiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNCb29sZWFuKGEpICYmIGlzQm9vbGVhbihiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNOdWxsYWJsZShhKSAmJiBpc051bGxhYmxlKGIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZXF1YWxzSW50ZXJuYWwoYS5zdWJ0eXBlLCBiLnN1YnR5cGUsIHZlcmlmaWVkLmNvbmNhdChbeyBhOiBhLCBiOiBiIH1dKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNNYXAoYSkgJiYgaXNNYXAoYikpIHtcbiAgICAgICAgICAgIHJldHVybiBlcXVhbHNJbnRlcm5hbChhLnZhbHVlLCBiLnZhbHVlLCB2ZXJpZmllZC5jb25jYXQoW3sgYTogYSwgYjogYiB9XSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQXJyYXkoYSkgJiYgaXNBcnJheShiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVxdWFsc0ludGVybmFsKGEuY29udGFpbmVkLCBiLmNvbnRhaW5lZCwgdmVyaWZpZWQuY29uY2F0KFt7IGE6IGEsIGI6IGIgfV0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdChhKSAmJiBpc09iamVjdChiKSkge1xuICAgICAgICAgICAgdmFyIGFTcGVjXzEgPSBhLnNwZWM7XG4gICAgICAgICAgICB2YXIgYlNwZWNfMSA9IGIuc3BlYztcbiAgICAgICAgICAgIGlmIChhU3BlY18xID09IG51bGwgJiYgYlNwZWNfMSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhU3BlY18xICE9IG51bGwgJiYgYlNwZWNfMSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFLZXlzID0gU2V0cy5jcmVhdGUoT2JqZWN0S2V5cyhhU3BlY18xKSk7XG4gICAgICAgICAgICAgICAgdmFyIGJLZXlzID0gU2V0cy5jcmVhdGUoT2JqZWN0S2V5cyhiU3BlY18xKSk7XG4gICAgICAgICAgICAgICAgdmFyIGludGVyc2VjdGlvbiA9IGFLZXlzLmludGVyc2VjdGlvbihiS2V5cyk7XG4gICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvbi5zaXplKCkgIT09IGFLZXlzLnNpemUoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBuZXdWZXJpZmllZF8xID0gdmVyaWZpZWQuY29uY2F0KFt7IGE6IGEsIGI6IGIgfV0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb24uYWxsKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGVxdWFsc0ludGVybmFsKGFTcGVjXzFba2V5XSwgYlNwZWNfMVtrZXldLCBuZXdWZXJpZmllZF8xKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNVbmlvbihhKSAmJiBpc1VuaW9uKGIpKSB7XG4gICAgICAgICAgICB2YXIgc29ydGVkQVR5cGVzID0gYS50eXBlcztcbiAgICAgICAgICAgIHZhciBzb3J0ZWRCVHlwZXMgPSBiLnR5cGVzO1xuICAgICAgICAgICAgc29ydGVkQVR5cGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIHRvU3RyaW5nKGEpLmxvY2FsZUNvbXBhcmUodG9TdHJpbmcoYikpOyB9KTtcbiAgICAgICAgICAgIHNvcnRlZEJUeXBlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiB0b1N0cmluZyhhKS5sb2NhbGVDb21wYXJlKHRvU3RyaW5nKGIpKTsgfSk7XG4gICAgICAgICAgICBpZiAoc29ydGVkQVR5cGVzLmxlbmd0aCAhPT0gc29ydGVkQlR5cGVzLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB2YXIgbmV3VmVyaWZpZWQgPSB2ZXJpZmllZC5jb25jYXQoW3sgYTogYSwgYjogYiB9XSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvcnRlZEFUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghZXF1YWxzSW50ZXJuYWwoc29ydGVkQVR5cGVzW2ldLCBzb3J0ZWRCVHlwZXNbaV0sIG5ld1ZlcmlmaWVkKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gZXF1YWxzSW50ZXJuYWwoYSwgYiwgW10pO1xuICAgIH1cbiAgICBUeXBlcy5lcXVhbHMgPSBlcXVhbHM7XG4gICAgLyoqXG4gICAgICogVGhpcyBpcyB1c2VkIGZvciBidWlsZGluZyB1cCBhIHR5cGUuIEl0J3MgdGhlIGVxdWl2YWxlbnQgb2YgYCZgIGluIFR5cGVTY3JpcHQuXG4gICAgICogVGhpcyBzaG91bGQgcmV0dXJuIG51bGwgZm9yIGV2ZXJ5dGhpbmcgZXhjZXB0IG9iamVjdHMgKHNpbmNlIGl0J3Mgbm90XG4gICAgICogcG9zc2libGUgdG8gaGF2ZSBhIHVuaW9uIG9mIGFueXRoaW5nIGJ1dCBvYmplY3RzKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21iaW5lKGEsIGIpIHtcbiAgICAgICAgaWYgKGlzTnVsbGFibGUoYSkpIHtcbiAgICAgICAgICAgIGlmIChpc051bGxhYmxlKGIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbWJpbmVkU3VidHlwZSA9IGNvbWJpbmUoYS5zdWJ0eXBlLCBiLnN1YnR5cGUpO1xuICAgICAgICAgICAgICAgIGlmIChjb21iaW5lZFN1YnR5cGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTnVsbGFibGUoY29tYmluZWRTdWJ0eXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNOdWxsKGEpKSB7XG4gICAgICAgICAgICBpZiAoaXNOdWxsKGIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFR5cGVzLk51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNOdW1iZXIoYSkpIHtcbiAgICAgICAgICAgIGlmIChpc051bWJlcihiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBUeXBlcy5OdW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTdHJpbmcoYSkpIHtcbiAgICAgICAgICAgIGlmIChpc1N0cmluZyhiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBUeXBlcy5TdHJpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNCb29sZWFuKGEpKSB7XG4gICAgICAgICAgICBpZiAoaXNCb29sZWFuKGIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFR5cGVzLkJvb2xlYW47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNVbmlvbihhKSkge1xuICAgICAgICAgICAgaWYgKGVxdWFscyhhLCBiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQXJyYXkoYSkpIHtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KGIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNNYXAoYSkgJiYgaXNNYXAoYikpIHtcbiAgICAgICAgICAgIHZhciBjb21iaW5lZFZhbHVlID0gY29tYmluZShhLnZhbHVlLCBiLnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChjb21iaW5lZFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWFwKGNvbWJpbmVkVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KGEpICYmIGlzT2JqZWN0KGIpKSB7XG4gICAgICAgICAgICB2YXIgYVNwZWNfMiA9IGEuc3BlYztcbiAgICAgICAgICAgIHZhciBiU3BlY18yID0gYi5zcGVjO1xuICAgICAgICAgICAgaWYgKGFTcGVjXzIgPT0gbnVsbCAmJiBiU3BlY18yID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFTcGVjXzIgPT0gbnVsbCB8fCBiU3BlY18yID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhUHJvcGVydHlJU2V0ID0gU2V0cy5jcmVhdGUoT2JqZWN0S2V5cyhhU3BlY18yKSk7XG4gICAgICAgICAgICB2YXIgYlByb3BlcnR5SVNldCA9IFNldHMuY3JlYXRlKE9iamVjdEtleXMoYlNwZWNfMikpO1xuICAgICAgICAgICAgdmFyIHByb3BlcnRpZXNVbmlvbiA9IGFQcm9wZXJ0eUlTZXQudW5pb24oYlByb3BlcnR5SVNldCk7XG4gICAgICAgICAgICB2YXIgY29tYmluZWRTcGVjXzEgPSB7fTtcbiAgICAgICAgICAgIGlmICghcHJvcGVydGllc1VuaW9uLmFsbChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgICAgIHZhciBhUHJvcCA9IGFTcGVjXzJbcHJvcF07XG4gICAgICAgICAgICAgICAgdmFyIGJQcm9wID0gYlNwZWNfMltwcm9wXTtcbiAgICAgICAgICAgICAgICBpZiAoYVByb3AgIT0gbnVsbCAmJiBiUHJvcCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb21iaW5lZCA9IGNvbWJpbmUoYVByb3AsIGJQcm9wKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbWJpbmVkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb21iaW5lZFNwZWNfMVtwcm9wXSA9IGNvbWJpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhUHJvcCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbWJpbmVkU3BlY18xW3Byb3BdID0gYVByb3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb21iaW5lZFNwZWNfMVtwcm9wXSA9IGJQcm9wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0KGNvbWJpbmVkU3BlY18xKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgVHlwZXMuY29tYmluZSA9IGNvbWJpbmU7XG4gICAgLyoqXG4gICAgICogVGhpcyByZXR1cm5zIGEgdHlwZSB0aGF0IHdpbGwgYWNjZXB0IGVpdGhlciB0aGlzIHR5cGUgb3IgdGhlIG90aGVyIHR5cGVcbiAgICAgKiB3aGVuIGl0IGlzIGFzc2lnbmVkIHRvIHRoZSByZXN1bHRpbmcgdHlwZS4gVGhpcyBvbmUgc2hvdWxkIG5ldmVyIGZhaWwsXG4gICAgICogc2luY2Ugd2UgY2FuIGFsd2F5cyBkZWZhdWx0IHRvIGEgdW5pb24gdHlwZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlmeShhLCBiKSB7XG4gICAgICAgIGlmICgoaXNOdWxsKGEpIHx8IGlzTnVsbGFibGUoYSkpICYmIChpc051bGwoYikgfHwgaXNOdWxsYWJsZShiKSkpIHtcbiAgICAgICAgICAgIC8vIEVpdGhlciBib3RoIGFyZSBudWxsYWJsZSwgb3Igb25lIGlzIG51bGxhYmxlIGFuZCB0aGUgb3RoZXIgaXMgbnVsbFxuICAgICAgICAgICAgaWYgKGlzTnVsbGFibGUoYSkgJiYgaXNOdWxsYWJsZShiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBOdWxsYWJsZSh1bmlmeShhLnN1YnR5cGUsIGIuc3VidHlwZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNOdWxsYWJsZShhKSkge1xuICAgICAgICAgICAgICAgIC8vIGIgbXVzdCBiZSBudWxsXG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc051bGxhYmxlKGIpKSB7XG4gICAgICAgICAgICAgICAgLy8gYSBtdXN0IGJlIG51bGxcbiAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzTnVsbChhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNOdWxsKGIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5yZWFjaGFibGUoYSksIHVucmVhY2hhYmxlKGIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTnVsbChhKSB8fCBpc051bGxhYmxlKGEpKSB7XG4gICAgICAgICAgICAvLyBPbmUgb2YgdGhlbSBpcyBudWxsIG9yIG51bGxhYmxlXG4gICAgICAgICAgICBpZiAoaXNOdWxsKGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE51bGxhYmxlKGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNOdWxsYWJsZShhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBOdWxsYWJsZSh1bmlmeShhLnN1YnR5cGUsIGIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bnJlYWNoYWJsZShhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc051bGwoYikgfHwgaXNOdWxsYWJsZShiKSkge1xuICAgICAgICAgICAgaWYgKGlzTnVsbChiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBOdWxsYWJsZShhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzTnVsbGFibGUoYikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTnVsbGFibGUodW5pZnkoYSwgYi5zdWJ0eXBlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5yZWFjaGFibGUoYik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFVuaW9uKFthLCBiXSk7XG4gICAgfVxuICAgIFR5cGVzLnVuaWZ5ID0gdW5pZnk7XG4gICAgZnVuY3Rpb24gaW5mZXIob2JqKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIFR5cGVzLk51bWJlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIFR5cGVzLlN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHJldHVybiBUeXBlcy5Cb29sZWFuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gVHlwZXMuTnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYmogJiYgdHlwZW9mIG9iai5sZW5ndGggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB2YXIga25vd25UeXBlcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5mZXJyZWQgPSBpbmZlcihvYmpbaV0pO1xuICAgICAgICAgICAgICAgIGlmIChpbmZlcnJlZCA9PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtub3duVHlwZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVxdWFscyhrbm93blR5cGVzW2pdLCBpbmZlcnJlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAga25vd25UeXBlcy5wdXNoKGluZmVycmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa25vd25UeXBlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkoa25vd25UeXBlc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkoVW5pb24oa25vd25UeXBlcykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIFR5cGVzLmluZmVyID0gaW5mZXI7XG59KShUeXBlcyA9IGV4cG9ydHMuVHlwZXMgfHwgKGV4cG9ydHMuVHlwZXMgPSB7fSkpO1xuLypcblxuXG5uYW1lc3BhY2UgVHlwZXMge1xuICBleHBvcnQgaW50ZXJmYWNlIEpzVHlwZTxUPiB7XG4gICAgaXNVbmtub3duKCk6IHRoaXMgaXMgSnNVbmtub3duXG4gICAgaXNOdWxsKCk6IHRoaXMgaXMgSnNOdWxsXG4gICAgaXNOdW1iZXIoKTogdGhpcyBpcyBKc051bWJlclxuICAgIGlzU3RyaW5nKCk6IHRoaXMgaXMgSnNTdHJpbmdcbiAgICBpc0Jvb2xlYW4oKTogdGhpcyBpcyBKc0Jvb2xlYW5cbiAgICBpc0FycmF5KCk6IHRoaXMgaXMgSnNBcnJheTxhbnksIEpzVHlwZTxhbnk+PlxuICAgIGlzQXJyYXlPZjxUPih0OiBKc1R5cGU8VD4pOiB0aGlzIGlzIEpzQXJyYXk8VCwgSnNUeXBlPFQ+PlxuICAgIGlzT2JqZWN0KCk6IHRoaXMgaXMgSnNPYmplY3RcbiAgICBpc01hcCgpOiB0aGlzIGlzIEpzTWFwPGFueSwgSnNUeXBlPGFueT4+XG4gICAgaXNNYXBPZjxUPih0OiBKc1R5cGU8VD4pOiB0aGlzIGlzIEpzTWFwPFQsIEpzVHlwZTxUPj5cbiAgICBpc0VxdWFsVG8ob3RoZXI6IEpzVHlwZTxhbnk+KTogYm9vbGVhblxuICAgIGlzTnVsbGFibGUoKTogdGhpcyBpcyBKc051bGxhYmxlPGFueT5cbiAgICBpc051bGxhYmxlT2Y8VD4odDogSnNUeXBlPFQ+KTogdGhpcyBpcyBKc051bGxhYmxlPFQ+XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBKc1Vua25vd24gZXh0ZW5kcyBKc1R5cGU8YW55PiB7XG4gICAgdHlwZTogJ3Vua25vd24nO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgSnNOdWxsIGV4dGVuZHMgSnNUeXBlPG51bGw+IHtcbiAgICB0eXBlOiAnbnVsbCc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBKc051bWJlciBleHRlbmRzIEpzVHlwZTxudW1iZXI+IHtcbiAgICB0eXBlOiAnbnVtYmVyJztcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIEpzU3RyaW5nIGV4dGVuZHMgSnNUeXBlPHN0cmluZz4ge1xuICAgIHR5cGU6ICdzdHJpbmcnO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgSnNCb29sZWFuIGV4dGVuZHMgSnNUeXBlPGJvb2xlYW4+IHtcbiAgICB0eXBlOiAnYm9vbGVhbic7XG4gIH1cbiAgZXhwb3J0IHR5cGUgSnNQcmltaXRpdmUgPSBKc051bWJlciB8IEpzU3RyaW5nIHwgSnNCb29sZWFuIHwgSnNOdWxsO1xuXG4gIGV4cG9ydCBpbnRlcmZhY2UgSnNOdWxsYWJsZTxUPiBleHRlbmRzIEpzVHlwZTxUfG51bGw+IHtcbiAgICB0eXBlOiAnbnVsbGFibGUnO1xuICAgIHN1YnR5cGU6IEpzVHlwZTxUPjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgSnNPYmplY3QgZXh0ZW5kcyBKc1R5cGU8T2JqZWN0PiB7XG4gICAgdHlwZTogJ29iamVjdCc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBKc01hcDxDb250YWluZWQsIEpzQ29udGFpbmVkIGV4dGVuZHMgSnNUeXBlPENvbnRhaW5lZD4+IGV4dGVuZHMgSnNUeXBlPE9iamVjdD4ge1xuICAgIHR5cGU6ICdtYXAnO1xuICAgIGNvbnRhaW5lZDogSnNDb250YWluZWQ7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBKc0FycmF5PENvbnRhaW5lZCwgSnNDb250YWluZWQgZXh0ZW5kcyBKc1R5cGU8Q29udGFpbmVkPj4gZXh0ZW5kcyBKc1R5cGU8QXJyYXk8Q29udGFpbmVkPj4ge1xuICAgIHR5cGU6ICdhcnJheSc7XG4gICAgY29udGFpbmVkOiBKc0NvbnRhaW5lZDtcbiAgfVxuXG4gIGFic3RyYWN0IGNsYXNzIEJhc2VKc1R5cGU8VD4gaW1wbGVtZW50cyBKc1R5cGU8VD4ge1xuICAgIGlzVW5rbm93bigpOiB0aGlzIGlzIEpzVW5rbm93biB7IHJldHVybiBmYWxzZSB9XG4gICAgaXNOdWxsKCk6IHRoaXMgaXMgSnNOdWxsIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBpc051bWJlcigpOiB0aGlzIGlzIEpzTnVtYmVyIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBpc1N0cmluZygpOiB0aGlzIGlzIEpzU3RyaW5nIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBpc0Jvb2xlYW4oKTogdGhpcyBpcyBKc0Jvb2xlYW4geyByZXR1cm4gZmFsc2UgfVxuICAgIGlzQXJyYXkoKTogdGhpcyBpcyBKc0FycmF5PGFueSwgSnNUeXBlPGFueT4+IHsgcmV0dXJuIGZhbHNlIH1cbiAgICBpc0FycmF5T2Y8VD4odDogSnNUeXBlPFQ+KTogdGhpcyBpcyBKc0FycmF5PFQsIEpzVHlwZTxUPj4geyByZXR1cm4gZmFsc2UgfVxuICAgIGlzT2JqZWN0KCk6IHRoaXMgaXMgSnNPYmplY3QgeyByZXR1cm4gZmFsc2UgfVxuICAgIGlzTWFwKCk6IHRoaXMgaXMgSnNNYXA8YW55LCBKc1R5cGU8YW55Pj4geyByZXR1cm4gZmFsc2UgfVxuICAgIGlzTWFwT2Y8VD4odDogSnNUeXBlPFQ+KTogdGhpcyBpcyBKc01hcDxULCBKc1R5cGU8VD4+IHsgcmV0dXJuIGZhbHNlIH1cbiAgICBpc0VxdWFsVG8ob3RoZXI6IEpzVHlwZTxhbnk+KTogYm9vbGVhbiB7IHJldHVybiBmYWxzZSB9XG4gICAgaXNOdWxsYWJsZSgpOiB0aGlzIGlzIEpzTnVsbGFibGU8YW55PiB7IHJldHVybiBmYWxzZSB9XG4gICAgaXNOdWxsYWJsZU9mPFQ+KHQ6IEpzVHlwZTxUPik6IHRoaXMgaXMgSnNOdWxsYWJsZTxUPiB7IHJldHVybiBmYWxzZSB9XG4gIH1cblxuICBjbGFzcyBKc1Vua25vd25JbXBsIGV4dGVuZHMgQmFzZUpzVHlwZTxhbnk+IGltcGxlbWVudHMgSnNVbmtub3duIHtcbiAgICB0eXBlOiAndW5rbm93bicgPSAndW5rbm93bic7XG4gICAgaXNVbmtub3duKCk6IHRoaXMgaXMgSnNVbmtub3duIHsgcmV0dXJuIHRydWUgfVxuICAgIGlzRXF1YWxUbyhvdGhlcjogSnNUeXBlPGFueT4pOiBib29sZWFuIHsgcmV0dXJuIGZhbHNlIH1cbiAgfVxuICBleHBvcnQgY29uc3QgdW5rbm93biA9IG5ldyBKc1Vua25vd25JbXBsKCk7XG5cbiAgY2xhc3MgSnNOdWxsYWJsZUltcGw8VD4gZXh0ZW5kcyBCYXNlSnNUeXBlPG51bGx8VD4gaW1wbGVtZW50cyBKc051bGxhYmxlPFQ+IHtcbiAgICB0eXBlOiAnbnVsbGFibGUnID0gJ251bGxhYmxlJztcbiAgICBzdWJ0eXBlOiBKc1R5cGU8VD47XG4gICAgY29uc3RydWN0b3Ioc3VidHlwZTogSnNUeXBlPFQ+KSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpcy5zdWJ0eXBlID0gc3VidHlwZTtcbiAgICB9XG4gICAgaXNOdWxsYWJsZSgpOiB0aGlzIGlzIEpzTnVsbGFibGU8YW55PiB7IHJldHVybiB0cnVlIH1cbiAgICBpc051bGxhYmxlT2Y8VD4odDogSnNUeXBlPFQ+KTogdGhpcyBpcyBKc051bGxhYmxlPFQ+IHtcbiAgICAgIHJldHVybiB0aGlzLnN1YnR5cGUuaXNFcXVhbFRvKHQpO1xuICAgIH1cbiAgfVxuXG4gIGNsYXNzIEpzTnVtYmVySW1wbCBleHRlbmRzIEJhc2VKc1R5cGU8bnVtYmVyPiBpbXBsZW1lbnRzIEpzTnVtYmVyIHtcbiAgICB0eXBlOiAnbnVtYmVyJyA9ICdudW1iZXInO1xuICAgIGlzTnVtYmVyKCk6IHRoaXMgaXMgSnNOdW1iZXIgeyByZXR1cm4gdHJ1ZSB9XG4gICAgaXNFcXVhbFRvKG90aGVyOiBKc1R5cGU8YW55Pik6IGJvb2xlYW4geyByZXR1cm4gb3RoZXIuaXNOdW1iZXIoKSB9XG4gIH1cbiAgZXhwb3J0IGNvbnN0IG51bWJlciA9IG5ldyBKc051bWJlckltcGwoKTtcblxuICBjbGFzcyBKc1N0cmluZ0ltcGwgZXh0ZW5kcyBCYXNlSnNUeXBlPHN0cmluZz4gaW1wbGVtZW50cyBKc1N0cmluZyB7XG4gICAgdHlwZTogJ3N0cmluZycgPSAnc3RyaW5nJztcbiAgICBpc1N0cmluZygpOiB0aGlzIGlzIEpzU3RyaW5nIHsgcmV0dXJuIHRydWUgfVxuICAgIGlzRXF1YWxUbyhvdGhlcjogSnNUeXBlPGFueT4pOiBib29sZWFuIHsgcmV0dXJuIG90aGVyLmlzU3RyaW5nKCkgfVxuICB9XG4gIGV4cG9ydCBjb25zdCBzdHJpbmcgPSBuZXcgSnNTdHJpbmdJbXBsKCk7XG5cbiAgY2xhc3MgSnNCb29sZWFuSW1wbCBleHRlbmRzIEJhc2VKc1R5cGU8Ym9vbGVhbj4gaW1wbGVtZW50cyBKc0Jvb2xlYW4ge1xuICAgIHR5cGU6ICdib29sZWFuJyA9ICdib29sZWFuJztcbiAgICBpc0Jvb2xlYW4oKTogdGhpcyBpcyBKc0Jvb2xlYW4geyByZXR1cm4gdHJ1ZSB9XG4gICAgaXNFcXVhbFRvKG90aGVyOiBKc1R5cGU8YW55Pik6IGJvb2xlYW4geyByZXR1cm4gb3RoZXIuaXNCb29sZWFuKCkgfVxuICB9XG4gIGV4cG9ydCBjb25zdCBib29sZWFuID0gbmV3IEpzQm9vbGVhbkltcGwoKTtcblxuICBjbGFzcyBKc0FycmF5SW1wbDxUPiBleHRlbmRzIEJhc2VKc1R5cGU8QXJyYXk8VD4+IGltcGxlbWVudHMgSnNBcnJheTxULCBKc1R5cGU8VD4+IHtcbiAgICB0eXBlOiAnYXJyYXknID0gJ2FycmF5JztcbiAgICBjb250YWluZWQ6IEpzVHlwZTxUPjtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZWQ6IEpzVHlwZTxUPikge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMuY29udGFpbmVkID0gY29udGFpbmVkO1xuICAgIH1cbiAgICBpc0Jvb2xlYW4oKTogdGhpcyBpcyBKc0Jvb2xlYW4geyByZXR1cm4gdHJ1ZSB9XG4gICAgaXNFcXVhbFRvKG90aGVyOiBKc1R5cGU8YW55Pik6IGJvb2xlYW4geyByZXR1cm4gb3RoZXIuaXNBcnJheU9mKHRoaXMuY29udGFpbmVkKSB9XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIGFycmF5PFQ+KGNvbnRhaW5lZDogSnNUeXBlPFQ+KTogSnNBcnJheTxULCBKc1R5cGU8VD4+IHtcbiAgICByZXR1cm4gbmV3IEpzQXJyYXlJbXBsKGNvbnRhaW5lZCk7XG4gIH1cbiAgXG5cbiAgY2xhc3MgVHlwZWQ8VD4ge1xuICAgIHZhbHVlOiBUO1xuICAgIHR5cGU6IFR5cGVzLkpzVHlwZTxUPjtcblxuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBULCB0eXBlOiBUeXBlcy5Kc1R5cGU8VD4pIHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgfXhcblxuICAgIGlzTnVtYmVyKCk6IHRoaXMgaXMgVHlwZWQ8bnVtYmVyPiB7XG4gICAgICByZXR1cm4gdGhpcy50eXBlLmlzTnVtYmVyKCk7XG4gICAgfVxuICAgIGlzU3RyaW5nKCk6IHRoaXMgaXMgVHlwZWQ8c3RyaW5nPiB7XG4gICAgICByZXR1cm4gdGhpcy50eXBlLmlzU3RyaW5nKCk7XG4gICAgfVxuICAgIGlzQm9vbGVhbigpOiB0aGlzIGlzIFR5cGVkPGJvb2xlYW4+IHtcbiAgICAgIHJldHVybiB0aGlzLnR5cGUuaXNCb29sZWFuKCk7XG4gICAgfVxuICAgIGlzQXJyYXkoKTogdGhpcyBpcyBUeXBlZEFycmF5PGFueT4ge1xuICAgICAgcmV0dXJuIHRoaXMudHlwZS5pc0FycmF5KCk7XG4gICAgfVxuICAgIGlzQXJyYXlPZjxUPih0eXBlOiBUeXBlcy5Kc1R5cGU8VD4pOiB0aGlzIGlzIFR5cGVkQXJyYXk8VD4ge1xuICAgICAgcmV0dXJuIHRoaXMudHlwZS5pc0FycmF5T2YodHlwZSk7XG4gICAgfVxuICB9XG5cbiAgY2xhc3MgVHlwZWRBcnJheTxUPiBleHRlbmRzIFR5cGVkPEFycmF5PFQ+PiB7XG4gICAgY29udGFpbmVkVHlwZTogVHlwZXMuSnNUeXBlPFQ+O1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBBcnJheTxUPiwgdHlwZTogVHlwZXMuSnNBcnJheTxULCBUeXBlcy5Kc1R5cGU8VD4+KSB7XG4gICAgICBzdXBlcih2YWx1ZSwgdHlwZSk7XG4gICAgICB0aGlzLmNvbnRhaW5lZFR5cGUgPSB0eXBlLmNvbnRhaW5lZDtcbiAgICB9XG4gIH1cblxuICBjbGFzcyBUeXBlZEFycmF5QW55IGV4dGVuZHMgVHlwZWRBcnJheTxhbnk+IHtcbiAgICB0eXBlZFZhbHVlczogVHlwZWQ8YW55PltdO1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBhbnlbXSkge1xuICAgICAgc3VwZXIodmFsdWUsIFR5cGVzLmFycmF5KFR5cGVzLnVua25vd24pKTtcbiAgICAgIHRoaXMudHlwZWRWYWx1ZXMgPSB2YWx1ZS5tYXAoKHYpID0+IGFzVHlwZWQodikpXG4gICAgfVxuICAgIGlzQXJyYXlPZjxUPih0eXBlOiBUeXBlcy5Kc1R5cGU8VD4pOiB0aGlzIGlzIFR5cGVkQXJyYXk8VD4ge1xuICAgICAgcmV0dXJuIHRoaXMudHlwZWRWYWx1ZXMuZXZlcnkoKHQpID0+IHQudHlwZS5pc0VxdWFsVG8odHlwZSkpO1xuICAgIH1cbiAgICBhc0FycmF5T2Y8VD4odHlwZTogVHlwZXMuSnNUeXBlPFQ+KTogUmVzdWx0PFR5cGVkQXJyYXk8VD4sIEVycm9yPiB7XG5cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhc1R5cGVkKHZhbHVlOiBhbnkpOiBUeXBlZDxhbnk+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIG5ldyBUeXBlZCh2YWx1ZSwgVHlwZXMubnVtYmVyKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBuZXcgVHlwZWQodmFsdWUsIFR5cGVzLnN0cmluZyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIG5ldyBUeXBlZCh2YWx1ZSwgVHlwZXMuYm9vbGVhbik7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJykge1xuICAgICAgY29uc3QgYXJyYXlWYWx1ZSA9IHZhbHVlIGFzIEFycmF5PGFueT47XG4gICAgICByZXR1cm4gbmV3IFR5cGVkQXJyYXlBbnkoYXJyYXlWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVHlwZWQodmFsdWUsIFR5cGVzLnVua25vd24pO1xuICB9XG59XG4vLyAqL1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anN0eXBlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBBcnJheUNoaWxkRXJyb3I7XG4oZnVuY3Rpb24gKEFycmF5Q2hpbGRFcnJvcikge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShpbmRleCwgZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdhcnJheS1lcnJvcicsXG4gICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgfTtcbiAgICB9XG4gICAgQXJyYXlDaGlsZEVycm9yLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKEFycmF5Q2hpbGRFcnJvciA9IGV4cG9ydHMuQXJyYXlDaGlsZEVycm9yIHx8IChleHBvcnRzLkFycmF5Q2hpbGRFcnJvciA9IHt9KSk7XG52YXIgRXJyb3JHcm91cDtcbihmdW5jdGlvbiAoRXJyb3JHcm91cCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh2YWx1ZSwgZXJyb3JzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZXJyb3ItZ3JvdXAnLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgRXJyb3JHcm91cC5jcmVhdGUgPSBjcmVhdGU7XG59KShFcnJvckdyb3VwID0gZXhwb3J0cy5FcnJvckdyb3VwIHx8IChleHBvcnRzLkVycm9yR3JvdXAgPSB7fSkpO1xudmFyIEluY29uc2lzdGVudFR5cGVzRXJyb3I7XG4oZnVuY3Rpb24gKEluY29uc2lzdGVudFR5cGVzRXJyb3IpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUodmFsdWUsIGZvdW5kKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnaW5jb25zaXN0ZW50LXR5cGVzJyxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGZvdW5kOiBmb3VuZFxuICAgICAgICB9O1xuICAgIH1cbiAgICBJbmNvbnNpc3RlbnRUeXBlc0Vycm9yLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKEluY29uc2lzdGVudFR5cGVzRXJyb3IgPSBleHBvcnRzLkluY29uc2lzdGVudFR5cGVzRXJyb3IgfHwgKGV4cG9ydHMuSW5jb25zaXN0ZW50VHlwZXNFcnJvciA9IHt9KSk7XG52YXIgSW52YWxpZFR5cGVFcnJvcjtcbihmdW5jdGlvbiAoSW52YWxpZFR5cGVFcnJvcikge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh2YWx1ZSwgZXhwZWN0ZWQsIGFjdHVhbCwgZm9yd2FyZGVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnaW52YWxpZC10eXBlJyxcbiAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgICAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZXJyb3I6IGZvcndhcmRlZCB8fCBudWxsXG4gICAgICAgIH07XG4gICAgfVxuICAgIEludmFsaWRUeXBlRXJyb3IuY3JlYXRlID0gY3JlYXRlO1xufSkoSW52YWxpZFR5cGVFcnJvciA9IGV4cG9ydHMuSW52YWxpZFR5cGVFcnJvciB8fCAoZXhwb3J0cy5JbnZhbGlkVHlwZUVycm9yID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlY29kaW5nLWVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHN1Y2Nlc3NfMSA9IHJlcXVpcmUoXCIuL3N1Y2Nlc3NcIik7XG52YXIgZmFpbHVyZV8xID0gcmVxdWlyZShcIi4vZmFpbHVyZVwiKTtcbnZhciB1bnJlYWNoYWJsZV8xID0gcmVxdWlyZShcIi4uL3VucmVhY2hhYmxlXCIpO1xudmFyIFJlc3VsdDtcbihmdW5jdGlvbiAoUmVzdWx0KSB7XG4gICAgZnVuY3Rpb24gc3VjY2Vzcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbmV3IHN1Y2Nlc3NfMS5SZXN1bHRTdWNjZXNzSW1wbCh2YWx1ZSk7XG4gICAgfVxuICAgIFJlc3VsdC5zdWNjZXNzID0gc3VjY2VzcztcbiAgICBmdW5jdGlvbiBmYWlsdXJlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgZmFpbHVyZV8xLlJlc3VsdEZhaWx1cmVJbXBsKHZhbHVlKTtcbiAgICB9XG4gICAgUmVzdWx0LmZhaWx1cmUgPSBmYWlsdXJlO1xuICAgIGZ1bmN0aW9uIGFsbChyZXN1bHRzKSB7XG4gICAgICAgIHZhciBzdWNjZXNzZXMgPSBbXTtcbiAgICAgICAgdmFyIGZhaWx1cmVzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgICAgICBpZiAocmVzdWx0LmlzU3VjY2VzcygpKSB7XG4gICAgICAgICAgICAgICAgc3VjY2Vzc2VzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdC5pc0ZhaWx1cmUoKSkge1xuICAgICAgICAgICAgICAgIGZhaWx1cmVzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVucmVhY2hhYmxlXzEudW5yZWFjaGFibGUoXCJBIHJlc3VsdCBtdXN0IGVpdGhlciBiZSBhIHN1Y2Nlc3Mgb3IgYSBmYWlsdXJlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZmFpbHVyZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsdXJlKGZhaWx1cmVzLm1hcChmdW5jdGlvbiAoZikgeyByZXR1cm4gZi5lcnJvcjsgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZXN1bHQuc3VjY2VzcyhzdWNjZXNzZXMubWFwKGZ1bmN0aW9uIChmKSB7IHJldHVybiBmLnZhbHVlOyB9KSk7XG4gICAgfVxuICAgIFJlc3VsdC5hbGwgPSBhbGw7XG59KShSZXN1bHQgPSBleHBvcnRzLlJlc3VsdCB8fCAoZXhwb3J0cy5SZXN1bHQgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzdWx0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZGVjb2RpbmdfZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnMvZGVjb2RpbmcvZGVjb2RpbmctZXJyb3JcIik7XG52YXIgcmVzdWx0XzEgPSByZXF1aXJlKFwiLi4vcmVzdWx0L3Jlc3VsdFwiKTtcbnZhciBqc3R5cGVzXzEgPSByZXF1aXJlKFwiLi4vanN0eXBlc1wiKTtcbnZhciBBYnN0cmFjdFJlYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBYnN0cmFjdFJlYWRlcigpIHtcbiAgICB9XG4gICAgQWJzdHJhY3RSZWFkZXIucHJvdG90eXBlLndpdGhEZWZhdWx0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVmYXVsdFJlYWRlcih0aGlzLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBBYnN0cmFjdFJlYWRlci5wcm90b3R5cGUuYXNPcHRpb25hbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPcHRpb25hbFJlYWRlcih0aGlzKTtcbiAgICB9O1xuICAgIEFic3RyYWN0UmVhZGVyLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgICByZXR1cm4gbmV3IE9yUmVhZGVyKHRoaXMsIG90aGVyKTtcbiAgICB9O1xuICAgIHJldHVybiBBYnN0cmFjdFJlYWRlcjtcbn0oKSk7XG5leHBvcnRzLkFic3RyYWN0UmVhZGVyID0gQWJzdHJhY3RSZWFkZXI7XG52YXIgRGVmYXVsdFJlYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVmYXVsdFJlYWRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWZhdWx0UmVhZGVyKHJlYWRlciwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnJlYWRlciA9IHJlYWRlcjtcbiAgICAgICAgX3RoaXMuZGVmYXVsdCA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgX3RoaXMuZXhwZWN0ZWRUeXBlID0gcmVhZGVyLmV4cGVjdGVkVHlwZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEZWZhdWx0UmVhZGVyLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gcmVzdWx0XzEuUmVzdWx0LnN1Y2Nlc3ModGhpcy5yZWFkZXIucmVhZChvYmopXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChzdWNjZXNzKSB7IHJldHVybiBzdWNjZXNzOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5kZWZhdWx0OyB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVmYXVsdFJlYWRlcjtcbn0oQWJzdHJhY3RSZWFkZXIpKTtcbmV4cG9ydHMuRGVmYXVsdFJlYWRlciA9IERlZmF1bHRSZWFkZXI7XG5mdW5jdGlvbiBpbmZlck9yVW5rbm93bihvYmopIHtcbiAgICB2YXIgaW5mZXJyZWQgPSBqc3R5cGVzXzEuVHlwZXMuaW5mZXIob2JqKTtcbiAgICBpZiAoaW5mZXJyZWQgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ganN0eXBlc18xLlR5cGVzLnRvU3RyaW5nKGluZmVycmVkKTtcbiAgICB9XG4gICAgcmV0dXJuICdVbmtub3duJztcbn1cbnZhciBPclJlYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT3JSZWFkZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3JSZWFkZXIocmVhZGVyQSwgcmVhZGVyQikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5yZWFkZXJBID0gcmVhZGVyQTtcbiAgICAgICAgX3RoaXMucmVhZGVyQiA9IHJlYWRlckI7XG4gICAgICAgIF90aGlzLmV4cGVjdGVkVHlwZSA9IGpzdHlwZXNfMS5UeXBlcy5VbmlvbihbcmVhZGVyQS5leHBlY3RlZFR5cGUsIHJlYWRlckIuZXhwZWN0ZWRUeXBlXSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT3JSZWFkZXIucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRlckEucmVhZChvYmopLm1hcChmdW5jdGlvbiAoc3VjY2VzcykgeyByZXR1cm4gcmVzdWx0XzEuUmVzdWx0LnN1Y2Nlc3Moc3VjY2Vzcyk7IH0sIGZ1bmN0aW9uIChmYWlsdXJlKSB7IHJldHVybiBfdGhpcy5yZWFkZXJCLnJlYWQob2JqKVxuICAgICAgICAgICAgLm1hcEZhaWx1cmUoZnVuY3Rpb24gKGVycm9yKSB7IHJldHVybiBkZWNvZGluZ19lcnJvcl8xLkludmFsaWRUeXBlRXJyb3IuY3JlYXRlKG9iaiwganN0eXBlc18xLlR5cGVzLnRvU3RyaW5nKF90aGlzLmV4cGVjdGVkVHlwZSksIGluZmVyT3JVbmtub3duKG9iaiksIGRlY29kaW5nX2Vycm9yXzEuRXJyb3JHcm91cC5jcmVhdGUob2JqLCBbZmFpbHVyZSwgZXJyb3JdKSk7IH0pOyB9KTtcbiAgICB9O1xuICAgIHJldHVybiBPclJlYWRlcjtcbn0oQWJzdHJhY3RSZWFkZXIpKTtcbmV4cG9ydHMuT3JSZWFkZXIgPSBPclJlYWRlcjtcbnZhciBPcHRpb25hbFJlYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT3B0aW9uYWxSZWFkZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3B0aW9uYWxSZWFkZXIocmVhZGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHJlYWRlciwgbnVsbCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZXhwZWN0ZWRUeXBlID0ganN0eXBlc18xLlR5cGVzLk51bGxhYmxlKHJlYWRlci5leHBlY3RlZFR5cGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBPcHRpb25hbFJlYWRlcjtcbn0oRGVmYXVsdFJlYWRlcikpO1xuZXhwb3J0cy5PcHRpb25hbFJlYWRlciA9IE9wdGlvbmFsUmVhZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWJzdHJhY3QtcmVhZGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xuICAgIHJlc3VsdFtcImRlZmF1bHRcIl0gPSBtb2Q7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZXJyb3JzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuLi9lcnJvcnMvZGVjb2RpbmcvZGVjb2RpbmctZXJyb3JcIikpO1xudmFyIGFic3RyYWN0X3JlYWRlcl8xID0gcmVxdWlyZShcIi4vYWJzdHJhY3QtcmVhZGVyXCIpO1xudmFyIGpzdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9qc3R5cGVzXCIpO1xudmFyIEV4dHJhY3RSZWFkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEV4dHJhY3RSZWFkZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRXh0cmFjdFJlYWRlcihwcm9wZXJ0eSwgcmVhZGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgICAgIF90aGlzLnJlYWRlciA9IHJlYWRlcjtcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgICBvYmpbcHJvcGVydHldID0gcmVhZGVyLmV4cGVjdGVkVHlwZTtcbiAgICAgICAgY29uc29sZS5sb2coJ0V4dHJhY3QnLCBwcm9wZXJ0eSwgJ29mIHR5cGUnLCByZWFkZXIuZXhwZWN0ZWRUeXBlKTtcbiAgICAgICAgX3RoaXMuZXhwZWN0ZWRUeXBlID0ganN0eXBlc18xLlR5cGVzLk9iamVjdChvYmopO1xuICAgICAgICBjb25zb2xlLmxvZygnQ29tcHV0ZWQgZXhwZWN0ZWQgdHlwZSBpcycsIF90aGlzLmV4cGVjdGVkVHlwZSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRXh0cmFjdFJlYWRlci5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKG9iaiAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHRoaXMucHJvcGVydHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkZXIucmVhZChvYmpbdGhpcy5wcm9wZXJ0eV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZGVyLnJlYWQobnVsbCkubWFwRmFpbHVyZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZmVycmVkID0ganN0eXBlc18xLlR5cGVzLmluZmVyKG9iaik7XG4gICAgICAgICAgICAgICAgdmFyIHR5cGVTdHJpbmcgPSBpbmZlcnJlZCAmJiBqc3R5cGVzXzEuVHlwZXMudG9TdHJpbmcoaW5mZXJyZWQpIHx8ICdVbmtub3duJztcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JzLkludmFsaWRUeXBlRXJyb3IuY3JlYXRlKG9iaiwganN0eXBlc18xLlR5cGVzLnRvU3RyaW5nKF90aGlzLmV4cGVjdGVkVHlwZSksIHR5cGVTdHJpbmcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBFeHRyYWN0UmVhZGVyO1xufShhYnN0cmFjdF9yZWFkZXJfMS5BYnN0cmFjdFJlYWRlcikpO1xuZXhwb3J0cy5FeHRyYWN0UmVhZGVyID0gRXh0cmFjdFJlYWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4dHJhY3QtcmVhZGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGRlY29kaW5nX2Vycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzL2RlY29kaW5nL2RlY29kaW5nLWVycm9yXCIpO1xudmFyIHJlc3VsdF8xID0gcmVxdWlyZShcIi4uL3Jlc3VsdC9yZXN1bHRcIik7XG52YXIganN0eXBlc18xID0gcmVxdWlyZShcIi4uL2pzdHlwZXNcIik7XG52YXIgTWFwUmVhZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hcFJlYWRlcih2YWx1ZVJlYWRlcikge1xuICAgICAgICB0aGlzLnZhbHVlUmVhZGVyID0gdmFsdWVSZWFkZXI7XG4gICAgICAgIHRoaXMuZXhwZWN0ZWRUeXBlID0ganN0eXBlc18xLlR5cGVzLk1hcCh2YWx1ZVJlYWRlci5leHBlY3RlZFR5cGUpO1xuICAgIH1cbiAgICBNYXBSZWFkZXIucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdmFyIGRlY29kZWQgPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVjb2RlZFZhbHVlID0gdGhpcy52YWx1ZVJlYWRlci5yZWFkKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlY29kZWRWYWx1ZS5pc1N1Y2Nlc3MoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVjb2RlZFtrZXldID0gZGVjb2RlZFZhbHVlLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGVTdHJpbmcgPSAneycgKyBqc3R5cGVzXzEucXVvdGUoa2V5KSArICc6IFVua25vd259JztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmpTcGVjID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5mZXJyZWRUeXBlXzEgPSBqc3R5cGVzXzEuVHlwZXMuaW5mZXIodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZmVycmVkVHlwZV8xICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpTcGVjW2tleV0gPSBpbmZlcnJlZFR5cGVfMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlU3RyaW5nID0ganN0eXBlc18xLlR5cGVzLnRvU3RyaW5nKGpzdHlwZXNfMS5UeXBlcy5PYmplY3Qob2JqU3BlYykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdF8xLlJlc3VsdC5mYWlsdXJlKGRlY29kaW5nX2Vycm9yXzEuSW52YWxpZFR5cGVFcnJvci5jcmVhdGUob2JqLCBqc3R5cGVzXzEuVHlwZXMudG9TdHJpbmcodGhpcy5leHBlY3RlZFR5cGUpLCB0eXBlU3RyaW5nLCBkZWNvZGVkVmFsdWUuaXNGYWlsdXJlKCkgPyBkZWNvZGVkVmFsdWUuZXJyb3IgOiB1bmRlZmluZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRfMS5SZXN1bHQuc3VjY2VzcyhkZWNvZGVkKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5mZXJyZWRUeXBlID0ganN0eXBlc18xLlR5cGVzLmluZmVyKG9iaik7XG4gICAgICAgIHJldHVybiByZXN1bHRfMS5SZXN1bHQuZmFpbHVyZShkZWNvZGluZ19lcnJvcl8xLkludmFsaWRUeXBlRXJyb3IuY3JlYXRlKG9iaiwganN0eXBlc18xLlR5cGVzLnRvU3RyaW5nKHRoaXMuZXhwZWN0ZWRUeXBlKSwgaW5mZXJyZWRUeXBlICYmIGpzdHlwZXNfMS5UeXBlcy50b1N0cmluZyhpbmZlcnJlZFR5cGUpIHx8ICdVbmtub3duJykpO1xuICAgIH07XG4gICAgcmV0dXJuIE1hcFJlYWRlcjtcbn0oKSk7XG5leHBvcnRzLk1hcFJlYWRlciA9IE1hcFJlYWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC1yZWFkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XG4gICAgcmVzdWx0W1wiZGVmYXVsdFwiXSA9IG1vZDtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBlcnJvcnMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4uL2Vycm9ycy9kZWNvZGluZy9kZWNvZGluZy1lcnJvclwiKSk7XG52YXIgcmVzdWx0XzEgPSByZXF1aXJlKFwiLi4vcmVzdWx0L3Jlc3VsdFwiKTtcbnZhciBhYnN0cmFjdF9yZWFkZXJfMSA9IHJlcXVpcmUoXCIuL2Fic3RyYWN0LXJlYWRlclwiKTtcbnZhciBleHRyYWN0X3JlYWRlcl8xID0gcmVxdWlyZShcIi4vZXh0cmFjdC1yZWFkZXJcIik7XG52YXIganN0eXBlc18xID0gcmVxdWlyZShcIi4uL2pzdHlwZXNcIik7XG52YXIgRW1wdHlPYmplY3RDb25zdHJ1Y3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRW1wdHlPYmplY3RDb25zdHJ1Y3RvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFbXB0eU9iamVjdENvbnN0cnVjdG9yKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZXhwZWN0ZWRUeXBlID0ganN0eXBlc18xLlR5cGVzLk9iamVjdCh7fSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLy8gZXhwZWN0ZWRUeXBlcyA9IHt9O1xuICAgIEVtcHR5T2JqZWN0Q29uc3RydWN0b3IucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9O1xuICAgIEVtcHR5T2JqZWN0Q29uc3RydWN0b3IucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uIChzLCByZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYmplY3RDb25zdHJ1Y3RvcihzLCByZWFkZXIsIHRoaXMpO1xuICAgIH07XG4gICAgRW1wdHlPYmplY3RDb25zdHJ1Y3Rvci5wcm90b3R5cGUucHJvcCA9IGZ1bmN0aW9uIChzLCByZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYmplY3RDb25zdHJ1Y3RvcihzLCBuZXcgZXh0cmFjdF9yZWFkZXJfMS5FeHRyYWN0UmVhZGVyKHMsIHJlYWRlciksIHRoaXMpO1xuICAgIH07XG4gICAgRW1wdHlPYmplY3RDb25zdHJ1Y3Rvci5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdF8xLlJlc3VsdC5zdWNjZXNzKHt9KTtcbiAgICB9O1xuICAgIHJldHVybiBFbXB0eU9iamVjdENvbnN0cnVjdG9yO1xufShhYnN0cmFjdF9yZWFkZXJfMS5BYnN0cmFjdFJlYWRlcikpO1xuZXhwb3J0cy5FbXB0eU9iamVjdENvbnN0cnVjdG9yID0gRW1wdHlPYmplY3RDb25zdHJ1Y3RvcjtcbnZhciBPYmplY3RDb25zdHJ1Y3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYmplY3RDb25zdHJ1Y3Rvcihwcm9wZXJ0eSwgcmVhZGVyLCBiYXNlKSB7XG4gICAgICAgIC8vIGNvbnN0IGJhc2VFeHBlY3RlZFR5cGVzID0gYmFzZS5leHBlY3RlZFR5cGVzO1xuICAgICAgICAvLyBjb25zdCBleHBlY3RlZFR5cGVzOiB7W2s6IHN0cmluZ106IHN0cmluZ30gPSB7fTtcbiAgICAgICAgLy8gY29uc3QgZXhwZWN0ZWRUeXBlUGFpcnM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIC8vIGZvciAodmFyIGsgaW4gYmFzZUV4cGVjdGVkVHlwZXMpIHtcbiAgICAgICAgLy8gICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYmFzZUV4cGVjdGVkVHlwZXMsIGspKSB7XG4gICAgICAgIC8vICAgICBjb25zdCBiYXNlRXhwZWN0ZWRUeXBlID0gYmFzZUV4cGVjdGVkVHlwZXNba107XG4gICAgICAgIC8vICAgICBleHBlY3RlZFR5cGVzW2tdID0gYmFzZUV4cGVjdGVkVHlwZTtcbiAgICAgICAgLy8gICAgIGV4cGVjdGVkVHlwZVBhaXJzLnB1c2goVHlwZXMucXVvdGVBbmRFc2NhcGUoJ1wiJywgaykgKyAnOiAnICsgYmFzZUV4cGVjdGVkVHlwZSk7XG4gICAgICAgIC8vICAgfVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGV4cGVjdGVkVHlwZXNbcHJvcGVydHldID0gcmVhZGVyLmV4cGVjdGVkVHlwZTtcbiAgICAgICAgLy8gZXhwZWN0ZWRUeXBlUGFpcnMucHVzaChUeXBlcy5xdW90ZUFuZEVzY2FwZSgnXCInLCBwcm9wZXJ0eSkgKyAnOiAnICsgcmVhZGVyLmV4cGVjdGVkVHlwZSk7XG4gICAgICAgIC8vIHRoaXMuZXhwZWN0ZWRUeXBlcyA9IGV4cGVjdGVkVHlwZXM7XG4gICAgICAgIGNvbnNvbGUubG9nKCdDb21iaW5pbmcnLCByZWFkZXIuZXhwZWN0ZWRUeXBlLCAnYW5kJywgYmFzZS5leHBlY3RlZFR5cGUpO1xuICAgICAgICB2YXIgY29tYmluZWRUeXBlID0ganN0eXBlc18xLlR5cGVzLmNvbWJpbmUoYmFzZS5leHBlY3RlZFR5cGUsIHJlYWRlci5leHBlY3RlZFR5cGUpO1xuICAgICAgICBjb25zb2xlLmxvZygnQ29tYmluZWQ6JywgY29tYmluZWRUeXBlKTtcbiAgICAgICAgaWYgKGNvbWJpbmVkVHlwZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignVW5hYmxlIHRvIGNvbWJpbmUgdHlwZXM6ICcgKyBiYXNlLmV4cGVjdGVkVHlwZS50b1N0cmluZygpICsgJyBhbmQgJyArIHJlYWRlci5leHBlY3RlZFR5cGUudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5leHBlY3RlZFR5cGUgPSBjb21iaW5lZFR5cGU7IC8vIFsneycsIGV4cGVjdGVkVHlwZVBhaXJzLmpvaW4oJywgJyksICd9J10uam9pbignJyk7XG4gICAgICAgIHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICAgICAgdGhpcy5yZWFkZXIgPSByZWFkZXI7XG4gICAgICAgIHRoaXMuYmFzZSA9IGJhc2U7XG4gICAgfVxuICAgIE9iamVjdENvbnN0cnVjdG9yLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH07XG4gICAgT2JqZWN0Q29uc3RydWN0b3IucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uIChzLCByZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYmplY3RDb25zdHJ1Y3RvcihzLCByZWFkZXIsIHRoaXMpO1xuICAgIH07XG4gICAgT2JqZWN0Q29uc3RydWN0b3IucHJvdG90eXBlLnByb3AgPSBmdW5jdGlvbiAocywgcmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JqZWN0Q29uc3RydWN0b3IocywgbmV3IGV4dHJhY3RfcmVhZGVyXzEuRXh0cmFjdFJlYWRlcihzLCByZWFkZXIpLCB0aGlzKTtcbiAgICB9O1xuICAgIE9iamVjdENvbnN0cnVjdG9yLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlLnJlYWQob2JqKS5mbGF0TWFwKGZ1bmN0aW9uIChiYXNlU3VjY2Vzcykge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlYWRlci5yZWFkKG9iaikubWFwU3VjY2VzcyhmdW5jdGlvbiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzT2JqID0gYmFzZVN1Y2Nlc3M7XG4gICAgICAgICAgICAgICAgc3VjY2Vzc09ialtfdGhpcy5wcm9wZXJ0eV0gPSBzdWNjZXNzO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWNjZXNzT2JqO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChmYWlsdXJlKSB7XG4gICAgICAgICAgICBpZiAoZmFpbHVyZS50eXBlID09ICdpbnZhbGlkLXR5cGUnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZmVycmVkID0ganN0eXBlc18xLlR5cGVzLmluZmVyKG9iaik7XG4gICAgICAgICAgICAgICAgdmFyIHR5cGVTdHJpbmcgPSBpbmZlcnJlZCAmJiBqc3R5cGVzXzEuVHlwZXMudG9TdHJpbmcoaW5mZXJyZWQpIHx8ICdVbmtub3duJztcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0XzEuUmVzdWx0LmZhaWx1cmUoZXJyb3JzLkludmFsaWRUeXBlRXJyb3IuY3JlYXRlKG9iaiwganN0eXBlc18xLlR5cGVzLnRvU3RyaW5nKF90aGlzLmV4cGVjdGVkVHlwZSksIHR5cGVTdHJpbmcsIGZhaWx1cmUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRfMS5SZXN1bHQuZmFpbHVyZShmYWlsdXJlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0Q29uc3RydWN0b3I7XG59KCkpO1xuZXhwb3J0cy5PYmplY3RDb25zdHJ1Y3RvciA9IE9iamVjdENvbnN0cnVjdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JqZWN0LXJlYWRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcbiAgICByZXN1bHRbXCJkZWZhdWx0XCJdID0gbW9kO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGVycm9ycyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi4vZXJyb3JzL2RlY29kaW5nL2RlY29kaW5nLWVycm9yXCIpKTtcbnZhciByZXN1bHRfMSA9IHJlcXVpcmUoXCIuLi9yZXN1bHQvcmVzdWx0XCIpO1xudmFyIGFic3RyYWN0X3JlYWRlcl8xID0gcmVxdWlyZShcIi4vYWJzdHJhY3QtcmVhZGVyXCIpO1xudmFyIGpzdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9qc3R5cGVzXCIpO1xudmFyIEVudW1Ob01hdGNoRXJyb3I7XG4oZnVuY3Rpb24gKEVudW1Ob01hdGNoRXJyb3IpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUodmFsdWVzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZW51bS1uby1tYXRjaCcsXG4gICAgICAgICAgICB2YWxpZFZhbHVlczogdmFsdWVzXG4gICAgICAgIH07XG4gICAgfVxuICAgIEVudW1Ob01hdGNoRXJyb3IuY3JlYXRlID0gY3JlYXRlO1xufSkoRW51bU5vTWF0Y2hFcnJvciB8fCAoRW51bU5vTWF0Y2hFcnJvciA9IHt9KSk7XG52YXIgRW1wdHlFbnVtUmVhZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEVtcHR5RW51bVJlYWRlcigpIHtcbiAgICAgICAgdGhpcy5leHBlY3RlZFR5cGUgPSBqc3R5cGVzXzEuVHlwZXMuVW5pb24oW10pO1xuICAgICAgICB0aGlzLmV4cGVjdGVkVmFsdWVzID0gW107XG4gICAgfVxuICAgIEVtcHR5RW51bVJlYWRlci5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XG4gICAgRW1wdHlFbnVtUmVhZGVyLnByb3RvdHlwZS5jYXNlID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbnVtVmFsdWVSZWFkZXIocywgdGhpcyk7XG4gICAgfTtcbiAgICBFbXB0eUVudW1SZWFkZXIucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIGluZmVycmVkID0ganN0eXBlc18xLlR5cGVzLmluZmVyKG9iaik7XG4gICAgICAgICAgICB2YXIgdHlwZVN0cmluZyA9IGluZmVycmVkICYmIGpzdHlwZXNfMS5UeXBlcy50b1N0cmluZyhpbmZlcnJlZCkgfHwgJ1Vua25vd24nO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdF8xLlJlc3VsdC5mYWlsdXJlKGVycm9ycy5JbnZhbGlkVHlwZUVycm9yLmNyZWF0ZShvYmosIGpzdHlwZXNfMS5UeXBlcy50b1N0cmluZyhqc3R5cGVzXzEuVHlwZXMuU3RyaW5nKSwgdHlwZVN0cmluZykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRfMS5SZXN1bHQuZmFpbHVyZShFbnVtTm9NYXRjaEVycm9yLmNyZWF0ZShbXSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEVtcHR5RW51bVJlYWRlcjtcbn0oKSk7XG52YXIgRW51bVZhbHVlUmVhZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEVudW1WYWx1ZVJlYWRlcih2YWx1ZSwgYmFzZVJlYWRlcikge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuYmFzZVJlYWRlciA9IGJhc2VSZWFkZXI7XG4gICAgICAgIHRoaXMuZXhwZWN0ZWRWYWx1ZXMgPSBiYXNlUmVhZGVyLmV4cGVjdGVkVmFsdWVzLmNvbmNhdChbdmFsdWVdKTtcbiAgICB9XG4gICAgRW51bVZhbHVlUmVhZGVyLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH07XG4gICAgRW51bVZhbHVlUmVhZGVyLnByb3RvdHlwZS5jYXNlID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbnVtVmFsdWVSZWFkZXIocywgdGhpcyk7XG4gICAgfTtcbiAgICBFbnVtVmFsdWVSZWFkZXIucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIGluZmVycmVkID0ganN0eXBlc18xLlR5cGVzLmluZmVyKG9iaik7XG4gICAgICAgICAgICB2YXIgdHlwZVN0cmluZyA9IGluZmVycmVkICYmIGpzdHlwZXNfMS5UeXBlcy50b1N0cmluZyhpbmZlcnJlZCkgfHwgJ1Vua25vd24nO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdF8xLlJlc3VsdC5mYWlsdXJlKGVycm9ycy5JbnZhbGlkVHlwZUVycm9yLmNyZWF0ZShvYmosIGpzdHlwZXNfMS5UeXBlcy50b1N0cmluZyhqc3R5cGVzXzEuVHlwZXMuU3RyaW5nKSwgdHlwZVN0cmluZykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmogPT09IHRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRfMS5SZXN1bHQuc3VjY2Vzcyh0aGlzLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlUmVhZGVyLnJlYWQob2JqKS5tYXBGYWlsdXJlKGZ1bmN0aW9uIChmYWlsdXJlKSB7XG4gICAgICAgICAgICBpZiAoZmFpbHVyZS50eXBlID09PSAnZW51bS1uby1tYXRjaCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRW51bU5vTWF0Y2hFcnJvci5jcmVhdGUoZmFpbHVyZS52YWxpZFZhbHVlcy5jb25jYXQoW190aGlzLnZhbHVlXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEVudW1WYWx1ZVJlYWRlcjtcbn0oKSk7XG52YXIgRW51bVJlYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRW51bVJlYWRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFbnVtUmVhZGVyKGJhc2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYmFzZSA9IGJhc2U7XG4gICAgICAgIF90aGlzLmV4cGVjdGVkVHlwZSA9IGpzdHlwZXNfMS5UeXBlcy5VbmlvbihiYXNlLmV4cGVjdGVkVmFsdWVzLm1hcChmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4ganN0eXBlc18xLlR5cGVzLlN0cmluZ1ZhbHVlKHR5cGUpOyB9KSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRW51bVJlYWRlci5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW51bVJlYWRlcihuZXcgRW1wdHlFbnVtUmVhZGVyKCkpO1xuICAgIH07XG4gICAgRW51bVJlYWRlci5wcm90b3R5cGUuY2FzZSA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW51bVJlYWRlcih0aGlzLmJhc2UuY2FzZShzKSk7XG4gICAgfTtcbiAgICBFbnVtUmVhZGVyLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlLnJlYWQob2JqKS5tYXBGYWlsdXJlKGZ1bmN0aW9uIChmYWlsdXJlKSB7XG4gICAgICAgICAgICBpZiAoZmFpbHVyZS50eXBlID09PSAnZW51bS1uby1tYXRjaCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5mZXJyZWQgPSBqc3R5cGVzXzEuVHlwZXMuaW5mZXIob2JqKTtcbiAgICAgICAgICAgICAgICB2YXIgdHlwZVN0cmluZyA9IGluZmVycmVkICYmIGpzdHlwZXNfMS5UeXBlcy50b1N0cmluZyhpbmZlcnJlZCkgfHwgJ1Vua25vd24nO1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcnMuSW52YWxpZFR5cGVFcnJvci5jcmVhdGUob2JqLCBqc3R5cGVzXzEuVHlwZXMudG9TdHJpbmcoX3RoaXMuZXhwZWN0ZWRUeXBlKSwgdHlwZVN0cmluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gRW51bVJlYWRlcjtcbn0oYWJzdHJhY3RfcmVhZGVyXzEuQWJzdHJhY3RSZWFkZXIpKTtcbmV4cG9ydHMuRW51bVJlYWRlciA9IEVudW1SZWFkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnVtLXJlYWRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGRlY29kaW5nX2Vycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzL2RlY29kaW5nL2RlY29kaW5nLWVycm9yXCIpO1xudmFyIHJlc3VsdF8xID0gcmVxdWlyZShcIi4uL3Jlc3VsdC9yZXN1bHRcIik7XG52YXIgYWJzdHJhY3RfcmVhZGVyXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdC1yZWFkZXJcIik7XG52YXIganN0eXBlc18xID0gcmVxdWlyZShcIi4uL2pzdHlwZXNcIik7XG52YXIgQXJyYXlSZWFkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFycmF5UmVhZGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFycmF5UmVhZGVyKHJlYWRlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5yZWFkZXIgPSByZWFkZXI7XG4gICAgICAgIF90aGlzLmV4cGVjdGVkVHlwZSA9IGpzdHlwZXNfMS5UeXBlcy5BcnJheShyZWFkZXIuZXhwZWN0ZWRUeXBlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBcnJheVJlYWRlci5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKG9iaiAmJiB0eXBlb2Ygb2JqLmxlbmd0aCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHZhciBhcnJheSA9IG9iajtcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0gYXJyYXkubWFwKGZ1bmN0aW9uICh2LCBpbmRleCkgeyByZXR1cm4gX3RoaXMucmVhZGVyLnJlYWQodikubWFwRmFpbHVyZShmdW5jdGlvbiAoZSkgeyByZXR1cm4gKHsgaW5kZXg6IGluZGV4LCBlcnJvcjogZSB9KTsgfSk7IH0pO1xuICAgICAgICAgICAgcmVzdWx0XzEuUmVzdWx0LmFsbChyZXN1bHRzKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRfMS5SZXN1bHQuYWxsKHJlc3VsdHMpXG4gICAgICAgICAgICAgICAgLm1hcEZhaWx1cmUoZnVuY3Rpb24gKGVycm9ycykgeyByZXR1cm4gZGVjb2RpbmdfZXJyb3JfMS5FcnJvckdyb3VwLmNyZWF0ZShvYmosIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7IHJldHVybiBkZWNvZGluZ19lcnJvcl8xLkFycmF5Q2hpbGRFcnJvci5jcmVhdGUoZXJyb3IuaW5kZXgsIGVycm9yLmVycm9yKTsgfSkpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5mZXJyZWRUeXBlID0ganN0eXBlc18xLlR5cGVzLmluZmVyKG9iaik7XG4gICAgICAgIHZhciB0eXBlU3RyaW5nID0gaW5mZXJyZWRUeXBlICYmIGpzdHlwZXNfMS5UeXBlcy50b1N0cmluZyhpbmZlcnJlZFR5cGUpIHx8ICdVbmtub3duJztcbiAgICAgICAgcmV0dXJuIHJlc3VsdF8xLlJlc3VsdC5mYWlsdXJlKGRlY29kaW5nX2Vycm9yXzEuSW52YWxpZFR5cGVFcnJvci5jcmVhdGUob2JqLCB0aGlzLmV4cGVjdGVkVHlwZS50b1N0cmluZygpLCB0eXBlU3RyaW5nKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQXJyYXlSZWFkZXI7XG59KGFic3RyYWN0X3JlYWRlcl8xLkFic3RyYWN0UmVhZGVyKSk7XG5leHBvcnRzLkFycmF5UmVhZGVyID0gQXJyYXlSZWFkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJheS1yZWFkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBkZWNvZGluZ19lcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9ycy9kZWNvZGluZy9kZWNvZGluZy1lcnJvclwiKTtcbnZhciByZXN1bHRfMSA9IHJlcXVpcmUoXCIuLi9yZXN1bHQvcmVzdWx0XCIpO1xudmFyIGFic3RyYWN0X3JlYWRlcl8xID0gcmVxdWlyZShcIi4vYWJzdHJhY3QtcmVhZGVyXCIpO1xudmFyIGpzdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9qc3R5cGVzXCIpO1xudmFyIFByaW1pdGl2ZVJlYWRlcnM7XG4oZnVuY3Rpb24gKFByaW1pdGl2ZVJlYWRlcnMpIHtcbiAgICB2YXIgQm9vbGVhblJlYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKEJvb2xlYW5SZWFkZXIsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIEJvb2xlYW5SZWFkZXIoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLmV4cGVjdGVkVHlwZSA9IGpzdHlwZXNfMS5UeXBlcy5Cb29sZWFuO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIEJvb2xlYW5SZWFkZXIucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdF8xLlJlc3VsdC5zdWNjZXNzKG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5mZXJyZWQgPSBqc3R5cGVzXzEuVHlwZXMuaW5mZXIob2JqKTtcbiAgICAgICAgICAgIHZhciB0eXBlU3RyaW5nID0gaW5mZXJyZWQgJiYganN0eXBlc18xLlR5cGVzLnRvU3RyaW5nKGluZmVycmVkKSB8fCAnVW5rbm93bic7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0XzEuUmVzdWx0LmZhaWx1cmUoZGVjb2RpbmdfZXJyb3JfMS5JbnZhbGlkVHlwZUVycm9yLmNyZWF0ZShvYmosIGpzdHlwZXNfMS5UeXBlcy50b1N0cmluZyh0aGlzLmV4cGVjdGVkVHlwZSksIHR5cGVTdHJpbmcpKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW5SZWFkZXI7XG4gICAgfShhYnN0cmFjdF9yZWFkZXJfMS5BYnN0cmFjdFJlYWRlcikpO1xuICAgIFByaW1pdGl2ZVJlYWRlcnMuQm9vbGVhblJlYWRlciA9IEJvb2xlYW5SZWFkZXI7XG4gICAgdmFyIFN0cmluZ1JlYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKFN0cmluZ1JlYWRlciwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gU3RyaW5nUmVhZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5leHBlY3RlZFR5cGUgPSBqc3R5cGVzXzEuVHlwZXMuU3RyaW5nO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIFN0cmluZ1JlYWRlci5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRfMS5SZXN1bHQuc3VjY2VzcyhvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluZmVycmVkID0ganN0eXBlc18xLlR5cGVzLmluZmVyKG9iaik7XG4gICAgICAgICAgICB2YXIgdHlwZVN0cmluZyA9IGluZmVycmVkICYmIGpzdHlwZXNfMS5UeXBlcy50b1N0cmluZyhpbmZlcnJlZCkgfHwgJ1Vua25vd24nO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdF8xLlJlc3VsdC5mYWlsdXJlKGRlY29kaW5nX2Vycm9yXzEuSW52YWxpZFR5cGVFcnJvci5jcmVhdGUob2JqLCBqc3R5cGVzXzEuVHlwZXMudG9TdHJpbmcodGhpcy5leHBlY3RlZFR5cGUpLCB0eXBlU3RyaW5nKSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBTdHJpbmdSZWFkZXI7XG4gICAgfShhYnN0cmFjdF9yZWFkZXJfMS5BYnN0cmFjdFJlYWRlcikpO1xuICAgIFByaW1pdGl2ZVJlYWRlcnMuU3RyaW5nUmVhZGVyID0gU3RyaW5nUmVhZGVyO1xuICAgIHZhciBOdW1iZXJSZWFkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhOdW1iZXJSZWFkZXIsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIE51bWJlclJlYWRlcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuZXhwZWN0ZWRUeXBlID0ganN0eXBlc18xLlR5cGVzLk51bWJlcjtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBOdW1iZXJSZWFkZXIucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0XzEuUmVzdWx0LnN1Y2Nlc3Mob2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbmZlcnJlZCA9IGpzdHlwZXNfMS5UeXBlcy5pbmZlcihvYmopO1xuICAgICAgICAgICAgdmFyIHR5cGVTdHJpbmcgPSBpbmZlcnJlZCAmJiBqc3R5cGVzXzEuVHlwZXMudG9TdHJpbmcoaW5mZXJyZWQpIHx8ICdVbmtub3duJztcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRfMS5SZXN1bHQuZmFpbHVyZShkZWNvZGluZ19lcnJvcl8xLkludmFsaWRUeXBlRXJyb3IuY3JlYXRlKG9iaiwganN0eXBlc18xLlR5cGVzLnRvU3RyaW5nKHRoaXMuZXhwZWN0ZWRUeXBlKSwgdHlwZVN0cmluZykpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gTnVtYmVyUmVhZGVyO1xuICAgIH0oYWJzdHJhY3RfcmVhZGVyXzEuQWJzdHJhY3RSZWFkZXIpKTtcbiAgICBQcmltaXRpdmVSZWFkZXJzLk51bWJlclJlYWRlciA9IE51bWJlclJlYWRlcjtcbn0pKFByaW1pdGl2ZVJlYWRlcnMgPSBleHBvcnRzLlByaW1pdGl2ZVJlYWRlcnMgfHwgKGV4cG9ydHMuUHJpbWl0aXZlUmVhZGVycyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmltaXRpdmUtcmVhZGVycy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIHVucmVhY2hhYmxlKG1lc3NhZ2UpIHtcbiAgICB2YXIgbXNnID0gJ0ZBVEFMIEVSUk9SIChVTlJFQUNIQUJMRSknICsgKG1lc3NhZ2UgJiYgKCc6ICcgKyBtZXNzYWdlKSB8fCAnJyk7XG4gICAgdGhyb3cgRXJyb3IobXNnKTtcbn1cbmV4cG9ydHMudW5yZWFjaGFibGUgPSB1bnJlYWNoYWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVucmVhY2hhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFJlc3VsdEZhaWx1cmVJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc3VsdEZhaWx1cmVJbXBsKGVycm9yKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdmYWlsdXJlJztcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgIH1cbiAgICBSZXN1bHRGYWlsdXJlSW1wbC5wcm90b3R5cGUuaXNTdWNjZXNzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH07XG4gICAgUmVzdWx0RmFpbHVyZUltcGwucHJvdG90eXBlLmlzRmFpbHVyZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XG4gICAgUmVzdWx0RmFpbHVyZUltcGwucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChzdWNjZXNzLCBmYWlsdXJlKSB7XG4gICAgICAgIHJldHVybiBmYWlsdXJlKHRoaXMuZXJyb3IpO1xuICAgIH07XG4gICAgUmVzdWx0RmFpbHVyZUltcGwucHJvdG90eXBlLmZsYXRNYXAgPSBmdW5jdGlvbiAoc3VjY2VzcywgZmFpbHVyZSkge1xuICAgICAgICByZXR1cm4gZmFpbHVyZSh0aGlzLmVycm9yKTtcbiAgICB9O1xuICAgIFJlc3VsdEZhaWx1cmVJbXBsLnByb3RvdHlwZS5tYXBTdWNjZXNzID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHRGYWlsdXJlSW1wbCh0aGlzLmVycm9yKTtcbiAgICB9O1xuICAgIFJlc3VsdEZhaWx1cmVJbXBsLnByb3RvdHlwZS5tYXBGYWlsdXJlID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHRGYWlsdXJlSW1wbChmKHRoaXMuZXJyb3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXN1bHRGYWlsdXJlSW1wbDtcbn0oKSk7XG5leHBvcnRzLlJlc3VsdEZhaWx1cmVJbXBsID0gUmVzdWx0RmFpbHVyZUltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYWlsdXJlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFJlc3VsdFN1Y2Nlc3NJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc3VsdFN1Y2Nlc3NJbXBsKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdzdWNjZXNzJztcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBSZXN1bHRTdWNjZXNzSW1wbC5wcm90b3R5cGUuaXNTdWNjZXNzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcbiAgICBSZXN1bHRTdWNjZXNzSW1wbC5wcm90b3R5cGUuaXNGYWlsdXJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH07XG4gICAgUmVzdWx0U3VjY2Vzc0ltcGwucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChzdWNjZXNzLCBmYWlsdXJlKSB7XG4gICAgICAgIHJldHVybiBzdWNjZXNzKHRoaXMudmFsdWUpO1xuICAgIH07XG4gICAgUmVzdWx0U3VjY2Vzc0ltcGwucHJvdG90eXBlLmZsYXRNYXAgPSBmdW5jdGlvbiAoc3VjY2VzcywgZmFpbHVyZSkge1xuICAgICAgICByZXR1cm4gc3VjY2Vzcyh0aGlzLnZhbHVlKTtcbiAgICB9O1xuICAgIFJlc3VsdFN1Y2Nlc3NJbXBsLnByb3RvdHlwZS5tYXBTdWNjZXNzID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHRTdWNjZXNzSW1wbChmKHRoaXMudmFsdWUpKTtcbiAgICB9O1xuICAgIFJlc3VsdFN1Y2Nlc3NJbXBsLnByb3RvdHlwZS5tYXBGYWlsdXJlID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHRTdWNjZXNzSW1wbCh0aGlzLnZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXN1bHRTdWNjZXNzSW1wbDtcbn0oKSk7XG5leHBvcnRzLlJlc3VsdFN1Y2Nlc3NJbXBsID0gUmVzdWx0U3VjY2Vzc0ltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWNjZXNzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGFic3RyYWN0X3JlYWRlcl8xID0gcmVxdWlyZShcIi4vcmVhZGVycy9hYnN0cmFjdC1yZWFkZXJcIik7XG52YXIgcHJpbWl0aXZlX3JlYWRlcnNfMSA9IHJlcXVpcmUoXCIuL3JlYWRlcnMvcHJpbWl0aXZlLXJlYWRlcnNcIik7XG52YXIgYXJyYXlfcmVhZGVyXzEgPSByZXF1aXJlKFwiLi9yZWFkZXJzL2FycmF5LXJlYWRlclwiKTtcbnZhciBleHRyYWN0X3JlYWRlcl8xID0gcmVxdWlyZShcIi4vcmVhZGVycy9leHRyYWN0LXJlYWRlclwiKTtcbnZhciBlbnVtX3JlYWRlcl8xID0gcmVxdWlyZShcIi4vcmVhZGVycy9lbnVtLXJlYWRlclwiKTtcbnZhciBvYmplY3RfcmVhZGVyXzEgPSByZXF1aXJlKFwiLi9yZWFkZXJzL29iamVjdC1yZWFkZXJcIik7XG52YXIgbWFwX3JlYWRlcl8xID0gcmVxdWlyZShcIi4vcmVhZGVycy9tYXAtcmVhZGVyXCIpO1xudmFyIFRzSnNvbjtcbihmdW5jdGlvbiAoVHNKc29uKSB7XG4gICAgVHNKc29uLm51bWJlciA9IG5ldyBwcmltaXRpdmVfcmVhZGVyc18xLlByaW1pdGl2ZVJlYWRlcnMuTnVtYmVyUmVhZGVyKCk7XG4gICAgVHNKc29uLnN0cmluZyA9IG5ldyBwcmltaXRpdmVfcmVhZGVyc18xLlByaW1pdGl2ZVJlYWRlcnMuU3RyaW5nUmVhZGVyKCk7XG4gICAgVHNKc29uLmJvb2xlYW4gPSBuZXcgcHJpbWl0aXZlX3JlYWRlcnNfMS5QcmltaXRpdmVSZWFkZXJzLkJvb2xlYW5SZWFkZXIoKTtcbiAgICBmdW5jdGlvbiBvcHRpb25hbChyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhYnN0cmFjdF9yZWFkZXJfMS5PcHRpb25hbFJlYWRlcihyZWFkZXIpO1xuICAgIH1cbiAgICBUc0pzb24ub3B0aW9uYWwgPSBvcHRpb25hbDtcbiAgICBmdW5jdGlvbiBhcnJheShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhcnJheV9yZWFkZXJfMS5BcnJheVJlYWRlcihyZWFkZXIpO1xuICAgIH1cbiAgICBUc0pzb24uYXJyYXkgPSBhcnJheTtcbiAgICBmdW5jdGlvbiBleHRyYWN0KHByb3BlcnR5LCByZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBleHRyYWN0X3JlYWRlcl8xLkV4dHJhY3RSZWFkZXIocHJvcGVydHksIHJlYWRlcik7XG4gICAgfVxuICAgIFRzSnNvbi5leHRyYWN0ID0gZXh0cmFjdDtcbiAgICBmdW5jdGlvbiBlbnVtZXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGVudW1fcmVhZGVyXzEuRW51bVJlYWRlci5jcmVhdGUoKTtcbiAgICB9XG4gICAgVHNKc29uLmVudW1lcmF0aW9uID0gZW51bWVyYXRpb247XG4gICAgZnVuY3Rpb24gbWFwKHZhbHVlUmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgbWFwX3JlYWRlcl8xLk1hcFJlYWRlcih2YWx1ZVJlYWRlcik7XG4gICAgfVxuICAgIFRzSnNvbi5tYXAgPSBtYXA7XG4gICAgZnVuY3Rpb24gb2JqKCkge1xuICAgICAgICByZXR1cm4gbmV3IG9iamVjdF9yZWFkZXJfMS5FbXB0eU9iamVjdENvbnN0cnVjdG9yKCk7XG4gICAgfVxuICAgIFRzSnNvbi5vYmogPSBvYmo7XG59KShUc0pzb24gPSBleHBvcnRzLlRzSnNvbiB8fCAoZXhwb3J0cy5Uc0pzb24gPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==