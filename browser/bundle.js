!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=14)}([function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var u=r(2),i=function(){function e(){}return e.prototype.withDefault=function(e){return new a(this,e)},e.prototype.asOptional=function(){return new p(this)},e}();t.AbstractReader=i;var a=function(e){function t(t,r){var n=e.call(this)||this;return n.reader=t,n.default=r,n.expectedType=t.expectedType,n}return o(t,e),t.prototype.read=function(e){var t=this;return u.Result.success(this.reader.read(e).map(function(e){return e},function(){return t.default}))},t}(i);t.DefaultReader=a;var p=function(e){function t(t){var r=e.call(this,t,null)||this;return r.expectedType="nullable "+t.expectedType,r}return o(t,e),t}(a);t.OptionalReader=p},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){function t(e){return{name:e,complex:!1}}function r(e){return{name:e,complex:!0}}function n(e){for(var t={},r=0;r<e.length;r++){var n=o(e[r]);t[n.name]=n}return Object.keys(t).sort().map(function(e){return t[e]})}function o(o){return"number"==typeof o?t(e.NumberType):"string"==typeof o?t(e.StringType):"boolean"==typeof o?t(e.BooleanType):null==o?t(e.NullType):o&&"number"==typeof o.length?r(e.ArrayType+" of "+n(o).map(function(e){return e.complex?"("+e.name+")":e.name})):t("object"==typeof o?e.ObjectType:e.UnknownType)}e.UnknownType="unknown",e.NullType="null",e.StringType="string",e.NumberType="number",e.BooleanType="boolean",e.ArrayType="array",e.ObjectType="object",e.simple=t,e.complex=r,e.determineContainedTypes=n,e.quoteAndEscape=function(e,t){return[e,t.replace(e,"\\"+e),e].join("")},e.determineType=o}(t.Types||(t.Types={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(13),o=r(12),u=r(11);!function(e){e.success=function(e){return new n.ResultSuccessImpl(e)},e.failure=function(e){return new o.ResultFailureImpl(e)},e.all=function(t){for(var r=[],n=[],o=0;o<t.length;o++){var i=t[o];if(i.isSuccess())r.push(i);else{if(!i.isFailure())return u.unreachable("A result must either be a success or a failure.");n.push(i)}}return n.length>0?e.failure(n.map(function(e){return e.error})):e.success(r.map(function(e){return e.value}))}}(t.Result||(t.Result={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.create=function(e,t){return{type:"array-error",index:e,error:t}}}(t.ArrayChildError||(t.ArrayChildError={})),function(e){e.create=function(e,t){return{type:"error-group",value:e,errors:t}}}(t.ErrorGroup||(t.ErrorGroup={})),function(e){e.create=function(e,t){return{type:"inconsistent-types",value:e,found:t}}}(t.InconsistentTypesError||(t.InconsistentTypesError={})),function(e){e.create=function(e,t,r){return{type:"invalid-type",expected:t,actual:r,value:e}}}(t.InvalidTypeError||(t.InvalidTypeError={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(0),o=r(10),u=r(9),i=r(5),a=r(8),p=r(7);!function(e){e.number=new o.PrimitiveReaders.NumberReader,e.string=new o.PrimitiveReaders.StringReader,e.boolean=new o.PrimitiveReaders.BooleanReader,e.optional=function(e){return new n.OptionalReader(e)},e.array=function(e){return new u.ArrayReader(e)},e.extract=function(e,t){return new i.ExtractReader(e,t)},e.enumeration=function(){return new a.EnumReader(new a.EmptyEnumReader)},e.obj=function(){return new p.EmptyObjectConstructor}}(t.TsJson||(t.TsJson={}))},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=u(r(3)),a=r(0),p=r(1),c=function(e){function t(t,r){var n=e.call(this)||this;return n.property=t,n.reader=r,n.expectedType='{"'+t.replace('"','\\"')+'": '+r.expectedType+"}",n}return o(t,e),t.prototype.read=function(e){var t=this;return Object.hasOwnProperty.call(e,this.property)?this.reader.read(e[this.property]):this.reader.read(null).mapFailure(function(){return i.InvalidTypeError.create(e,t.expectedType,p.Types.determineType(e).name)})},t}(a.AbstractReader);t.ExtractReader=c},function(e,t,r){var n=r(4);window.TsJson=n.TsJson},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var u=r(2),i=r(0),a=r(5),p=r(1),c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType="nothing",t}return o(t,e),t.prototype.isEmpty=function(){return!0},t.prototype.put=function(e,t){return new s(e,t,this)},t.prototype.prop=function(e,t){return new s(e,new a.ExtractReader(e,t),this)},t.prototype.read=function(){return u.Result.success({})},t}(i.AbstractReader);t.EmptyObjectConstructor=c;var s=function(){function e(e,t,r){this.expectedType=["{",p.Types.quoteAndEscape('"',e),": ",t.expectedType,"}"].join(""),this.property=e,this.reader=t,this.base=r}return e.prototype.isEmpty=function(){return!1},e.prototype.put=function(t,r){return new e(t,r,this)},e.prototype.prop=function(t,r){return new e(t,new a.ExtractReader(t,r),this)},e.prototype.read=function(e){var t=this;return this.base.read(e).flatMap(function(r){return t.reader.read(e).mapSuccess(function(e){var n=r;return n[t.property]=e,n})},function(e){return u.Result.failure(e)})},e}();t.ObjectConstructor=s},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i,a=u(r(3)),p=r(0),c=r(2),s=r(1);!function(e){e.create=function(e){return{type:"enum-no-match",validValues:e}}}(i||(i={}));var f=function(){function e(){this.expectedValues=[]}return e.prototype.isEmpty=function(){return!0},e.prototype.case=function(e){return new l(e,this)},e.prototype.read=function(e){return"string"!=typeof e?c.Result.failure(a.InvalidTypeError.create(e,s.Types.StringType,s.Types.determineType(e).name)):c.Result.failure(i.create([]))},e}();t.EmptyEnumReader=f;var l=function(){function e(e,t){this.value=e,this.baseReader=t,this.expectedValues=t.expectedValues.concat([e])}return e.prototype.isEmpty=function(){return!1},e.prototype.case=function(t){return new e(t,this)},e.prototype.read=function(e){var t=this;return"string"!=typeof e?c.Result.failure(a.InvalidTypeError.create(e,s.Types.StringType,s.Types.determineType(e).name)):e===this.value?c.Result.success(this.value):this.baseReader.read(e).mapFailure(function(e){return"enum-no-match"===e.type?i.create(e.validValues.concat([t.value])):e})},e}();t.EnumValueReader=l;var y=function(e){function t(t){var r=e.call(this)||this;return r.base=t,r.expectedType=t.expectedValues.map(function(e){return s.Types.quoteAndEscape('"',e)}).join("|"),r}return o(t,e),t.prototype.case=function(e){return new t(this.base.case(e))},t.prototype.read=function(e){var t=this;return this.base.read(e).mapFailure(function(r){return"enum-no-match"===r.type?a.InvalidTypeError.create(e,t.expectedType,s.Types.determineType(e).name+" ("+e+")"):r})},t}(p.AbstractReader);t.EnumReader=y},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var u=r(3),i=r(2),a=r(0),p=r(1),c=function(e){function t(t){var r=e.call(this)||this;return r.reader=t,r.expectedType=p.Types.ArrayType+" of "+t.expectedType,r}return o(t,e),t.prototype.read=function(e){var t=this;if(e&&"number"==typeof e.length){var r=e.map(function(e,r){return t.reader.read(e).mapFailure(function(e){return{index:r,error:e}})});return i.Result.all(r),i.Result.all(r).mapFailure(function(t){return u.ErrorGroup.create(e,t.map(function(e){return u.ArrayChildError.create(e.index,e.error)}))})}return i.Result.failure(u.InvalidTypeError.create(e,this.expectedType,p.Types.determineType(e).name))},t}(a.AbstractReader);t.ArrayReader=c},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var u=r(3),i=r(2),a=r(0),p=r(1);!function(e){var t=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=p.Types.BooleanType,t}return o(t,e),t.prototype.read=function(e){return"boolean"==typeof e?i.Result.success(e):i.Result.failure(u.InvalidTypeError.create(e,this.expectedType,p.Types.determineType(e).name))},t}(a.AbstractReader);e.BooleanReader=t;var r=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=p.Types.StringType,t}return o(t,e),t.prototype.read=function(e){return"string"==typeof e?i.Result.success(e):i.Result.failure(u.InvalidTypeError.create(e,this.expectedType,p.Types.determineType(e).name))},t}(a.AbstractReader);e.StringReader=r;var n=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.expectedType=p.Types.NumberType,t}return o(t,e),t.prototype.read=function(e){return"number"==typeof e?i.Result.success(e):i.Result.failure(u.InvalidTypeError.create(e,this.expectedType,p.Types.determineType(e).name))},t}(a.AbstractReader);e.NumberReader=n}(t.PrimitiveReaders||(t.PrimitiveReaders={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unreachable=function(e){throw Error("FATAL ERROR (UNREACHABLE)"+(e&&": "+e||""))}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.type="failure",this.error=e}return e.prototype.isSuccess=function(){return!1},e.prototype.isFailure=function(){return!0},e.prototype.map=function(e,t){return t(this.error)},e.prototype.flatMap=function(e,t){return t(this.error)},e.prototype.mapSuccess=function(t){return new e(this.error)},e.prototype.mapFailure=function(t){return new e(t(this.error))},e}();t.ResultFailureImpl=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.type="success",this.value=e}return e.prototype.isSuccess=function(){return!0},e.prototype.isFailure=function(){return!1},e.prototype.map=function(e,t){return e(this.value)},e.prototype.flatMap=function(e,t){return e(this.value)},e.prototype.mapSuccess=function(t){return new e(t(this.value))},e.prototype.mapFailure=function(t){return new e(this.value)},e}();t.ResultSuccessImpl=n},function(e,t,r){r(4),r(6),e.exports=r(4)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,